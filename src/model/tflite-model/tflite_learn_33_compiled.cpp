/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 10.02.2024 10:28:55

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238592;
#else
constexpr int kTensorArenaSize = 237568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 25206, -27659, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00018388763419352472, 0.00016758128185756505, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 77,-50,-63,124,-94,-3,-63,48,111,-9,-54,-36,-28,56,-24,16,127,-42,-32,-67,100,51,103,-76,-48,-48,-19,73,27,-85,6,78, 
  /* [1][0][][] */ 51,85,87,-73,-74,87,-8,21,-37,-18,48,121,127,52,43,-1,-44,-23,-63,-110,-81,48,32,125,85,73,-57,-5,112,-111,-114,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0036962879821658134, 0.0033685173839330673, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -388, 493, 542, 61, -623, 591, -46, 507, -479, -43, 553, 505, 512, 504, 92, -471, -348, 1216, -340, 276, -388, 606, 267, 561, 464, 322, 28, -283, 154, -479, -44, -219, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.7636247472837567e-05, 4.9782418500399217e-05, 4.7149729653028771e-05, 4.5100510760676116e-05, 4.3799049308290705e-05, 4.6104883949737996e-05, 5.0023230869555846e-05, 4.9897840654011816e-05, 4.9196976760867983e-05, 4.4956370402360335e-05, 4.8699279432184994e-05, 4.8523546865908429e-05, 4.8533951485296711e-05, 4.8883168346947059e-05, 5.0841314077842981e-05, 4.4283300667302683e-05, 4.1640629206085578e-05, 5.2112798584857956e-05, 4.5163680624682456e-05, 4.6444671170320362e-05, 4.1975385101977736e-05, 4.5300737838260829e-05, 4.9645255785435438e-05, 4.6370001655304804e-05, 4.9771526391850784e-05, 4.6645516704302281e-05, 5.0254449888598174e-05, 4.5751741708954796e-05, 5.3179614042164758e-05, 4.591314063873142e-05, 5.6956308981170878e-05, 4.4545431592268869e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -44,-52,99,10,86,-11,-96,-107,53,-99,-119,-17,41,-1,-38,56,-66,-34,-79,-68,-71,-114,-7,99,-127,2,72,-47,88,-6,-31,-86,75,-73,-104,56,-110,-90,-91,18,66,-95,-104,90,41,-107,99,-30, 
  /* [1][0][][] */ -37,47,-59,8,-27,88,56,19,90,-87,-87,82,73,-37,36,74,104,-31,37,127,-36,2,47,35,30,27,-25,108,10,18,110,-50,69,110,-3,34,60,74,-13,-51,-64,18,-7,-83,-24,35,-26,-45, 
  /* [2][0][][] */ 65,53,-52,106,-10,-50,110,107,-86,99,-21,95,103,-23,97,-101,-59,-18,41,69,-88,-5,127,33,-24,94,121,14,-67,95,100,109,-58,-10,-84,-97,-78,113,107,-14,-120,-65,30,9,-74,118,-19,-70, 
  /* [3][0][][] */ 77,0,45,-18,-72,51,-89,44,56,26,71,26,112,113,80,3,119,110,-44,24,127,-91,-63,-125,-20,-117,-88,117,73,-107,85,11,-58,-36,-8,-15,-93,-27,53,49,-25,-95,-94,9,81,38,-44,-82, 
  /* [4][0][][] */ 41,98,-11,48,-41,-37,17,6,53,86,-25,63,18,-44,-25,-82,-31,-11,-79,3,107,-111,79,16,-24,-17,55,-71,-63,26,-90,-70,63,114,3,-125,-64,-23,-127,40,-61,-80,-94,-114,25,114,28,51, 
  /* [5][0][][] */ 115,-77,92,97,54,-105,45,71,121,-107,7,-94,33,84,53,53,50,69,-85,114,44,55,27,-26,-127,-57,0,-100,41,47,24,-87,-27,12,-76,18,-109,-25,38,35,-111,-41,58,104,-27,15,29,-51, 
  /* [6][0][][] */ 43,-29,110,78,-70,-51,15,67,6,-71,25,-87,93,72,118,-94,34,45,-2,104,-62,-112,118,74,-46,-63,9,-64,-24,-94,71,-64,-75,-112,-32,-82,-9,63,-107,127,81,62,33,1,-105,98,-62,-39, 
  /* [7][0][][] */ 127,80,-26,-31,-58,121,-7,10,122,16,-82,2,63,-96,57,82,53,20,2,120,61,41,5,91,-65,107,53,61,-72,115,-13,47,35,33,69,102,-91,95,-7,-17,88,-63,94,75,58,-2,101,-100, 
  /* [8][0][][] */ -5,18,-53,-98,47,16,-93,-31,-6,25,30,114,-7,-35,-95,-81,-68,82,-67,4,20,-33,68,97,-119,79,30,69,-68,6,-104,102,80,-41,38,-12,104,-12,-21,57,79,88,-122,-127,-20,-29,-28,98, 
  /* [9][0][][] */ 2,5,122,51,87,-118,-41,-127,45,53,-11,81,-26,-83,-111,-32,10,2,-103,-66,6,108,-113,-113,120,-10,-16,28,2,-67,-87,106,65,-1,33,-19,-81,17,-34,-49,53,-72,59,-99,85,24,-108,60, 
  /* [10][0][][] */ -43,97,102,-54,-4,114,127,39,51,43,37,-85,110,69,-19,23,-35,90,-96,-47,-7,36,68,-59,33,65,-100,-105,-46,92,-77,-67,97,108,123,80,-30,22,-32,47,-40,127,-93,-26,-86,-57,1,-51, 
  /* [11][0][][] */ 127,27,-5,113,127,55,72,41,122,103,-63,91,4,-94,41,-54,-56,-93,66,53,41,82,36,-99,-103,-84,-6,75,80,6,40,-7,-76,-62,58,53,-53,89,-28,-47,-30,115,-59,16,-31,-58,-86,-81, 
  /* [12][0][][] */ 31,82,-44,11,98,19,-15,45,-62,70,-1,-4,-34,-1,61,-66,-97,-24,-44,-66,37,-2,29,106,-64,-37,114,-92,94,27,-21,127,-73,-59,-38,24,7,-59,-16,54,111,52,-94,-28,-11,-81,-34,124, 
  /* [13][0][][] */ 124,-44,111,105,103,123,95,74,83,-90,24,-43,99,60,78,-36,-113,-62,-66,40,76,-19,127,-37,-61,49,20,25,-83,-75,92,49,51,111,-14,43,-72,-15,27,78,-65,88,-38,22,-33,29,1,-21, 
  /* [14][0][][] */ -67,-93,84,66,76,-49,-26,-105,-90,-31,42,73,-27,-92,-79,-90,-62,-63,17,12,-66,12,-8,66,-110,-81,-44,27,-107,-127,-89,16,88,-24,-38,-11,94,96,37,-123,-3,-108,27,66,64,-106,41,-77, 
  /* [15][0][][] */ -5,-41,-37,71,92,-100,30,-112,50,-11,-94,35,104,-1,-109,-127,98,0,-105,8,43,14,64,108,82,63,27,99,19,49,44,-119,-4,2,-77,-14,-78,103,117,-84,17,111,-72,-44,20,-84,-54,-93, 
  /* [16][0][][] */ -90,-9,113,-75,43,120,-65,40,52,49,-127,110,-17,-40,-68,-78,126,87,84,70,123,89,-46,58,-38,59,-87,70,-103,8,55,7,-127,84,66,67,-45,57,-56,-84,32,-59,77,107,68,119,120,-17, 
  /* [17][0][][] */ 56,-77,46,95,-14,-96,-37,-67,63,-62,98,66,119,80,-84,56,56,74,118,127,-65,10,37,-22,46,80,-52,55,126,-28,-8,87,-2,2,54,27,-24,116,-54,-5,-66,-11,3,13,30,35,106,-71, 
  /* [18][0][][] */ -106,98,109,-78,-15,-122,-111,-1,-12,72,-121,-31,-44,36,57,-67,21,-24,55,-30,103,-55,15,-91,28,-108,-26,113,30,29,-8,39,42,-36,-121,-120,-40,29,-39,61,-47,-7,-58,-19,-127,15,21,-9, 
  /* [19][0][][] */ 34,31,85,46,71,-85,109,101,109,-57,43,15,-82,51,-56,63,86,-82,127,64,-13,96,-40,29,102,-73,34,-63,-70,-117,-52,51,94,-73,49,12,15,-58,-41,-90,61,-109,-82,26,-75,44,95,-77, 
  /* [20][0][][] */ -16,72,75,104,-102,99,17,61,11,10,-105,32,-12,96,40,-89,-55,-38,-79,-39,24,-57,-93,-87,91,-88,-125,51,29,8,-52,123,109,45,-24,56,43,-43,-17,-127,-97,-44,-105,-124,-36,-70,-81,116, 
  /* [21][0][][] */ 115,95,86,-97,115,-67,94,30,13,-57,-61,29,16,24,-40,-82,-109,-26,38,-2,123,-39,89,-74,60,-76,-19,83,20,18,9,-10,20,33,-85,-105,127,118,-124,-21,-4,20,44,1,-92,-90,-76,107, 
  /* [22][0][][] */ 43,-41,-64,-89,93,-44,92,62,-92,93,-72,-113,113,-127,-101,-73,34,84,-116,-57,91,-75,33,35,93,-14,-101,102,-61,-66,-78,-98,52,63,15,5,9,-12,-55,-105,-3,-6,10,88,58,-115,88,-18, 
  /* [23][0][][] */ 83,-77,15,70,111,-106,24,-94,71,-73,102,53,28,-127,33,-28,90,-27,-109,117,106,-77,118,-27,-17,-4,100,27,73,63,87,-27,-29,53,26,41,110,8,-117,18,-119,12,24,-103,-63,-97,119,35, 
  /* [24][0][][] */ -56,-29,-90,-56,-72,-111,-48,-77,73,127,90,23,120,44,-22,-111,-98,48,20,-37,104,-79,-45,-31,46,-31,90,56,102,70,4,-45,9,15,48,23,-42,-69,55,-10,-87,-83,119,9,27,-46,41,75, 
  /* [25][0][][] */ -77,-47,-76,-5,101,-66,-113,62,48,-108,-38,2,77,-23,-104,-15,-79,66,28,-107,75,86,-11,-60,11,-54,-96,43,72,-83,23,127,101,-109,42,71,107,-59,-25,-14,-97,107,-99,-1,106,40,63,39, 
  /* [26][0][][] */ 48,-113,-17,-1,-94,-9,7,-12,-105,-114,99,95,-70,-39,11,-19,127,31,-31,-39,16,75,95,10,52,63,10,49,33,3,-91,-2,-29,-59,-92,-96,-54,79,-32,100,-93,100,61,30,-68,87,-34,107, 
  /* [27][0][][] */ 7,5,-69,-110,-127,-76,-72,-21,42,100,36,-81,-31,65,81,-33,69,-18,63,-90,-100,9,-32,-28,-110,47,-118,-6,69,25,-30,-13,61,69,-97,-91,-97,-70,-120,90,-97,15,26,17,100,24,68,104, 
  /* [28][0][][] */ 65,-25,81,44,-98,-57,-116,-65,-66,-94,41,43,-73,-85,8,78,87,82,-72,70,-20,23,-99,-91,-127,64,-90,-53,-75,-70,-14,-18,-89,4,39,42,19,-105,-33,27,60,41,-81,31,-96,-3,-23,46, 
  /* [29][0][][] */ 41,45,50,-63,-98,7,-127,-1,101,-24,-97,-83,106,-94,-59,-54,-106,98,38,-77,-87,-33,53,6,-41,8,-54,-35,-102,-16,112,-13,48,-3,-78,-53,-19,101,-14,93,60,103,-58,87,-4,106,-52,-30, 
  /* [30][0][][] */ 22,-55,-49,35,-86,17,-51,-13,92,-15,43,-37,-83,23,50,6,9,31,77,-77,35,-85,-96,7,-91,45,-58,99,-3,-94,-67,9,-73,-62,-103,-49,14,-15,-4,17,72,-64,-8,127,87,-36,84,51, 
  /* [31][0][][] */ 85,-103,39,109,53,64,-57,-109,-35,-23,-88,-70,111,-127,-53,116,-61,-92,41,56,70,37,-33,111,52,-124,36,43,-65,-82,52,116,19,21,-99,-10,105,-35,-69,-122,63,-75,-32,34,4,-55,-40,28, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0022941005881875753, 0.0023974573705345392, 0.0022706703748553991, 0.00217198277823627, 0.0021093059331178665, 0.0022203519474714994, 0.0024090546648949385, 0.0024030159693211317, 0.0023692632094025612, 0.0021650411654263735, 0.0023452946916222572, 0.0023368317633867264, 0.0023373328149318695, 0.0023541506379842758, 0.0024484524037688971, 0.0021326269488781691, 0.0020053591579198837, 0.0025096854660660028, 0.0021750249434262514, 0.0022367157507687807, 0.0020214805845171213, 0.002181625459343195, 0.0023908517323434353, 0.0022331196814775467, 0.0023969328030943871, 0.0022463882341980934, 0.0024201897904276848, 0.0022033450659364462, 0.0025610618758946657, 0.002211117884144187, 0.0027429426554590464, 0.0021452507935464382, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { -190, 1218, 1942, 4229, 6757, -1012, -1090, 14725, 1165, 9328, 472, -810, 4131, -3626, 2213, -1829, -270, -2927, 857, 1502, 2344, 3378, 4672, 501, -2649, -1663, 384, 1902, 1578, 2216, -834, 2796, 4128, 4356, 4112, 1818, 11064, 1565, 1070, -932, 889, 13019, -1023, 1515, 7606, 80, 1382, 4223, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00034781472641043365, 0.00024554482661187649, 0.00014146773901302367, 0.00014604476746171713, 0.00014076926163397729, 0.00016238128591794521, 0.00029955495847389102, 6.7467990447767079e-05, 0.00025479751639068127, 8.6723135609645396e-05, 0.00019654633069876581, 0.0005022127297706902, 0.0001610547915333882, 0.00018285699479747564, 0.00033322119270451367, 0.00015498997527174652, 0.00015121417527552694, 5.9046265960205346e-05, 0.00026623345911502838, 0.00037141726352274418, 0.00027857284294441342, 0.00015275842451956123, 0.00014044805720914155, 0.00022278382675722241, 0.00019018436432816088, 0.00028138706693425775, 0.00035044510150328279, 0.00027488498017191887, 0.00021433077927213162, 0.0002803110983222723, 0.00015435872774105519, 0.00022797878773417324, 0.00016033108113333583, 0.00016888629761524498, 0.00010629409371176735, 0.00013373108231462538, 7.7257718658074737e-05, 0.00017305088113062084, 0.00015013648953754455, 0.00027613883139565587, 0.0001798737357603386, 7.4686402513179928e-05, 0.00017578816914465278, 0.00012329425953794271, 0.00010613947961246595, 0.00020830157154705375, 0.00018661041394807398, 0.00018120500317309052, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 17,-18,-60,15,-127,6,-52,-4, 
  /* [1][0][][] */ -113,29,127,13,-115,-14,3,-17, 
  /* [2][0][][] */ 10,72,-36,25,-51,-127,-19,86, 
  /* [3][0][][] */ -85,40,-2,127,-1,-55,-75,-52, 
  /* [4][0][][] */ 12,-13,40,-125,-29,17,-127,15, 
  /* [5][0][][] */ 72,127,-63,-48,-34,-9,41,-127, 
  /* [6][0][][] */ 52,-42,47,98,-50,-127,-5,-90, 
  /* [7][0][][] */ 32,115,-48,-64,-67,-36,16,-127, 
  /* [8][0][][] */ -3,-27,55,-2,6,5,-51,-127, 
  /* [9][0][][] */ -86,-6,-111,28,-127,-82,-93,-21, 
  /* [10][0][][] */ 79,6,93,-38,-127,6,81,91, 
  /* [11][0][][] */ 127,-31,-87,12,63,-3,-80,0, 
  /* [12][0][][] */ -27,-99,127,14,14,4,-73,60, 
  /* [13][0][][] */ 42,-70,73,-19,22,-127,62,-119, 
  /* [14][0][][] */ -102,39,127,-4,-39,-70,46,-46, 
  /* [15][0][][] */ 46,121,-43,-51,-54,14,47,-127, 
  /* [16][0][][] */ 27,95,-48,60,-2,-36,-18,127, 
  /* [17][0][][] */ 24,79,-21,86,-50,75,-127,46, 
  /* [18][0][][] */ 73,-38,127,-40,83,-95,15,-28, 
  /* [19][0][][] */ 11,-10,22,127,22,-51,-39,-103, 
  /* [20][0][][] */ 6,21,-22,40,-12,50,-127,8, 
  /* [21][0][][] */ 9,-2,57,19,20,127,48,-61, 
  /* [22][0][][] */ 65,-127,-7,60,-93,65,21,14, 
  /* [23][0][][] */ -36,-115,-7,-109,3,-65,-2,-127, 
  /* [24][0][][] */ 18,21,-19,-59,-36,-127,-47,51, 
  /* [25][0][][] */ 66,66,127,12,7,26,-44,-3, 
  /* [26][0][][] */ -115,41,127,-49,-97,-22,92,-7, 
  /* [27][0][][] */ -82,45,-37,-100,27,127,-23,91, 
  /* [28][0][][] */ 10,-101,66,54,42,2,-35,127, 
  /* [29][0][][] */ -119,60,70,-29,-127,0,90,-29, 
  /* [30][0][][] */ 90,-85,22,66,-127,-24,34,-82, 
  /* [31][0][][] */ 54,84,60,-40,-117,-19,9,127, 
  /* [32][0][][] */ -33,-24,93,-47,41,17,-127,-121, 
  /* [33][0][][] */ 56,36,108,-127,18,48,-36,62, 
  /* [34][0][][] */ -21,-120,96,-37,29,127,61,-97, 
  /* [35][0][][] */ 38,15,116,-1,2,127,20,-62, 
  /* [36][0][][] */ -20,35,-31,47,58,-127,5,20, 
  /* [37][0][][] */ 20,-19,60,22,-127,111,-34,-19, 
  /* [38][0][][] */ -127,-23,-98,-27,79,-39,-114,-32, 
  /* [39][0][][] */ 21,-2,39,-116,-30,52,-127,11, 
  /* [40][0][][] */ 99,-33,-71,-127,68,67,61,-21, 
  /* [41][0][][] */ 15,-18,-6,127,-109,3,-85,-63, 
  /* [42][0][][] */ -86,22,69,127,-58,-66,-59,7, 
  /* [43][0][][] */ 87,-112,100,44,-114,36,127,56, 
  /* [44][0][][] */ 12,-44,30,-65,-17,127,43,26, 
  /* [45][0][][] */ -33,33,-40,5,77,-47,-127,-37, 
  /* [46][0][][] */ -102,-97,-6,-18,20,127,-44,-118, 
  /* [47][0][][] */ -127,-98,-61,37,29,125,-32,-61, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0038200966082513332, 0.0026968524325639009, 0.0015537594445049763, 0.0016040296759456396, 0.0015460880240425467, 0.0017834558384492993, 0.0032900529913604259, 0.00074101012432947755, 0.0027984760235995054, 0.00095249206060543656, 0.0021586951334029436, 0.0055158706381917, 0.0017688868101686239, 0.0020083433482795954, 0.0036598138976842165, 0.0017022760584950447, 0.001660805894061923, 0.00064851320348680019, 0.0029240783769637346, 0.0040793265216052532, 0.0030596035066992044, 0.0016777666751295328, 0.0015425601741299033, 0.0024468651972711086, 0.0020888207945972681, 0.0030905124731361866, 0.003848986467346549, 0.0030190993566066027, 0.0023540242109447718, 0.0030786949209868908, 0.0016953429440036416, 0.0025039222091436386, 0.0017609382048249245, 0.0018549012020230293, 0.0011674425331875682, 0.0014687867369502783, 0.00084853207226842642, 0.001900641480460763, 0.0016489694826304913, 0.0030328705906867981, 0.0019755777902901173, 0.00082029093755409122, 0.0019307055044919252, 0.001354157691821456, 0.0011657443828880787, 0.0022878046147525311, 0.0020495676435530186, 0.0019901993218809366, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -1970, -241, -12885, 10640, 7704, -2395, 9330, 1898, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 9.0688801719807088e-05, 0.00013683010183740407, 8.4745835920330137e-05, 0.00011409632861614227, 0.00014600515714846551, 7.1930764534045011e-05, 0.0001274410606129095, 0.00014773596194572747, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 13,44,32,35,-4,-29,44,49,0,27,-10,-6,42,-36,46,-16,-58,-28,-127,-7,49,-39,13,41,9,-6,51,-6,-5,-55,6,30,-43,48,47,7,53,74,-58,-51,4,16,-95,-42,33,18,-19,-56, 
  /* [1][0][][] */ -16,-40,-1,72,-19,-6,-8,-9,17,3,-18,-51,-6,-1,19,10,47,26,50,-37,0,30,29,-49,-4,-11,-32,-31,-38,12,-8,-8,-33,-25,-98,74,22,12,-127,-15,26,-17,70,29,99,-25,-33,49, 
  /* [2][0][][] */ -6,-2,31,-30,-34,-17,-4,118,-49,87,-39,-7,127,-13,41,-22,-57,-70,0,33,-11,-19,22,-2,12,51,5,40,20,8,72,33,-65,-19,25,59,3,70,60,-120,43,39,-48,-36,16,36,-12,-13, 
  /* [3][0][][] */ 24,-12,-127,-23,9,-8,61,-40,-32,-16,-7,18,-43,-62,41,13,11,48,14,28,-64,14,-69,-8,-36,-71,26,4,-74,-65,-65,25,81,38,-45,21,-64,7,23,-23,34,-60,-29,12,60,-45,36,-21, 
  /* [4][0][][] */ 4,51,-4,-11,29,-7,-80,-115,-33,17,-20,72,2,-24,3,63,45,54,-87,8,23,8,-29,-8,36,-3,3,-1,-25,13,2,-36,22,-22,-127,30,-29,-3,45,44,-30,-38,81,50,11,-49,22,17, 
  /* [5][0][][] */ -57,-26,96,12,83,27,54,-5,-127,5,-104,-13,-91,-89,52,80,-16,32,17,4,50,21,22,12,-17,0,7,-19,-42,-7,-23,-27,-22,43,74,26,-10,67,-24,0,45,-43,-54,54,-13,18,40,25, 
  /* [6][0][][] */ 82,67,-16,25,27,-31,-105,-71,0,-1,-3,71,-23,-31,-1,38,-41,37,19,-2,127,-16,64,111,5,-55,15,-26,-56,-17,-32,-64,45,-31,19,-12,-5,28,-45,38,-56,-50,-64,-38,-25,-53,49,-3, 
  /* [7][0][][] */ 5,52,35,-80,57,-50,-41,-13,13,7,35,27,-35,5,36,-5,-16,27,-21,50,-47,-5,-14,54,3,-31,6,36,-9,31,-35,-15,42,-6,-34,-39,-60,10,127,-5,11,-35,-21,-8,38,2,65,5, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0038542740512639284, 0.0058152792043983936, 0.0036016979720443487, 0.0048490939661860466, 0.0062052193097770214, 0.0030570575036108494, 0.005416245199739933, 0.0062787784263491631, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -1233, -2369, 2851, -553, -202, -70, 3188, 11779, -5340, 13149, 8723, -2077, 5204, -1785, 5255, -589, 955, -1407, 1603, -2207, -3321, -2315, -17545, -3095, 4330, 986, 2335, 2336, 8307, 7872, 7819, -2313, -7583, -188, -2241, -5052, 4995, 7867, -2604, 11327, 1198, -764, -4519, -2150, -7444, 11607, 76, 7526, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 6.5971165895462036e-05, 0.00033874489599838853, 0.00019100293866358697, 0.0002353911695536226, 0.00017436750931665301, 0.00049204914830625057, 0.00024622929049655795, 0.00055650947615504265, 0.00027635516016744077, 0.00011072906636400148, 0.00016686460003256798, 0.0001580012176418677, 0.00017346873937640339, 0.00029384935623966157, 0.00018186210945714265, 0.0002356121112825349, 0.00055608735419809818, 0.00025888902018778026, 9.4500035629607737e-05, 0.00022396972053684294, 0.00013575438060797751, 0.00020773192227352411, 8.8697321189101785e-05, 0.0002962784783449024, 0.00012590366532094777, 0.00034133650478906929, 8.7058026110753417e-05, 0.00023448139836546034, 0.00018719458603300154, 0.00012459643767215312, 0.00015946001803968102, 0.00019133888417854905, 0.0001881975622382015, 0.00037175411125645041, 0.00039426176226697862, 0.00014245699276216328, 0.00011600687867030501, 9.0215995442122221e-05, 0.00034099872573278844, 0.00014923952403478324, 0.00023416617477778345, 0.00018012832151725888, 0.00017669895896688104, 0.00021878362167626619, 0.00026702086324803531, 0.00010609367745928466, 0.00015246198745444417, 0.000113331938337069, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 97,75,45,34,-13,-73,35,28,-53,-18,-19,49,55,14,-2,19,49,-39,97,50,66,-18,21,13,-7,-77,54,0,-33,-72,35,47,27,-90,7,26,-39,39,-12,-127,-7,-101,-49,-8,10,-127,63,-127, 127,13,64,-97,52,59,41,-43,-98,-99,21,127,12,-49,-127,16,-10,120,61,38,45,84,116,32,127,-62,-27,-127,-122,-59,-127,127,32,-79,-81,127,30,-96,-87,-106,12,127,-67,29,-45,-85,75,16, 82,8,21,-79,-22,-55,36,21,-40,-7,-7,31,35,29,46,10,-51,7,66,44,-30,-32,-67,-6,-14,-77,-68,-42,-33,-83,-3,16,50,-51,29,38,-75,-56,0,-80,3,-29,118,-15,3,-108,22,-51, 
  /* [0][1][][] */ 103,-4,21,62,54,77,-2,-127,87,-127,-99,-91,7,45,-57,127,-127,103,67,58,-3,99,82,-40,-10,124,84,16,30,-47,-93,40,62,88,-70,47,-80,-4,-5,-75,-16,-60,12,-94,44,-23,47,-32, -1,127,-127,95,127,60,-127,18,95,-28,-13,80,-127,127,-26,-14,42,-127,-127,-7,127,39,127,-126,-89,89,-56,-2,-7,-43,46,-26,127,-12,120,-78,113,-127,127,97,127,70,-102,-2,112,41,-127,-31, 50,-2,8,-127,57,53,10,-83,127,-39,-127,-28,18,40,-51,118,84,-3,15,68,33,-127,43,127,-71,127,-71,-23,41,-24,-55,40,-15,71,127,56,-74,-21,-57,-24,-21,-33,127,127,127,-32,70,-17, 
  /* [0][2][][] */ 33,42,28,50,4,0,28,27,6,-30,2,-23,39,-62,46,-55,-11,22,79,-59,109,-18,26,-60,-80,-69,127,76,-2,-85,-58,63,25,37,-10,-4,-73,27,1,-12,-17,-76,22,-17,8,4,35,-68, 45,10,8,7,-17,-127,-7,-71,-13,-47,15,-32,-7,-57,-10,19,3,-38,24,127,106,64,89,29,40,-54,-75,44,-127,-50,-64,23,7,127,-55,-2,-104,-124,22,-21,-90,85,-3,4,-39,-81,85,-46, 21,8,26,-59,13,-3,37,39,-7,-1,10,-7,42,-52,59,-14,-7,-32,54,-127,15,-63,-63,68,-57,-73,-124,23,-7,-127,13,33,28,-31,-6,44,-127,-70,-28,-22,-22,-12,-4,11,-8,33,-29,-55, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.002971085486933589, 0.015255756676197052, 0.0086020315065979958, 0.0106011051684618, 0.007852836512029171, 0.022159984335303307, 0.011089212261140347, 0.025063028559088707, 0.01244596391916275, 0.0049868077039718628, 0.0075149340555071831, 0.0071157622151076794, 0.0078123589046299458, 0.013233834877610207, 0.0081903636455535889, 0.010611055418848991, 0.025044016540050507, 0.011659356765449047, 0.0042559150606393814, 0.010086727328598499, 0.0061138509772717953, 0.009355439804494381, 0.0039945831522345543, 0.013343233615159988, 0.0056702126748859882, 0.015372471883893013, 0.0039207558147609234, 0.010560132563114166, 0.0084305182099342346, 0.0056113400496542454, 0.0071814605034887791, 0.0086171608418226242, 0.0084756882861256599, 0.016742363572120667, 0.017756020650267601, 0.0064157103188335896, 0.0052244998514652252, 0.0040629785507917404, 0.015357259660959244, 0.0067211692221462727, 0.010545936413109303, 0.0081122806295752525, 0.0079578356817364693, 0.0098531655967235565, 0.012025583535432816, 0.0047780475579202175, 0.0068662967532873154, 0.0051040309481322765, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { -1238, -1829, 2431, -692, -2586, 2367, 1982, 19966, 2653, 2198, 6155, 2391, 1464, 9440, 4858, -1971, 14477, 1758, 620, -2670, -184, -527, 1736, 8320, 660, 7119, 2350, -250, 6570, 248, 1623, -1294, -1600, -2699, -6884, 1530, 2441, 1896, 1917, 2731, 2009, 801, 3943, 2557, 12874, 4072, -1518, 772, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00023390639398712665, 0.00027073439559899271, 0.00026388265541754663, 0.00017392102745361626, 0.00020100509573239833, 0.00011564718442969024, 0.00027811818290501833, 6.2856888689566404e-05, 0.00012435250391718, 0.00024809743626974523, 0.00012989611423108727, 0.00015684157551731914, 0.00026003105449490249, 9.2431058874353766e-05, 0.00015418945986311883, 0.00020841513469349593, 7.0307047280948609e-05, 0.00014105602167546749, 0.00032096731592901051, 0.0002243988128611818, 0.00014097648090682924, 0.00031398417195305228, 0.00020230660447850823, 0.00011152266233693808, 0.00023938360391184688, 9.5518931630067527e-05, 0.00026728052762337029, 0.00027136472635902464, 7.9850600741337985e-05, 0.0004208126338198781, 0.00015516538405790925, 0.00028844160260632634, 0.00028111634310334921, 0.00012382406566757709, 8.5624647908844054e-05, 0.00027904691523872316, 0.00018475184333510697, 0.00019161621457897127, 0.00023071785108186305, 0.00017766533710528165, 0.00030905631138011813, 0.00026471479213796556, 0.00016798131400719285, 0.0002054133074125275, 7.2013761382550001e-05, 0.00017090828623622656, 0.00012618045730050653, 0.00028870321693830192, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -16,-47,-44,100,11,-72,-84,-127, 
  /* [1][0][][] */ 127,-28,40,-28,22,-76,-4,26, 
  /* [2][0][][] */ -5,47,9,-127,17,93,-53,63, 
  /* [3][0][][] */ -23,127,-51,-88,-99,1,30,-90, 
  /* [4][0][][] */ 6,-63,-97,-35,26,-84,-75,-127, 
  /* [5][0][][] */ -37,-86,87,55,11,127,35,-117, 
  /* [6][0][][] */ 0,6,-41,35,6,11,-127,-39, 
  /* [7][0][][] */ 24,-18,6,27,-41,59,127,69, 
  /* [8][0][][] */ -9,43,-87,-15,-35,-127,-58,67, 
  /* [9][0][][] */ 62,4,-46,-18,7,127,-45,104, 
  /* [10][0][][] */ -19,55,86,124,88,127,-13,-60, 
  /* [11][0][][] */ -18,-57,1,36,-127,72,-12,-29, 
  /* [12][0][][] */ -21,37,78,-55,59,-92,-127,-66, 
  /* [13][0][][] */ 48,32,-92,-127,-13,-65,-74,121, 
  /* [14][0][][] */ -36,-127,4,-70,6,-68,20,-113, 
  /* [15][0][][] */ 7,63,70,91,85,127,-11,-29, 
  /* [16][0][][] */ 44,19,-31,-127,62,104,-77,80, 
  /* [17][0][][] */ -96,91,-127,31,35,108,-81,46, 
  /* [18][0][][] */ -127,56,24,-17,-95,16,-26,4, 
  /* [19][0][][] */ 127,6,-37,-33,82,-71,75,-91, 
  /* [20][0][][] */ 127,-63,39,-34,-52,32,82,8, 
  /* [21][0][][] */ 16,-29,-39,44,-2,21,127,39, 
  /* [22][0][][] */ 90,37,-127,-90,24,114,68,113, 
  /* [23][0][][] */ -29,41,-49,-85,37,6,-127,6, 
  /* [24][0][][] */ 127,-66,-92,-25,93,-60,20,17, 
  /* [25][0][][] */ -34,-83,78,-42,69,127,-25,-99, 
  /* [26][0][][] */ 24,-60,42,38,127,-67,-50,-67, 
  /* [27][0][][] */ -22,-127,65,82,18,-6,-39,100, 
  /* [28][0][][] */ -14,49,-105,-44,107,-95,-26,127, 
  /* [29][0][][] */ -80,31,127,-94,14,-35,31,27, 
  /* [30][0][][] */ 113,-85,96,-28,-64,-127,68,-32, 
  /* [31][0][][] */ 21,29,48,-6,-34,-11,-127,11, 
  /* [32][0][][] */ 18,-16,23,127,-28,-86,-44,-87, 
  /* [33][0][][] */ 104,-87,-52,103,-127,90,-45,-40, 
  /* [34][0][][] */ 16,-79,11,-60,-122,127,32,-39, 
  /* [35][0][][] */ 23,127,87,18,14,22,-62,0, 
  /* [36][0][][] */ 24,108,-79,-127,-92,12,83,-84, 
  /* [37][0][][] */ 42,-7,42,15,43,127,59,21, 
  /* [38][0][][] */ -68,-90,94,54,21,-7,-58,127, 
  /* [39][0][][] */ 8,33,127,-52,-30,39,-30,25, 
  /* [40][0][][] */ 12,-1,23,-1,0,-25,127,2, 
  /* [41][0][][] */ -17,-6,-67,-127,-78,-88,-69,28, 
  /* [42][0][][] */ 37,-10,58,-37,-127,-61,-44,32, 
  /* [43][0][][] */ 82,-17,40,34,-82,-127,114,21, 
  /* [44][0][][] */ -74,-127,-15,-72,0,15,-5,-119, 
  /* [45][0][][] */ 21,104,74,66,47,127,-56,34, 
  /* [46][0][][] */ -116,-8,-5,73,110,54,-100,127, 
  /* [47][0][][] */ 13,75,-47,-42,-6,-41,28,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.003231660695746541, 0.0037404780741780996, 0.003645814023911953, 0.0024029002524912357, 0.0027770949527621269, 0.0015977864386513829, 0.0038424928206950426, 0.00086843344615772367, 0.0017180595314130187, 0.0034277245867997408, 0.0017946502193808556, 0.0021669298876076937, 0.0035926001146435738, 0.0012770314933732152, 0.0021302881650626659, 0.0028794724494218826, 0.00097136519616469741, 0.0019488359102979302, 0.0044344980269670486, 0.0031003034673631191, 0.0019477370660752058, 0.0043380185961723328, 0.0027950766962021589, 0.0015408018371090293, 0.0033073341473937035, 0.0013196936342865229, 0.0036927592009305954, 0.0037491866387426853, 0.0011032193433493376, 0.0058139651082456112, 0.0021437716204673052, 0.0039851213805377483, 0.0038839152548462152, 0.0017107585445046425, 0.0011829937575384974, 0.0038553238846361637, 0.0025525393430143595, 0.0026473777834326029, 0.003187607740983367, 0.0024546319618821144, 0.0042699351906776428, 0.0036573109682649374, 0.0023208369966596365, 0.0028379990253597498, 0.00099494517780840397, 0.0023612761870026588, 0.0017433145549148321, 0.003988735843449831, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { 15520, 4343, 14697, -5062, -15398, 8064, 3871, 13554, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 7.5730000389739871e-05, 9.968850645236671e-05, 7.6647469541057944e-05, 7.4472147389315069e-05, 0.00010403345368104056, 0.00011188642383785918, 6.6265332861803472e-05, 8.5755047621205449e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-14,-13,-9,-23,-83,-33,-12,57,-39,-53,-26,-20,78,-53,5,14,-8,5,16,30,-30,5,10,36,5,4,31,9,58,-42,-84,17,-60,10,-24,33,-37,-7,31,-60,-22,-24,-42,-80,-83,5,-23, 
  /* [1][0][][] */ -74,0,92,-55,64,38,51,26,-20,15,-1,102,22,-37,-127,-58,-106,-82,40,-22,7,96,-47,7,22,-109,36,96,41,-26,30,50,47,37,5,34,-72,-22,20,11,4,-33,-97,19,-15,-47,-95,34, 
  /* [2][0][][] */ 87,36,-29,-66,-51,-7,-47,-88,31,28,-79,-51,-11,59,-53,44,-3,71,4,12,59,47,-2,0,-127,23,27,-53,0,32,36,-86,12,-40,17,16,-48,-52,16,33,-113,-107,-30,-51,-46,-94,31,0, 
  /* [3][0][][] */ 13,-2,19,24,-104,-26,-10,47,-33,-58,-7,73,16,-16,-75,-43,-24,29,2,-59,-40,127,15,-57,22,46,48,-48,20,14,9,24,31,20,11,-7,47,52,25,-1,38,-20,21,-49,-17,6,22,34, 
  /* [4][0][][] */ -47,21,-120,16,-8,95,23,40,-18,127,41,67,25,-80,-26,29,-23,3,-6,36,-18,43,-74,25,9,-11,51,-18,43,-66,121,97,53,51,12,-47,-88,22,1,-23,46,20,38,37,50,38,28,73, 
  /* [5][0][][] */ -24,4,39,-6,61,-64,-33,-28,-30,-65,8,-27,42,4,-18,-2,23,-4,6,32,14,64,21,20,19,-3,-36,-11,-35,0,-127,-9,-41,-8,28,-21,-7,-27,1,-15,-16,-3,-30,-9,33,37,-2,46, 
  /* [6][0][][] */ 8,57,-4,73,-16,40,-59,54,-81,-34,53,20,45,15,38,18,0,-44,-43,39,-1,67,32,-36,-87,-8,-41,23,-96,-10,-92,4,6,-34,-43,-56,127,-4,-55,-57,51,34,42,-52,-78,-18,-55,-40, 
  /* [7][0][][] */ -47,18,-77,29,-17,-1,-5,-2,-53,-45,31,71,41,10,-70,-72,-60,85,-1,-5,40,13,34,-31,-37,95,-50,-108,-46,-12,-107,-11,-17,-29,-54,0,-32,-38,-48,-20,-25,40,55,-16,-53,-53,127,-51, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0032185250893235207, 0.0042367614805698395, 0.0032575174700468779, 0.0031650662422180176, 0.00442142179235816, 0.0047551728785037994, 0.0028162766247987747, 0.0036445893347263336, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 5950, 5281, 9990, 8800, 36122, -2115, -1288, -194, -1420, -10533, -2322, -1661, 13409, 6691, 4318, -383, 7097, 5019, 651, -3175, 3703, -2237, 7630, -1145, 4017, 9051, -164, 260, -134, 1776, 8957, 3742, 1217, -1500, 1476, -762, 7413, 5498, -1331, -141, 5773, -6380, 4309, 962, -588, 1907, 4856, -2128, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00027336811763234437, 0.00016425718786194921, 8.2117803685832769e-05, 0.00015796408115420491, 5.6807693908922374e-05, 0.00042734260205179453, 0.00025138581986539066, 0.00028441977337934077, 0.0003709460434038192, 0.00026796408928930759, 0.00014000420924276114, 0.00034169899299740791, 8.2148479123134166e-05, 0.00016551159205846488, 0.00041637162212282419, 0.00011868600995512679, 0.00014173863746691495, 0.00018198152247350663, 0.00047555298078805208, 0.00027613242855295539, 0.00015288790746126324, 0.00017643491446506232, 0.00012457583216018975, 0.00016354108811356127, 0.00018206253298558295, 0.00018815629300661385, 0.00039116718107834458, 0.0002397052594460547, 0.00034330473863519728, 0.00029434199677780271, 0.00017874401237349957, 0.00032649736385792494, 0.00026896732742898166, 0.00092290126485750079, 0.00013370202213991433, 0.00018253200687468052, 0.00025197485229000449, 0.00016217330994550139, 0.00017756290617398918, 0.00030922653968445957, 0.00018360889225732535, 0.00018181136692874134, 0.00026362822973169386, 0.00046967991511337459, 0.00033927251934073865, 0.0004095020703971386, 0.00026650383369997144, 0.00023248007346410304, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -102,-17,47,-12,-127,15,-109,2,-5,127,55,18,-51,76,9,37,39,27,17,-23,-113,-21,17,59,-28,10,-7,-67,25,-121,84,40,-9,27,41,-35,17,-127,-19,127,-64,39,-10,-7,-14,6,10,-16, 14,-127,-14,22,-72,25,-109,-4,32,33,127,69,-75,-78,-94,-56,-11,-44,104,63,14,68,-62,27,-82,-9,-1,-127,10,-75,-28,-127,-12,17,-50,-127,-23,-2,20,90,127,-14,-11,127,9,-127,10,-30, -127,11,54,1,-97,21,-67,-2,-3,90,-11,-6,-71,77,25,61,-35,0,10,-41,-86,-33,61,25,14,-10,7,-48,-39,-127,47,-11,3,12,-54,-31,16,-101,23,95,-59,28,-8,4,9,11,14,44, 
  /* [0][1][][] */ 56,-30,25,-2,-91,6,64,-16,-54,60,30,39,-61,-36,-80,125,-45,8,46,127,9,44,-127,-9,-30,-109,-18,-68,127,20,37,117,-127,-1,100,7,-5,36,-102,-114,52,-21,12,11,-127,41,8,-51, 114,-45,-127,-127,48,127,-1,127,-127,-87,-29,127,-65,-127,-127,-127,-28,-127,-78,67,127,127,-87,98,-127,69,-124,93,-57,-59,-127,-101,6,127,-127,115,-127,-67,127,-45,-54,127,-127,-77,103,77,-127,-67, 49,-11,98,-1,-59,-30,11,-25,-32,15,6,-20,-35,-75,-60,126,-127,-42,24,123,-19,51,-5,-127,29,-79,127,-6,-54,110,-49,94,106,-40,-57,23,-10,-15,1,-53,29,-24,-8,-10,2,31,-13,127, 
  /* [0][2][][] */ -109,-25,35,-25,-50,12,76,2,90,43,67,16,-55,80,39,-11,64,52,5,-19,-56,-28,36,36,-23,-9,-4,4,6,34,78,-4,-5,14,73,20,20,-48,-38,3,-37,18,4,-16,-11,-10,-10,0, -70,-105,59,-56,-75,-14,127,1,91,34,90,-34,127,-110,-67,-24,-58,40,-127,20,-69,14,-120,-6,21,-127,-1,25,2,58,12,-88,-9,-39,-23,35,-12,55,53,-56,1,20,27,-48,27,-28,-1,10, -74,1,47,-4,-87,30,48,-3,48,13,15,27,-120,52,46,3,-52,53,-1,-16,-37,-27,109,-61,-1,-16,12,25,-17,35,26,-47,-10,25,-29,18,19,-57,5,-34,-30,39,20,-4,-6,6,8,0, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.011618144810199738, 0.0069809304550290108, 0.0034900065511465073, 0.0067134732380509377, 0.0024143268819898367, 0.018162060528993607, 0.010683896951377392, 0.012087840586900711, 0.015765206888318062, 0.011388474144041538, 0.0059501784853637218, 0.014522206969559193, 0.0034913101699203253, 0.0070342426188290119, 0.017695793882012367, 0.0050441552884876728, 0.0060238922014832497, 0.0077342144213616848, 0.020211001858115196, 0.011735628359019756, 0.0064977360889315605, 0.0074984836392104626, 0.00529447291046381, 0.0069504962302744389, 0.0077376575209200382, 0.007996642030775547, 0.016624605283141136, 0.010187473148107529, 0.014590450562536716, 0.012509535066783428, 0.0075966203585267067, 0.01387613732367754, 0.011431111022830009, 0.039223302155733109, 0.0056823357008397579, 0.0077576101757586002, 0.010708930902183056, 0.0068923654034733772, 0.0075464234687387943, 0.01314212754368782, 0.0078033776953816414, 0.0077269831672310829, 0.011204198934137821, 0.019961396232247353, 0.014419081620872021, 0.017403837293386459, 0.011326412670314312, 0.0098804030567407608, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 10162, -332, 1590, 1229, 2594, 747, 6390, -367, 10882, 8522, -776, -256, 1293, 1107, 190, 2456, 2704, 2729, -1720, -1230, 2429, 2160, 2424, 20, 3526, 2395, 4700, -564, 4984, -345, 5848, 7712, 3895, 686, 1062, 1587, 3006, 1348, 1289, 1818, -154, 3238, 1742, 4130, 4205, 2136, 162, 2015, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00010035088780568913, 0.00034403571044094861, 0.00028110283892601728, 0.0002666800282895565, 0.0002807804848998785, 0.00017280296015087515, 9.6742565801832825e-05, 0.00031279350514523685, 8.7941356468945742e-05, 8.8998836872633547e-05, 0.00018018236733041704, 0.00018557158182375133, 0.00038609592593275011, 0.0002767034457065165, 0.00011867516877828166, 0.00026542082196101546, 0.00019410857930779457, 0.00025978006306104362, 0.00023176541435532272, 0.00011743944196496159, 0.00028378338902257383, 0.00014945594011805952, 0.00026634044479578733, 0.00047157189692370594, 0.00018392904894426465, 0.00029782153433188796, 0.0001937724300660193, 0.00045634456910192966, 0.00018537091091275215, 0.0001536740455776453, 0.00013293545634951442, 8.5317296907305717e-05, 0.00022737612016499043, 0.00013034744188189507, 0.00030741858063265681, 0.00040833823732100427, 0.00021123119222465903, 0.00028786362963728607, 0.00038159496034495533, 0.00012861963477917016, 0.00034664865233935416, 0.00021331275638658553, 0.00041448805131949484, 0.0001692812074907124, 0.0002161382872145623, 0.0001300042204093188, 0.00027699765632860363, 0.00032205102615989745, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 63,-82,37,4,52,-127,2,-78, 
  /* [1][0][][] */ -49,-51,-73,67,-127,56,-27,21, 
  /* [2][0][][] */ 68,-57,60,-25,127,-20,-8,75, 
  /* [3][0][][] */ -14,127,-10,111,6,7,-54,-49, 
  /* [4][0][][] */ -36,127,74,-40,39,13,-70,15, 
  /* [5][0][][] */ -84,23,-3,16,127,-29,88,-11, 
  /* [6][0][][] */ 109,-72,118,18,25,127,83,-20, 
  /* [7][0][][] */ -31,-48,58,54,77,15,-53,127, 
  /* [8][0][][] */ 20,-27,-40,-92,-13,127,-68,23, 
  /* [9][0][][] */ -127,23,-94,2,108,-39,-56,14, 
  /* [10][0][][] */ -15,-94,56,25,-24,-90,-127,-95, 
  /* [11][0][][] */ 43,84,-16,-5,-22,-76,28,127, 
  /* [12][0][][] */ 38,-42,-83,49,-92,127,41,74, 
  /* [13][0][][] */ -40,-36,-127,24,-89,88,14,45, 
  /* [14][0][][] */ -63,127,-77,82,85,42,-18,75, 
  /* [15][0][][] */ -87,-10,-13,0,81,69,-64,-127, 
  /* [16][0][][] */ 90,-127,-111,-29,-49,89,-47,-5, 
  /* [17][0][][] */ 24,127,-116,-55,-77,39,69,-124, 
  /* [18][0][][] */ -79,-114,46,25,127,-66,-38,76, 
  /* [19][0][][] */ -62,104,-39,54,17,-121,-127,63, 
  /* [20][0][][] */ 75,-12,31,-58,3,-57,25,127, 
  /* [21][0][][] */ 66,-47,127,101,-41,109,85,-23, 
  /* [22][0][][] */ -22,94,15,5,127,-55,-114,-59, 
  /* [23][0][][] */ 30,-43,26,127,-1,-57,63,-34, 
  /* [24][0][][] */ -26,53,127,-72,-23,-21,10,-27, 
  /* [25][0][][] */ -49,-127,102,66,33,2,-30,126, 
  /* [26][0][][] */ 58,-28,-127,-95,-95,57,25,107, 
  /* [27][0][][] */ 37,127,-106,-54,-45,20,32,-122, 
  /* [28][0][][] */ -25,52,-54,-92,-14,-46,-127,-42, 
  /* [29][0][][] */ -101,52,-127,-53,116,48,-40,-9, 
  /* [30][0][][] */ 91,-58,19,-30,-120,120,127,64, 
  /* [31][0][][] */ -73,95,-46,89,127,-93,-18,5, 
  /* [32][0][][] */ 4,87,52,-59,127,-46,-14,-82, 
  /* [33][0][][] */ -127,51,-122,13,47,26,-31,3, 
  /* [34][0][][] */ 55,-11,64,-86,-40,-127,60,99, 
  /* [35][0][][] */ -127,29,47,-26,-76,10,4,4, 
  /* [36][0][][] */ -2,-49,-46,43,-15,10,127,38, 
  /* [37][0][][] */ -24,-28,-76,-45,-24,-127,-67,-9, 
  /* [38][0][][] */ -98,26,27,18,-127,17,32,8, 
  /* [39][0][][] */ -31,-59,28,-25,-30,96,-127,-111, 
  /* [40][0][][] */ 74,-127,26,63,-60,-50,110,55, 
  /* [41][0][][] */ 26,127,88,42,37,36,-94,-33, 
  /* [42][0][][] */ 35,127,-35,-12,-29,21,-15,-50, 
  /* [43][0][][] */ -74,63,-83,-127,20,21,-59,67, 
  /* [44][0][][] */ -47,23,-24,15,37,127,-6,-7, 
  /* [45][0][][] */ -8,88,-102,-34,-82,-100,-17,127, 
  /* [46][0][][] */ 32,109,-99,-33,-65,29,6,-127, 
  /* [47][0][][] */ 20,11,-4,-58,-69,-127,-30,39, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.001312564592808485, 0.0044999010860919952, 0.0036767548881471157, 0.0034881080500781536, 0.0036725385580211878, 0.0022602195385843515, 0.0012653686571866274, 0.0040912609547376633, 0.0011502510169520974, 0.0011640825541689992, 0.0023567404132336378, 0.0024272298905998468, 0.0050500384531915188, 0.0036192119587212801, 0.0015522416215389967, 0.0034716380760073662, 0.0025388917420059443, 0.0033978582359850407, 0.0030314337927848101, 0.0015360786346718669, 0.0037118159234523773, 0.0019548463169485331, 0.0034836665727198124, 0.0061680427752435207, 0.002405746141448617, 0.0038954315241426229, 0.0025344949681311846, 0.0059688729234039783, 0.0024246051907539368, 0.0020100180990993977, 0.0017387625994160771, 0.0011159289861097932, 0.0029740228783339262, 0.001704912050627172, 0.0040209582075476646, 0.0053409622050821781, 0.0027628513053059578, 0.0037651844322681427, 0.0049911667592823505, 0.0016823126934468746, 0.0045340778306126595, 0.0027900775894522667, 0.0054214000701904297, 0.0022141558583825827, 0.0028270347975194454, 0.0017004227265715599, 0.0036230601835995913, 0.0042123468592762947, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 5593, -2009, -2216, 3876, 1365, -17884, -2631, -11942, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00019911280833184719, 0.00013038620818406343, 0.00024356000358238816, 0.00014756929886061698, 0.00023270114616025239, 8.4318373410496861e-05, 0.00011972131324000657, 0.00012969809176865965, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -23,19,3,29,-18,11,0,29,-48,-5,-34,-3,-13,14,35,5,-46,-19,29,-18,-26,127,-20,-17,-22,-39,6,31,-32,36,9,-26,-9,19,32,36,20,3,31,-22,4,-33,-17,-11,-18,24,22,12, 
  /* [1][0][][] */ 9,54,5,47,28,37,45,115,-47,-46,77,-29,-41,-33,27,-22,-21,-1,36,4,30,-127,-7,-70,7,15,-17,14,-8,8,-33,-55,-39,4,23,-9,18,65,70,-17,22,19,39,-28,-33,43,8,49, 
  /* [2][0][][] */ -3,25,-1,30,28,17,-31,33,24,11,64,17,5,-14,31,-55,20,27,-7,8,-17,127,7,-14,19,-45,-3,1,-22,32,-22,-60,-15,8,16,-42,28,-13,-41,-27,26,-13,-7,-50,-36,32,11,20, 
  /* [3][0][][] */ -39,47,-8,5,-16,33,60,-2,5,5,5,13,-18,33,41,15,-13,0,9,-1,40,-81,-9,18,-19,1,-127,29,-32,-31,-13,5,-41,-16,9,26,30,-14,-41,-30,4,-14,13,16,17,-12,40,20, 
  /* [4][0][][] */ 21,3,-42,8,16,-5,22,-8,-57,13,0,27,9,-10,-16,19,-30,37,-20,-5,4,-127,-6,-1,35,28,36,-42,43,-5,4,12,-9,53,33,-6,-19,19,-6,8,-14,-66,-87,24,37,38,2,-13, 
  /* [5][0][][] */ -8,50,81,5,-3,29,22,-95,64,-30,-15,0,96,-65,0,23,17,-36,34,4,-24,127,21,10,86,8,84,45,90,60,2,-25,-69,-38,100,42,-46,-44,2,-99,9,-23,59,67,-43,-38,-21,-31, 
  /* [6][0][][] */ 64,-6,-25,17,45,-23,44,-47,44,38,-2,-32,-16,46,22,-77,21,-127,-26,-21,29,-18,-8,25,-44,-35,47,-18,61,-36,124,49,48,46,31,-52,-66,20,63,-34,-31,23,-77,66,35,6,41,-50, 
  /* [7][0][][] */ -13,53,57,59,-3,16,68,107,59,33,6,77,-60,-8,37,-12,96,-14,-37,-12,-1,-127,4,-100,-78,78,60,20,7,33,24,-21,21,-24,21,29,-21,108,-101,-33,8,-7,29,-11,-53,7,46,13, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0084622940048575401, 0.0055414135567843914, 0.010351300239562988, 0.006271695252507925, 0.0098897982388734818, 0.0035835308954119682, 0.0050881556235253811, 0.0055121690966188908, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 23608, 22441, 10533, 19095, 5470, 9904, 19739, 8120, 42734, -1544, -1216, 21050, 14841, -3757, 9671, 753, 1245, 29346, 19213, -91, 4311, -8778, 304, 872, 48813, 35409, 1620, 418, -1205, 13702, -1774, 951, -15619, 18484, 30354, 28092, 23318, 22206, -177, -449, 5709, 36679, -1030, -1128, -206, -2315, 19664, 12032, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 4.7780180466361344e-05, 7.7763237641192973e-05, 0.00010046875104308128, 7.118141365936026e-05, 0.00012577429879456758, 9.4935923698358238e-05, 0.00015002288273535669, 0.00012748345034196973, 4.6141271013766527e-05, 8.586962940171361e-05, 7.6988566434010863e-05, 5.1633269322337583e-05, 0.00018127421208191663, 5.8866742620011792e-05, 9.0096764324698597e-05, 8.26043396955356e-05, 4.3801417632494122e-05, 7.7075586887076497e-05, 5.4404732509283349e-05, 0.00011300786718493327, 7.2433780587743968e-05, 0.00026574541698209941, 0.00017556684906594455, 0.00010411018593003973, 3.4598018828546628e-05, 7.2231698140967637e-05, 7.4734110967256129e-05, 8.6391570221167058e-05, 5.8783516578841954e-05, 0.00010781679156934842, 0.00022192654432728887, 0.00023867499839980155, 6.9475223426707089e-05, 5.7045534049393609e-05, 8.0795194662641734e-05, 0.00011308991088299081, 9.6724761533550918e-05, 0.00014525625738315284, 0.00014851316518615931, 8.5973850218579173e-05, 0.00019818752480205148, 4.2944458982674405e-05, 8.8213688286487013e-05, 5.3960189688950777e-05, 0.00050091772573068738, 0.00012205202074255794, 7.4631818279158324e-05, 8.8042012066580355e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -53,-78,-51,-72,-40,33,-51,-56,-62,54,50,-86,-28,18,-88,60,83,-64,-55,115,39,57,-41,87,-83,-67,55,77,51,-62,87,68,59,-59,-70,-32,-127,-68,113,65,-23,-16,38,89,75,107,-38,-61, -80,-127,-82,-102,-116,26,-81,-97,-57,94,79,-114,-65,63,-127,105,83,-107,-111,-7,87,71,73,106,-84,-94,108,114,96,-90,95,71,79,-88,-98,-58,-109,-79,120,91,-74,-68,54,106,68,115,-83,-100, -36,-47,-30,-54,-83,33,-69,-46,-39,50,53,-55,-31,77,-59,31,42,-47,-29,-54,52,-127,-53,37,-35,-47,40,36,50,-23,67,41,36,-50,-44,-35,-76,-47,19,26,-27,-30,42,58,9,66,-35,-43, 
  /* [0][1][][] */ -72,-88,-80,-90,-79,-6,-76,-77,-96,94,74,-91,-65,46,-114,69,103,-75,-72,127,64,84,-53,98,-123,-83,67,125,77,-91,102,75,72,-100,-98,-63,-106,-80,100,96,-75,-55,72,91,108,127,-66,-90, -127,-120,-127,-127,-127,-127,-127,-127,-127,127,127,-127,-127,127,-92,127,127,-127,-127,-60,127,84,127,127,-127,-127,127,127,127,-127,127,127,127,-127,-127,-127,-95,-127,127,127,-127,-127,127,127,127,103,-127,-127, -60,-42,-79,-78,-89,-120,-109,-71,-57,71,69,-82,-58,117,-61,41,80,-58,-52,-124,79,-125,-78,54,-45,-79,41,50,68,-54,82,61,65,-89,-70,-77,-65,-79,41,55,-52,-54,75,77,21,28,-45,-52, 
  /* [0][2][][] */ -33,-25,-38,-33,-47,-18,-49,-37,-53,59,27,-25,-21,-2,-92,33,33,-27,-24,29,34,32,-14,32,-64,-35,15,46,35,-19,46,30,58,-60,-61,-48,-21,-38,-2,55,-53,-46,41,36,37,19,-38,-34, -66,-15,-76,-55,-81,-123,-70,-53,-58,90,45,-62,-41,54,-80,43,42,-32,-42,-69,63,13,30,25,-68,-67,37,57,57,-57,51,55,80,-91,-89,-79,-27,-46,9,59,-64,-71,70,77,32,1,-73,-53, -29,26,-63,-44,-39,-112,-79,-43,-23,57,28,-56,-12,56,3,11,48,-15,-28,-74,44,-54,-27,24,-7,-45,4,22,35,-42,32,38,32,-67,-65,-61,3,-39,23,39,-63,-36,40,33,34,3,-18,-42, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0020306576043367386, 0.0033049376215785742, 0.0042699216865003109, 0.0030252099968492985, 0.0053454074077308178, 0.0040347767062485218, 0.006375972181558609, 0.0054180463775992393, 0.0019610039889812469, 0.003649459220468998, 0.0032720139715820551, 0.0021944139152765274, 0.007704154122620821, 0.0025018365122377872, 0.003829112509265542, 0.0035106844734400511, 0.0018615602748468518, 0.0032757124863564968, 0.0023122010752558708, 0.0048028342425823212, 0.0030784355476498604, 0.01129417959600687, 0.0074615911580622196, 0.0044246828183531761, 0.0014704157365486026, 0.0030698471236974001, 0.0031761997379362583, 0.0036716416943818331, 0.0024982993490993977, 0.0045822137035429478, 0.0094318781048059464, 0.010143687017261982, 0.0029526969883590937, 0.0024244352243840694, 0.0034337956458330154, 0.0048063211143016815, 0.0041108024306595325, 0.0061733908951282501, 0.0063118091784417629, 0.0036538885906338692, 0.0084229698404669762, 0.0018251395085826516, 0.0037490816321223974, 0.0022933080326765776, 0.021289004012942314, 0.0051872106269001961, 0.0031718523241579533, 0.0037417854182422161, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 679, 2324, 1572, -191, -713, 165, 6616, 2699, 1443, -2650, 1314, -14, 4835, 60, 838, -1870, -49, 3991, 762, 1145, -773, 23045, 1425, -1152, 1003, 3804, 1914, -1274, 145, 121, -2069, -1382, 2879, 694, 5337, 12116, 3427, 5010, -2718, -1477, -652, 1511, 1053, 443, -1776, -1791, 2676, 986, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00031874020351096988, 0.00028500234475359321, 0.00029735761927440763, 0.00041703204624354839, 0.00031300287810154259, 0.00029681590967811644, 0.00013098363706376404, 0.00021842989372089505, 0.00032380872289650142, 0.00020568499166984111, 0.00030731467995792627, 0.00035279948497191072, 0.00014438939979299903, 0.0005440421518869698, 0.00047357118455693126, 0.00020933059568051249, 0.00058400834677740932, 0.00017160308198072016, 0.00030762996175326407, 0.00029007255216129124, 0.00030623757629655302, 6.9271016400307417e-05, 0.00028998003108426929, 0.00023255079577211291, 0.00029137212550267577, 0.00021394474606495351, 0.00029855835600756109, 0.00033850656473077834, 0.00041245631291531026, 0.00047591415932402015, 0.0002315855526831001, 0.00024186591326724738, 0.00025375047698616982, 0.00044858932960778475, 0.00017017999198287725, 8.4275561675895005e-05, 0.00024946729536168277, 0.00016901016351766884, 0.00021692084555979818, 0.00022652058396488428, 0.00041960569797083735, 0.00033794969203881919, 0.00029956910293549299, 0.00038162380224093795, 0.00025310099590569735, 0.00025325699243694544, 0.00022836400603409857, 0.00021376648510340601, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -23,57,-55,51,29,127,38,31, 
  /* [1][0][][] */ 46,-127,-95,-33,-35,51,60,-37, 
  /* [2][0][][] */ -55,53,-47,-110,-42,-127,-41,-75, 
  /* [3][0][][] */ -14,127,59,28,0,-83,-25,27, 
  /* [4][0][][] */ -105,42,-127,76,6,-25,-41,-64, 
  /* [5][0][][] */ 80,-91,-127,32,17,-21,73,-44, 
  /* [6][0][][] */ -11,-98,-57,26,-127,-61,-48,81, 
  /* [7][0][][] */ -23,-44,-13,-43,48,0,-29,127, 
  /* [8][0][][] */ 11,31,-95,-92,42,-29,-127,-85, 
  /* [9][0][][] */ -127,61,-8,103,-9,68,94,1, 
  /* [10][0][][] */ -24,-12,88,-127,-31,66,14,33, 
  /* [11][0][][] */ 113,-17,108,40,-40,48,85,127, 
  /* [12][0][][] */ 51,43,35,-44,70,115,89,-127, 
  /* [13][0][][] */ 34,54,-33,57,-11,-127,-39,55, 
  /* [14][0][][] */ 9,-127,-30,-29,8,63,29,-32, 
  /* [15][0][][] */ -108,-11,0,-78,58,127,-80,-25, 
  /* [16][0][][] */ 15,-44,122,12,-29,29,127,82, 
  /* [17][0][][] */ 63,18,56,24,-8,-85,-41,-127, 
  /* [18][0][][] */ -127,16,-81,-13,-15,-119,22,-90, 
  /* [19][0][][] */ 65,15,117,-32,-65,30,96,127, 
  /* [20][0][][] */ 18,127,47,-5,24,43,44,7, 
  /* [21][0][][] */ -33,34,30,-108,-58,127,-10,-12, 
  /* [22][0][][] */ 35,0,88,-10,-53,14,127,89, 
  /* [23][0][][] */ -68,125,57,43,-109,-101,-125,127, 
  /* [24][0][][] */ -16,-9,104,21,-118,127,-6,-92, 
  /* [25][0][][] */ -40,17,74,21,-127,46,-75,21, 
  /* [26][0][][] */ -49,-127,33,-42,17,41,-12,-15, 
  /* [27][0][][] */ -23,61,27,53,-23,127,-26,-10, 
  /* [28][0][][] */ 10,-127,59,18,62,125,34,44, 
  /* [29][0][][] */ 16,127,-26,31,-66,-57,-14,15, 
  /* [30][0][][] */ -51,74,104,89,-127,-61,-47,-109, 
  /* [31][0][][] */ 13,71,25,56,-50,-12,18,-127, 
  /* [32][0][][] */ -23,-34,-59,66,-127,-40,-55,5, 
  /* [33][0][][] */ 84,22,73,53,-26,58,56,127, 
  /* [34][0][][] */ 123,11,-127,-38,-50,-12,76,35, 
  /* [35][0][][] */ 127,104,112,-119,-51,-99,33,104, 
  /* [36][0][][] */ -48,-106,127,33,59,56,7,-38, 
  /* [37][0][][] */ -3,11,-21,-1,-13,-55,-46,127, 
  /* [38][0][][] */ 127,2,47,9,-1,18,-60,31, 
  /* [39][0][][] */ 60,93,-115,-127,-107,87,46,-64, 
  /* [40][0][][] */ -50,127,-36,66,-52,-31,-58,-19, 
  /* [41][0][][] */ -127,37,-26,-52,61,45,0,-61, 
  /* [42][0][][] */ 46,-33,-5,-23,-27,127,15,86, 
  /* [43][0][][] */ -76,44,127,17,77,22,-37,6, 
  /* [44][0][][] */ 8,127,-3,32,-46,-63,-15,-5, 
  /* [45][0][][] */ -76,83,67,-127,-78,15,-67,-55, 
  /* [46][0][][] */ 38,-41,-20,22,29,6,-127,68, 
  /* [47][0][][] */ -100,-127,29,68,53,-86,19,88, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0031158425845205784, 0.0027860384434461594, 0.0029068172443658113, 0.0040766936726868153, 0.003059757174924016, 0.0029015217442065477, 0.0012804295402020216, 0.002135259797796607, 0.0031653898768126965, 0.0020106721203774214, 0.0030041523277759552, 0.0034487887751311064, 0.0014114775694906712, 0.0053182798437774181, 0.0046293917112052441, 0.00204630964435637, 0.0057089691981673241, 0.0016775046242401004, 0.0030072345398366451, 0.0028356020338833332, 0.0029936232604086399, 0.00067715829936787486, 0.0028346977196633816, 0.002273298567160964, 0.0028483059722930193, 0.0020914152264595032, 0.0029185549356043339, 0.0033090685028582811, 0.0040319636464118958, 0.0046522952616214752, 0.0022638628724962473, 0.0023643583990633488, 0.0024805357679724693, 0.0043851817026734352, 0.0016635932261124253, 0.00082383514381945133, 0.002438665833324194, 0.0016521576326340437, 0.0021205081138759851, 0.0022143502719700336, 0.0041018524207174778, 0.00330362468957901, 0.0029284355696290731, 0.0037305606529116631, 0.0024741869419813156, 0.0024757119826972485, 0.0022323706652969122, 0.0020896727219223976, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 7274, -12112, -18, 5485, 1683, -5091, 3113, 8027, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00022080868075136095, 0.00016749795759096742, 9.7196658316534013e-05, 0.00016079371562227607, 0.00026057747891172767, 0.00012646455434150994, 0.0001950015575857833, 9.5793577202130109e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -27,-8,-9,-33,-68,-16,-4,-22,63,6,10,-4,10,15,-21,2,-33,12,-18,-14,-3,10,-23,2,20,-9,82,10,-16,-86,-14,10,-2,33,127,-10,-27,-41,25,-38,23,3,-4,-20,-18,-1,-19,-87, 
  /* [1][0][][] */ 16,-33,-13,58,0,-8,20,36,65,75,41,-49,-51,72,5,1,-6,-31,17,-21,-63,42,-46,29,87,12,-29,36,23,1,127,22,-14,-38,-34,-3,-17,8,-24,-14,0,-20,3,26,-4,35,31,20, 
  /* [2][0][][] */ -66,0,-76,119,-68,-68,26,-65,-77,41,56,-101,-24,-7,-47,7,123,32,-74,-44,-68,-24,-43,19,80,-32,123,-7,83,-19,-68,21,0,-24,53,-3,-50,31,-3,-105,59,-69,-56,-127,-16,-67,-67,107, 
  /* [3][0][][] */ 25,-49,13,-41,36,-20,-9,-70,47,-63,2,-28,-83,-75,-19,10,11,-11,40,-39,-9,34,-81,3,73,-36,51,13,7,0,-1,-23,-38,35,22,-29,-52,25,1,-4,127,16,-48,39,-51,51,-9,-52, 
  /* [4][0][][] */ 24,7,16,16,10,33,-11,-8,46,24,6,-45,-2,4,-66,21,-2,19,25,-22,-23,26,6,41,37,6,-28,5,49,-11,-19,28,-6,-2,32,21,-127,1,54,13,15,-7,2,16,-36,52,-29,-96, 
  /* [5][0][][] */ -39,-97,31,114,-30,-6,-52,99,-96,81,51,30,-78,23,65,-41,-13,29,26,0,-4,29,41,50,-50,11,-27,41,-45,-99,40,23,-105,-48,-31,3,127,-1,-22,15,-36,-16,86,98,22,43,45,45, 
  /* [6][0][][] */ 83,-2,-14,-12,81,-25,-27,-61,39,26,32,-27,-8,6,8,3,-3,-1,-9,-25,-33,16,13,24,54,-54,47,-2,-24,104,-19,8,43,26,-127,-16,-89,-34,26,-63,-13,-7,-7,-94,-3,4,-21,-11, 
  /* [7][0][][] */ -37,-79,55,-51,12,127,51,-57,-1,-98,-51,-4,2,-24,-61,-5,15,-58,109,70,45,-39,5,-5,-21,8,106,-2,48,21,13,-5,-34,-32,-53,108,-124,95,-40,-38,-54,50,4,-70,23,-20,72,-33, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0093843685463070869, 0.0071186632849276066, 0.0041308579966425896, 0.0068337325938045979, 0.011074542067945004, 0.0053747436031699181, 0.0082875657826662064, 0.0040712268091738224, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 10040, 4430, -1132, 6750, -382, -1684, 5354, -1074, 1579, 4781, -111, -77, -1672, 12371, 4174, -1297, -6378, -427, -2439, -1099, 10238, 319, -16632, -911, -5363, 2726, 332, 332, -1424, -1230, -7184, 105, 15818, -1624, 1612, 1567, -1469, 273, -983, 2152, 17145, -542, 2191, -349, 372, -306, -4045, 7244, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00024106606724672019, 0.00028539259801618755, 0.0001808000379242003, 0.00035388930700719357, 0.00042116871918551624, 0.00045339102507568896, 0.00012004650488961488, 0.00023870702716521919, 7.9055724199861288e-05, 0.00023691199021413922, 0.00031625956762582064, 0.00049008743371814489, 0.00024048124032560736, 0.00014662621833849698, 0.00021631194977089763, 0.00034457861329428852, 6.0685040807584301e-05, 0.0016299223061650991, 0.0003825500316452235, 0.00016964851238299161, 0.00011557358084246516, 0.00050665950402617455, 0.00011440488015068695, 0.00017613469390198588, 0.00028280209517106414, 0.00021888998162467033, 0.00028282517450861633, 0.00023350486299023032, 0.00051324744708836079, 0.00025058351457118988, 0.00016455740842502564, 0.00054485700093209743, 6.7356260842643678e-05, 0.00035692902747541666, 0.00020147726172581315, 0.00072822236688807607, 0.00014766267850063741, 0.0001904300443129614, 0.00079230644041672349, 0.00038371066330000758, 5.3817591833649203e-05, 0.00034726248122751713, 0.00016555636830162257, 0.0001477089972468093, 0.00028794570243917406, 0.00027215114096179605, 0.00013329686771612614, 0.00037967879325151443, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -74,43,-42,-52,-6,-14,18,-11,-6,-18,5,43,-5,-98,-98,27,127,1,60,45,-77,-65,102,-104,-7,-53,-7,95,-13,13,42,127,-25,-7,-19,4,-10,-42,-5,17,122,-82,-48,52,78,-101,-36,-7, -10,-127,36,-127,-1,-19,-77,127,62,-74,21,42,16,-127,-105,18,-39,13,-23,-78,-61,0,79,127,12,-16,11,127,24,-6,14,-101,-103,28,-11,-20,127,-124,55,-10,3,-112,-55,32,98,72,30,-36, -25,-6,17,-24,-2,36,16,66,-3,15,1,29,22,36,-83,31,77,13,-25,20,-127,50,71,26,-4,64,3,-51,-21,-2,16,-36,-50,6,-3,4,-27,127,-14,11,85,-54,18,-28,63,39,-48,-13, 
  /* [0][1][][] */ -35,-23,-127,-13,-28,25,4,5,33,-66,-7,-107,-31,-56,-127,127,104,6,127,92,-3,127,122,111,5,-62,-38,-2,46,-36,45,-104,8,-23,-59,5,2,-100,47,19,95,127,-20,-9,-69,127,66,-36, -127,45,125,122,127,-116,-127,-9,-22,-127,-127,-127,127,-26,-10,44,17,-127,-92,-127,111,-12,-72,-91,127,-47,127,-62,127,127,-36,74,-127,-127,127,-127,85,-82,-127,-127,27,112,-97,13,-127,-67,127,127, -15,1,6,24,42,127,-16,53,66,10,52,-52,-16,-17,-74,-13,80,49,-5,57,-64,-117,127,-18,9,127,17,-1,40,30,127,26,16,14,57,6,-27,90,50,-10,1,74,127,-11,-50,-54,60,-9, 
  /* [0][2][][] */ -31,2,-59,-8,-3,-14,19,-10,43,22,4,46,-6,-17,74,6,19,1,60,17,-41,-9,74,35,-1,-59,-12,-75,-3,-13,0,-34,-11,58,-11,-6,-61,6,-5,4,32,-12,-39,-61,-18,15,-65,-39, -13,-47,49,-2,-79,-20,-76,-91,127,72,46,54,-10,-51,18,12,81,99,-29,-12,-73,-1,29,-23,5,-58,-66,-87,-20,-34,94,28,-56,53,-71,-17,28,-110,34,40,-127,-14,-115,127,23,0,49,-51, 20,-14,15,-4,-40,27,21,-92,11,-9,-19,24,5,20,104,-120,53,-25,-21,-9,-58,10,27,4,1,25,-28,4,-8,-26,23,14,-17,52,-47,-5,-111,96,-22,23,5,-23,40,54,-17,-18,-76,-24, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.010245307348668575, 0.012129184789955616, 0.0076840012334287167, 0.015040295198559761, 0.017899669706821442, 0.019269118085503578, 0.0051019764505326748, 0.01014504861086607, 0.0033598681911826134, 0.010068759322166443, 0.013441030867397785, 0.020828716456890106, 0.010220452211797237, 0.006231614388525486, 0.0091932574287056923, 0.014644591137766838, 0.0025791141670197248, 0.069271698594093323, 0.016258375719189644, 0.0072100618854165077, 0.0049118772149085999, 0.021533029153943062, 0.0048622074536979198, 0.0074857240542769432, 0.012019088491797447, 0.0093028238043189049, 0.012020070105791092, 0.0099239563569426537, 0.021813016384840012, 0.01064979936927557, 0.0069936895743012428, 0.02315642312169075, 0.0028626408893615007, 0.015169483609497547, 0.0085627837106585503, 0.03094944916665554, 0.0062756636179983616, 0.0080932769924402237, 0.03367302194237709, 0.016307702288031578, 0.002287247683852911, 0.014758654870092869, 0.0070361457765102386, 0.0062776324339210987, 0.012237692251801491, 0.011566423811018467, 0.0056651164777576923, 0.016136348247528076, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3766, 1069, 3351, 9209, 287, 4998, 1518, 1515, 1959, 4470, 2761, 4723, 2452, 1450, 3032, -63, 226, -2374, 7097, 2273, 1388, 5601, 8077, 419, 2797, 3330, 1695, -57, -1401, 1180, 6214, 2206, 1187, 929, 725, -433, 880, 1782, 2, 1520, 1217, 5068, 1894, 495, 3030, 1121, -128, 9870, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00024795555509626865, 0.00052206875989213586, 0.0002214466076111421, 0.00012237411283422261, 0.0013528917916119099, 0.00014703095075674355, 0.00042769333231262863, 0.00038046753616072237, 0.00028432585531845689, 0.00017088503227569163, 0.00025201952666975558, 0.00012883754970971495, 0.00030937316478230059, 0.00025104652740992606, 0.00018931190425064415, 0.00030794166377745569, 0.00038596877129748464, 0.00031956273596733809, 0.00014246355567593127, 0.00043695475324057043, 0.00051414081826806068, 0.00014743466454092413, 0.0001080897418432869, 0.00036976963747292757, 0.00021321215899661183, 0.00028638896765187383, 0.00039953854866325855, 0.00026225249166600406, 0.00030524615431204438, 0.00077919592149555683, 0.00015437310503330082, 0.00035218780976720154, 0.00051779282512143254, 0.00030201196204870939, 0.00085981388110667467, 0.00028349272906780243, 0.00021584454225376248, 0.00021776575886178762, 0.00024376648070756346, 0.00044080783845856786, 0.00034078920725733042, 0.00016457308083772659, 0.00020887216669507325, 0.00037478629383258522, 0.00018781585094984621, 0.00044717438868246973, 0.00042580542503856122, 0.00010229376493953168, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -127,-17,28,-115,-121,120,2,-63, 
  /* [1][0][][] */ 87,4,22,-26,1,56,-127,41, 
  /* [2][0][][] */ -41,47,-111,85,-59,127,25,51, 
  /* [3][0][][] */ 91,-28,-31,69,3,-67,11,127, 
  /* [4][0][][] */ -82,-4,-3,14,-20,-36,127,5, 
  /* [5][0][][] */ 50,119,28,53,-127,-53,9,-27, 
  /* [6][0][][] */ -4,-62,32,127,14,-95,-15,34, 
  /* [7][0][][] */ 127,-3,96,-5,-79,27,74,118, 
  /* [8][0][][] */ -34,-127,49,48,78,-35,-28,3, 
  /* [9][0][][] */ -84,-105,19,-26,-19,1,-52,127, 
  /* [10][0][][] */ -35,-127,22,114,65,123,9,-20, 
  /* [11][0][][] */ -127,-115,25,-59,57,60,-37,123, 
  /* [12][0][][] */ 72,-18,81,-77,28,-127,74,3, 
  /* [13][0][][] */ 30,19,25,127,-8,14,31,-57, 
  /* [14][0][][] */ -47,-4,42,7,127,-21,-4,120, 
  /* [15][0][][] */ -67,127,47,83,48,110,-34,81, 
  /* [16][0][][] */ -1,-33,-60,-127,-57,58,16,56, 
  /* [17][0][][] */ 17,127,3,59,-26,-50,-6,13, 
  /* [18][0][][] */ 19,36,-9,-127,-45,-89,25,-18, 
  /* [19][0][][] */ 23,-85,-127,-107,-76,123,24,-9, 
  /* [20][0][][] */ 30,6,17,-6,127,24,37,-37, 
  /* [21][0][][] */ -127,-74,-61,-95,49,34,47,-12, 
  /* [22][0][][] */ -68,-44,76,127,48,-45,-54,123, 
  /* [23][0][][] */ 22,34,-35,127,122,24,30,105, 
  /* [24][0][][] */ 127,-2,-113,-21,-4,-20,44,-41, 
  /* [25][0][][] */ 2,-13,-45,-22,73,-27,-127,-56, 
  /* [26][0][][] */ 127,11,109,-37,-89,41,56,115, 
  /* [27][0][][] */ 28,-64,-45,127,32,3,-16,-119, 
  /* [28][0][][] */ -61,127,81,66,61,-21,-28,7, 
  /* [29][0][][] */ -2,0,56,5,-74,3,127,70, 
  /* [30][0][][] */ -53,-78,52,-72,-83,127,67,41, 
  /* [31][0][][] */ 112,19,93,-24,-98,76,83,127, 
  /* [32][0][][] */ -109,-16,-29,35,-21,23,127,23, 
  /* [33][0][][] */ -127,127,56,83,29,22,-88,6, 
  /* [34][0][][] */ 118,5,21,-15,5,49,-127,17, 
  /* [35][0][][] */ 4,-3,20,31,-45,30,13,-127, 
  /* [36][0][][] */ 27,-2,-70,-123,44,-27,33,127, 
  /* [37][0][][] */ 53,-47,-42,-56,-25,38,59,-127, 
  /* [38][0][][] */ 21,127,19,117,-71,-83,-15,-23, 
  /* [39][0][][] */ 108,-4,110,-8,-92,39,127,114, 
  /* [40][0][][] */ -65,-73,127,103,-14,-24,-85,28, 
  /* [41][0][][] */ 34,-12,16,15,22,-74,-19,127, 
  /* [42][0][][] */ 50,-92,-83,-88,-58,73,38,-127, 
  /* [43][0][][] */ 101,-3,125,-30,-88,-19,120,127, 
  /* [44][0][][] */ -111,-95,-77,127,92,-16,-82,31, 
  /* [45][0][][] */ 127,-12,83,-20,-39,32,-9,84, 
  /* [46][0][][] */ 57,-126,-4,93,127,8,67,6, 
  /* [47][0][][] */ 63,127,-16,109,-29,-76,25,-71, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0027575555723160505, 0.0058060148730874062, 0.0024627451784908772, 0.0013609431916847825, 0.015045737847685814, 0.0016351559897884727, 0.0047564497217535973, 0.0042312438599765301, 0.0031620357185602188, 0.0019004413625225425, 0.0028027517255395651, 0.0014328240649774671, 0.0034405912738293409, 0.0027919306885451078, 0.0021053696982562542, 0.0034246712457388639, 0.0042924238368868828, 0.0035539111122488976, 0.0015843611909076571, 0.0048594474792480469, 0.0057178465649485588, 0.001639645779505372, 0.0012020842405036092, 0.0041122706606984138, 0.0023711684625595808, 0.0031849800143390894, 0.0044433358125388622, 0.0029165542218834162, 0.0033946940675377846, 0.0086655691266059875, 0.0017168093472719193, 0.0039167399518191814, 0.0057584615424275398, 0.0033587261568754911, 0.009562135674059391, 0.0031527704559266567, 0.0024004436563700438, 0.0024218098260462284, 0.0027109682559967041, 0.0049022985622286797, 0.0037899743765592575, 0.0018302450189366937, 0.0023229026701301336, 0.0041680615395307541, 0.0020887318532913923, 0.0049731018953025341, 0.0047354539856314659, 0.0011376262409612536, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 4569, 2824, 3108, 10641, 4576, 5399, 2825, -2961, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00013167741417419165, 0.00012212737055961043, 0.00014896209177095443, 0.00014437356730923057, 0.00012767397856805474, 0.00010402216139482334, 9.9271725048311055e-05, 0.00026969637838192284, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -27,36,-32,-1,-46,-27,-80,23,9,20,36,36,36,4,-46,10,-46,44,12,-61,28,42,-127,4,-9,11,-31,45,-7,-9,23,22,15,-23,35,16,1,106,-67,-15,-11,21,-31,27,4,7,18,-3, 
  /* [1][0][][] */ -79,-97,-59,10,88,-25,-127,61,-22,-36,-13,-83,-19,76,6,-14,116,-121,-8,-23,-60,-1,0,-19,27,-6,-32,-50,24,-19,-115,-27,22,-62,-80,-97,43,14,-95,-6,5,40,15,81,-10,4,1,44, 
  /* [2][0][][] */ 4,-72,11,54,116,15,97,-6,-36,-30,-7,-50,1,-29,18,31,-35,-92,44,-58,4,-67,-61,10,-71,63,71,-100,-38,-1,-60,-45,17,2,-69,-50,-3,127,75,-38,-14,9,-26,-73,42,33,47,-25, 
  /* [3][0][][] */ 10,1,25,-15,34,31,24,-91,26,18,-9,8,0,-117,-13,4,-25,6,-20,0,-7,52,-127,6,18,-101,37,30,47,-12,-32,54,-2,11,-6,-35,-104,-47,12,-16,-5,-2,41,7,-16,5,2,-54, 
  /* [4][0][][] */ 30,-55,9,69,48,13,-30,-2,-36,-14,25,-29,72,36,-17,33,-41,-65,62,37,33,-48,127,26,-30,8,-53,-13,-12,15,-78,-39,81,-25,-44,-64,-47,-48,-23,-2,-62,94,-1,-6,57,81,42,21, 
  /* [5][0][][] */ -62,-22,-40,55,-5,8,-4,-55,-61,-34,-8,-20,19,41,-78,14,127,-14,59,-82,30,-96,-11,0,88,-114,-107,-11,56,-49,36,-80,17,-60,-34,27,-78,-18,18,-32,-44,30,97,45,41,22,24,-38, 
  /* [6][0][][] */ -34,6,-34,34,-23,75,-72,9,-21,-1,-127,7,47,36,118,19,20,8,43,-14,39,-17,-49,-16,11,0,-71,16,3,-52,5,-25,33,-45,7,7,-1,-5,-56,-22,-35,44,-23,29,28,30,33,0, 
  /* [7][0][][] */ 32,-4,39,-17,4,6,12,-12,14,5,-9,-3,-10,-7,-3,-14,11,-3,-24,-20,-20,14,127,14,6,-13,-1,8,6,-10,-21,14,0,21,0,-19,-9,14,7,28,4,-2,9,-2,-17,-1,-24,16, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0055962898768484592, 0.0051904129795730114, 0.0063308887183666229, 0.0061358767561614513, 0.0054261442273855209, 0.0044209416955709457, 0.0042190481908619404, 0.011462096124887466, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 4315, -110, 458, 265, 7627, 4567, 27, 4351, 3701, -754, -469, 1537, 304, -196, -1132, 359, 11971, 335, 477, 36326, -773, 16207, 885, 905, 65, -8480, 8815, -264, 417, -545, 1065, 7973, 465, -883, 1333, 356, 8406, -1793, 2527, 1023, 202, -494, 19543, -7034, 762, -67, 263, -105, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.1125167121645063e-05, 0.00017800294153857976, 0.0011086803860962391, 0.00069861894007772207, 0.00012639055785257369, 0.00014889272279106081, 8.3680009993258864e-05, 0.00031431778916157782, 0.00016385239723604172, 0.00040358258411288261, 5.2393726946320385e-05, 0.00076373852789402008, 0.00083104672376066446, 0.00015721620002295822, 0.00012826576130464673, 0.0076198391616344452, 0.00015365885337814689, 0.00019342231098562479, 0.00033552525565028191, 9.6658310212660581e-05, 0.00053023610962554812, 9.1705514932982624e-05, 0.00028312334325164557, 0.00010513846791582182, 0.00015020476712379605, 0.00072277989238500595, 0.00012290794984437525, 0.00032217995612882078, 0.00086008757352828979, 0.0003527365333866328, 0.00013203635171521455, 0.00010453676804900169, 0.00093671155627816916, 0.00044554000487551093, 0.0001783987827366218, 0.0002271004777867347, 0.00014176758122630417, 7.0787486038170755e-05, 9.3708345957566053e-05, 0.00021692359587177634, 0.00036804834962822497, 0.0003511727845761925, 6.2588842411059886e-05, 0.00016323674935847521, 0.00075157365063205361, 0.00051061745034530759, 0.0051971902139484882, 0.00045753779704682529, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 103,-35,-72,-101,26,-101,62,-42,64,28,92,43,-100,54,56,-119,78,-96,-3,-40,-127,-51,35,108,-3,69,-10,65,-127,-17,89,-80,-50,-58,43,79,-127,45,110,77,-40,-127,-75,44,-68,-34,5,-81, 87,-54,76,127,92,29,127,-118,-70,106,60,63,-3,52,60,116,80,-95,-107,-57,97,-109,50,-4,113,127,-38,83,9,72,81,-45,45,113,127,127,-96,39,84,-34,83,28,-51,98,127,113,-5,-10, 17,-28,-2,-43,40,48,24,-75,-13,45,-85,29,89,-11,-59,-3,33,-34,92,-24,40,3,-84,-99,25,10,-9,23,35,92,35,8,-9,-46,29,40,-21,8,21,-66,-52,112,4,78,-57,-77,-2,75, 
  /* [0][1][][] */ 117,74,-127,22,-79,-127,70,-64,91,-69,127,-96,91,91,127,122,-44,112,-9,-91,121,-76,47,127,-12,-5,-31,21,-58,105,68,-127,-127,-68,-22,33,-13,99,127,127,-48,-81,-127,44,-7,-26,-127,-127, 127,127,114,-16,-127,5,123,-127,-127,-127,95,-127,37,127,101,-127,-35,127,127,-127,-68,-127,72,-42,62,10,-127,71,13,127,127,-93,119,127,-32,10,-22,127,107,-50,127,-5,-46,127,-15,127,120,43, 23,49,-2,14,-29,69,26,-71,-3,-97,-80,-73,-127,2,-67,-1,38,33,-107,-60,-52,-13,-127,-112,-37,4,-70,18,41,101,26,6,7,-61,-8,1,0,38,17,-84,-56,98,-8,96,4,-86,2,95, 
  /* [0][2][][] */ 31,-45,-28,-9,47,-27,7,-14,67,27,32,40,7,56,-8,-17,-127,-30,-9,-22,21,-44,9,44,81,-17,-13,-92,25,61,-7,-82,-26,-39,-75,-3,73,23,33,70,-97,-56,-118,25,-2,-7,89,-64, 20,-66,6,-7,43,-2,27,-54,-80,72,5,54,-19,67,-3,10,-94,-21,-16,-56,-28,-70,28,-11,127,-14,-48,-127,21,96,0,-61,30,82,-62,15,81,49,29,-34,-57,0,-48,90,-6,-11,-100,60, -4,-27,21,1,13,15,11,-9,-5,56,-29,25,16,-14,-17,-2,26,-5,16,-43,13,-2,-42,-57,-5,-8,-18,-41,17,96,-6,13,-2,-39,-44,-2,66,22,-4,-51,-96,54,-19,53,4,3,2,13, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0025978195481002331, 0.0075651248916983604, 0.047118917107582092, 0.029691305011510849, 0.0053715985268354416, 0.0063279406167566776, 0.0035564003046602011, 0.013358506374061108, 0.0069637265987694263, 0.01715225912630558, 0.0022267333697527647, 0.032458886504173279, 0.035319484770298004, 0.0066816885955631733, 0.0054512945935130119, 0.32384315133094788, 0.006530501414090395, 0.0082204481586813927, 0.01425982266664505, 0.0041079781949520111, 0.022535033524036407, 0.0038974843919277191, 0.01203274168074131, 0.0044683846645057201, 0.0063837026245892048, 0.03071814589202404, 0.0052235876210033894, 0.013692648150026798, 0.036553721874952316, 0.014991302974522114, 0.0056115449406206608, 0.0044428124092519283, 0.039810240268707275, 0.018935449421405792, 0.0075819483026862144, 0.0096517698839306831, 0.0060251220129430294, 0.0030084680765867233, 0.00398260448127985, 0.0092192525044083595, 0.015642054378986359, 0.014924842864274979, 0.0026600256096571684, 0.0069375615566968918, 0.031941879540681839, 0.021701240912079811, 0.22088058292865753, 0.019445355981588364, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { -1128, -8393, 10129, 3720, 10639, 3287, 3331, 400, -1264, -7498, 798, 4366, 19518, -12049, 26, 10457, -7345, -691, 2006, 8343, 7983, 3192, 1442, 388, 11646, 25612, 10215, -11214, 2136, -1192, -188, -3424, 19018, 8365, 11520, -1504, -10818, 274, -3941, 493, -12247, -9820, -1480, 2483, 7770, -11413, 13698, -1728, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.0003089550300501287, 0.00026899456861428916, 8.7417050963267684e-05, 0.00027756934287026525, 0.00028910042601637542, 0.00067566760117188096, 0.00090379110770300031, 0.00059136853087693453, 0.00061903783353045583, 0.00036723288940265775, 0.0015025433385744691, 0.00027167407097294927, 7.323703175643459e-05, 0.00034353067167103291, 0.00061210879357531667, 3.5471915907692164e-05, 0.00025448252563364804, 0.00038616737583652139, 0.00037987364339642227, 0.00018662138609215617, 0.00015131561667658389, 0.0012781829573214054, 0.00037511330447159708, 0.00078304437920451164, 0.00021440826822072268, 7.863745850045234e-05, 0.00039905417361296713, 0.00030242512002587318, 0.00091197463916614652, 0.00044521855306811631, 0.000996579066850245, 0.0012671635486185551, 0.00011752767750294879, 0.00027235221932642162, 0.00028865586500614882, 0.00076740398071706295, 0.00043679249938577414, 0.00038268030039034784, 0.00095412047812715173, 0.00032869423739612103, 0.00033262080978602171, 0.00025344095774926245, 0.00033335844636894763, 0.00039012124761939049, 0.00013580798986367881, 0.0002712478453759104, 2.6899642762145959e-05, 0.0006141571793705225, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 15,48,7,-21,96,-24,127,-1, 
  /* [1][0][][] */ 127,79,76,6,-11,-38,0,122, 
  /* [2][0][][] */ -62,16,-5,127,12,-22,-32,56, 
  /* [3][0][][] */ 48,-38,-127,-6,-6,-40,21,125, 
  /* [4][0][][] */ -119,81,-127,-15,13,25,-37,-42, 
  /* [5][0][][] */ 127,-17,-5,-48,-3,-31,7,-127, 
  /* [6][0][][] */ 5,-9,-7,-2,-127,-27,56,3, 
  /* [7][0][][] */ -5,-62,-3,0,-24,1,-127,-1, 
  /* [8][0][][] */ -16,22,31,-9,127,18,-63,-21, 
  /* [9][0][][] */ 127,-42,24,-6,1,-30,52,107, 
  /* [10][0][][] */ 127,8,-6,-39,-1,9,0,-126, 
  /* [11][0][][] */ -51,-1,-2,127,-2,-42,-37,33, 
  /* [12][0][][] */ -127,6,-69,-24,7,102,-64,-120, 
  /* [13][0][][] */ 120,9,127,16,-9,21,23,44, 
  /* [14][0][][] */ -127,-5,14,16,-1,-14,6,126, 
  /* [15][0][][] */ -127,7,4,122,-2,-1,-19,118, 
  /* [16][0][][] */ 58,-72,127,64,-12,-109,33,71, 
  /* [17][0][][] */ 19,-50,-78,127,4,20,-5,114, 
  /* [18][0][][] */ 18,-33,-118,40,-18,0,30,127, 
  /* [19][0][][] */ 24,16,-13,127,-7,3,-69,-49, 
  /* [20][0][][] */ 19,50,114,-123,7,-64,9,-127, 
  /* [21][0][][] */ 3,-1,-7,1,-127,-13,54,0, 
  /* [22][0][][] */ 1,56,-4,-12,3,127,-12,0, 
  /* [23][0][][] */ 121,22,-8,95,-5,3,-47,-127, 
  /* [24][0][][] */ -127,18,-89,-37,20,-41,-40,-64, 
  /* [25][0][][] */ -46,-8,-66,-47,2,-127,7,-48, 
  /* [26][0][][] */ -105,-26,-127,11,10,5,-19,-35, 
  /* [27][0][][] */ 96,5,127,18,-5,42,19,42, 
  /* [28][0][][] */ 6,-65,-22,40,27,-127,4,13, 
  /* [29][0][][] */ -3,-9,28,-127,-13,-5,22,0, 
  /* [30][0][][] */ -40,4,127,-6,3,5,-4,-116, 
  /* [31][0][][] */ 0,13,3,2,127,25,-51,-2, 
  /* [32][0][][] */ -127,-22,-106,-13,-3,-31,-26,-62, 
  /* [33][0][][] */ 9,-51,2,-31,37,-127,15,-22, 
  /* [34][0][][] */ -57,-117,-127,62,5,-55,-11,-25, 
  /* [35][0][][] */ 54,6,-112,-3,-2,-2,8,127, 
  /* [36][0][][] */ 68,38,79,32,5,127,11,29, 
  /* [37][0][][] */ -9,15,-4,127,9,-20,-13,9, 
  /* [38][0][][] */ 2,23,9,-2,127,24,-36,1, 
  /* [39][0][][] */ -9,8,-12,23,-33,127,-109,-10, 
  /* [40][0][][] */ 127,-15,112,18,-23,29,16,62, 
  /* [41][0][][] */ 115,-2,127,20,-14,10,37,50, 
  /* [42][0][][] */ 57,-60,-14,-39,20,127,14,-27, 
  /* [43][0][][] */ -8,-63,-6,3,-44,-18,-127,2, 
  /* [44][0][][] */ -27,-127,36,91,12,43,10,-119, 
  /* [45][0][][] */ 115,14,127,0,-6,29,28,41, 
  /* [46][0][][] */ -82,17,8,127,3,3,-40,76, 
  /* [47][0][][] */ -3,49,-9,-3,-2,127,-18,3, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0033018090762197971, 0.0028747506439685822, 0.00093422789359465241, 0.0029663895256817341, 0.0030896225944161415, 0.0072208740748465061, 0.0096588348969817162, 0.0063199680298566818, 0.0066156708635389805, 0.003924625925719738, 0.016057712957262993, 0.0029033867176622152, 0.00078268576180562377, 0.0036713196896016598, 0.0065416200086474419, 0.00037908912054263055, 0.0027196602895855904, 0.0041269790381193161, 0.0040597179904580116, 0.0019944268278777599, 0.0016171132447198033, 0.013659968972206116, 0.0040088440291583538, 0.0083684120327234268, 0.0022913857828825712, 0.00084040022920817137, 0.0042647006921470165, 0.0032320239115506411, 0.0097462926059961319, 0.0047580604441463947, 0.010650462470948696, 0.013542204163968563, 0.00125602085608989, 0.0029106340371072292, 0.0030848714523017406, 0.0082012629136443138, 0.0046680108644068241, 0.004089712630957365, 0.010196706280112267, 0.0035127624869346619, 0.0035547257866710424, 0.0027085291221737862, 0.0035626089666038752, 0.004169234074652195, 0.001451382995583117, 0.0028988316189497709, 0.00028747707256115973, 0.006563511211425066, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 1459, 699, -479, -9231, -137, -613, -504, 4175, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00021423029829747975, 0.00027297018095850945, 0.00034587437403388321, 0.00018637046741787344, 0.00023576087551191449, 0.00012190105189802125, 0.00032906944397836924, 0.00019371043890714645, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -11,-13,-22,14,-9,-127,9,38, 
  /* [1][0][][] */ -62,22,-127,118,8,62,-18,36, 
  /* [2][0][][] */ 6,-6,24,-2,-11,-127,7,26, 
  /* [3][0][][] */ 24,53,56,127,17,-42,-41,-16, 
  /* [4][0][][] */ 15,61,23,-17,-127,-11,23,-4, 
  /* [5][0][][] */ 63,-26,127,-105,18,-62,-6,-47, 
  /* [6][0][][] */ 28,127,45,-38,40,-10,-66,-22, 
  /* [7][0][][] */ -22,-27,-42,-16,-11,-127,22,43, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0091047873720526695, 0.011601232923567295, 0.014699661172926426, 0.0079207448288798332, 0.010019836947321892, 0.00518079474568367, 0.013985451310873032, 0.008232693187892437, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { 6578, 294, 359, 1662, 14004, 267, 550, 1083, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00010040352208307013, 0.00046591076534241438, 0.00016984816465992481, 0.0004758716095238924, 0.00018400144472252578, 0.00027563929324969649, 0.00059272203361615539, 9.322003461420536e-05, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -19,-6,7,0,-5,27,2,-4, 15,-2,6,-6,6,127,14,127, 6,-2,7,-7,-4,17,1,4, 
  /* [0][1][][] */ 8,-127,-5,4,-18,-6,-105,-2, -127,97,-78,127,-127,-8,127,-34, 12,-2,-5,-63,-8,2,47,-27, 
  /* [0][2][][] */ 19,-4,3,-3,-5,-23,9,-6, 59,-3,127,-20,9,-113,5,7, 10,-1,-9,-7,-4,-20,-2,-5, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0042671496048569679, 0.019801206886768341, 0.0072185471653938293, 0.020224543288350105, 0.0078200614079833031, 0.01171466987580061, 0.025190684944391251, 0.003961851354688406, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 51171, -2796, 43647, 19372, 17208, 548078, 18623, 39812, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 6.1512444517575204e-05, 3.9865026337793097e-05, 8.4007995610591024e-05, 2.5777209884836338e-05, 0.00010583746188785881, 6.2191493270802312e-06, 6.9810025706829038e-06, 7.925151294330135e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 9,-3,13, 8,-23,31, 11,-24,21, 
  /* [0][1][][] */ 39,29,27, 65,18,59, 23,-33,38, 
  /* [0][2][][] */ -21,-92,-12, -30,-127,0, -8,-56,18, 
  /* [1][0][][] */ 32,78,26, 7,10,-1, -31,-69,-26, 
  /* [1][1][][] */ 54,124,41, 3,1,-2, -55,-127,-39, 
  /* [1][2][][] */ 31,47,13, 6,0,1, -32,-52,-2, 
  /* [2][0][][] */ 45,93,11, 55,127,13, 17,42,-2, 
  /* [2][1][][] */ -46,-83,-28, -80,-93,-38, -30,-7,-21, 
  /* [2][2][][] */ 1,10,7, 5,16,0, 1,10,-7, 
  /* [3][0][][] */ 46,-29,-14, 78,-34,-37, 32,-15,-11, 
  /* [3][1][][] */ 81,-53,-34, 127,-52,-71, 61,-25,-26, 
  /* [3][2][][] */ 21,-19,-2, 43,-26,-14, 18,-8,1, 
  /* [4][0][][] */ -12,-23,-4, 27,45,9, -16,-29,-4, 
  /* [4][1][][] */ -28,-59,-9, 64,127,19, -34,-61,-8, 
  /* [4][2][][] */ -9,-12,3, 22,25,-3, -12,-13,-3, 
  /* [5][0][][] */ -31,-57,-33, -52,-85,-53, -43,-31,-28, 
  /* [5][1][][] */ -59,-107,-48, -82,-127,-63, -50,-42,-35, 
  /* [5][2][][] */ 2,6,-11, 0,0,-7, 1,10,0, 
  /* [6][0][][] */ -98,-1,39, 5,24,-11, 70,21,-17, 
  /* [6][1][][] */ -127,-31,48, 17,24,-25, 113,20,-29, 
  /* [6][2][][] */ -49,-10,21, 18,-4,1, 38,-10,34, 
  /* [7][0][][] */ -6,16,-2, -16,22,-7, -6,21,-8, 
  /* [7][1][][] */ 17,84,-6, 22,127,-23, -2,61,-27, 
  /* [7][2][][] */ -28,-50,-20, -43,-52,-33, -20,4,-19, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.0156856719404459, 0.010165581479668617, 0.021422037854790688, 0.0065731881186366081, 0.026988551020622253, 0.0015858829719945788, 0.0017801555804908276, 0.020209135487675667, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.094212174415588379, } };
const TfArray<1, int> quant46_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.093571439385414124, } };
const TfArray<1, int> quant47_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.089918605983257294, } };
const TfArray<1, int> quant51_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.074252292513847351, } };
const TfArray<1, int> quant54_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.10229663550853729, } };
const TfArray<1, int> quant55_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.076454058289527893, } };
const TfArray<1, int> quant59_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.03028910793364048, } };
const TfArray<1, int> quant62_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.072379626333713531, } };
const TfArray<1, int> quant63_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.022204399108886719, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.040389735251665115, } };
const TfArray<1, int> quant66_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.091048672795295715, } };
const TfArray<1, int> quant67_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.020764673128724098, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.049749270081520081, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.045421488583087921, } };
const TfArray<1, int> quant70_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_33_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
