/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 30.11.2023 11:53:20

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238576;
#else
constexpr int kTensorArenaSize = 237552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[28];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 26500, -29180, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00017548978212289512, 0.00015893566887825727, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 71,-48,-64,125,-94,-4,-47,48,109,-12,-55,-36,-28,55,-38,14,127,-47,-33,-60,100,50,95,-77,-59,-53,-16,70,20,-89,13,78, 
  /* [1][0][][] */ 54,85,87,-74,-74,88,-11,21,-37,-15,48,121,127,52,33,0,-44,-20,-63,-109,-81,48,36,124,88,79,-56,-4,110,-110,-117,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0037155288737267256, 0.0033650398254394531, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -377, 525, 575, 145, -655, 699, -261, 540, -514, -167, 592, 532, 543, 534, -588, -508, -408, 1287, -408, 178, -455, 632, 502, 582, 561, 537, 184, -340, 5, -511, 17, -260, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.5483149733627215e-05, 4.6983070205897093e-05, 4.4582226109923795e-05, 4.3261974496999756e-05, 4.2023541027447209e-05, 4.1832881834125146e-05, 4.4858014007331803e-05, 4.729413558379747e-05, 4.7337161959148943e-05, 4.332851676736027e-05, 4.6145552914822474e-05, 4.6082193875918165e-05, 4.6011035010451451e-05, 4.6373712393688038e-05, 4.5066670281812549e-05, 4.1493451135465875e-05, 3.9717571780784056e-05, 5.0862752686953172e-05, 4.3138254113728181e-05, 4.2934665543725714e-05, 4.0285620343638584e-05, 4.2929459596052766e-05, 4.782422911375761e-05, 4.4358632294461131e-05, 4.738537609227933e-05, 4.5848224544897676e-05, 4.4651260395767167e-05, 4.3744603317463771e-05, 4.861319757765159e-05, 4.2938179831253365e-05, 5.7960725825978443e-05, 4.1449406126048416e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -46,-55,101,3,87,-18,-96,-108,53,-104,-117,-16,46,-1,-40,48,-69,-34,-76,-70,-79,-112,-5,99,-117,2,70,-57,95,-8,-30,-86,75,-70,-102,56,-116,-88,-100,20,67,-94,-100,91,42,-127,99,-29, 
  /* [1][0][][] */ -37,48,-60,8,-26,86,55,19,91,-88,-89,81,74,-38,37,71,106,-28,40,127,-35,2,47,34,33,28,-26,109,15,18,104,-51,70,111,-3,35,60,74,-12,-49,-65,18,-7,-84,-24,37,-25,-45, 
  /* [2][0][][] */ 66,54,-53,106,-10,-52,110,107,-86,100,-21,95,103,-30,97,-104,-58,-15,43,69,-87,-5,127,32,-23,94,121,15,-65,95,97,109,-57,-10,-84,-97,-78,114,109,-12,-122,-65,29,8,-75,121,-17,-69, 
  /* [3][0][][] */ 78,0,44,-17,-69,51,-111,45,61,27,71,26,111,118,80,4,117,104,-48,29,127,-86,-59,-113,-22,-119,-86,117,69,-105,93,11,-55,-34,-1,-11,-91,-24,55,52,-22,-92,-97,10,82,39,-36,-78, 
  /* [4][0][][] */ 40,97,-11,47,-41,-34,16,6,52,85,-24,71,17,-39,-25,-79,-32,-14,-80,3,105,-110,78,16,-24,-17,54,-71,-63,25,-88,-69,62,112,3,-123,-64,-23,-127,39,-59,-79,-92,-113,25,110,27,50, 
  /* [5][0][][] */ 122,-79,96,103,58,-118,46,74,127,-110,5,-103,35,87,56,47,59,77,-82,120,48,59,28,-28,-126,-58,-1,-100,51,50,17,-90,-27,13,-78,19,-113,-26,46,39,-116,-42,61,107,-27,21,36,-50, 
  /* [6][0][][] */ 38,-39,112,77,-83,-62,8,66,1,-82,15,-88,89,62,118,-108,37,16,-5,104,-75,-121,115,72,-57,-76,4,-62,-31,-108,73,-77,-87,-123,-42,-96,-12,62,-111,127,85,58,26,-9,-115,105,-72,-45, 
  /* [7][0][][] */ 127,80,-26,-31,-58,119,-8,10,122,16,-83,-2,63,-96,57,80,55,23,4,121,62,41,5,90,-64,107,52,61,-69,115,-18,47,35,34,70,103,-91,96,-6,-16,88,-62,94,75,59,0,103,-99, 
  /* [8][0][][] */ -6,18,-52,-97,46,17,-93,-31,-7,25,28,113,-8,-35,-94,-78,-69,79,-69,3,18,-34,66,96,-116,76,29,67,-71,5,-103,100,78,-41,36,-14,102,-13,-22,54,77,87,-121,-127,-20,-30,-30,96, 
  /* [9][0][][] */ -2,3,118,47,83,-117,-48,-127,41,49,-14,63,-29,-82,-110,-32,7,-4,-104,-71,2,102,-116,-112,116,-13,-17,25,-8,-68,-93,102,61,-3,26,-24,-82,13,-37,-50,49,-74,54,-101,81,20,-111,55, 
  /* [10][0][][] */ -42,98,102,-54,-3,111,127,39,51,43,36,-88,110,67,-19,20,-33,93,-92,-47,-6,36,68,-60,33,65,-100,-105,-42,93,-82,-67,97,109,124,80,-30,22,-30,49,-40,127,-94,-26,-85,-55,2,-50, 
  /* [11][0][][] */ 127,26,-5,113,127,52,71,40,122,102,-64,90,4,-97,40,-56,-54,-90,68,52,42,82,35,-100,-102,-83,-6,75,83,6,33,-7,-76,-61,59,53,-53,89,-26,-45,-30,114,-59,15,-31,-56,-84,-80, 
  /* [12][0][][] */ 31,82,-44,12,98,16,-15,45,-62,70,-1,-6,-33,-4,61,-69,-95,-20,-41,-66,37,-1,29,105,-64,-36,113,-92,97,27,-25,127,-73,-59,-37,25,7,-58,-15,56,110,52,-95,-28,-10,-79,-33,124, 
  /* [13][0][][] */ 124,-44,111,105,103,121,94,74,83,-90,23,-45,100,59,78,-38,-112,-60,-63,40,77,-19,127,-38,-61,49,19,25,-80,-75,86,49,51,112,-13,44,-72,-15,28,80,-65,87,-38,22,-32,31,3,-21, 
  /* [14][0][][] */ -63,-99,77,62,69,-38,-22,-126,-87,-47,58,70,-39,-91,-97,-91,-66,-63,2,18,-52,24,-12,52,-124,-79,-40,20,-127,-126,-88,27,98,-34,-43,-3,85,110,26,-120,-19,-122,32,80,57,-122,57,-93, 
  /* [15][0][][] */ -2,-40,-37,72,93,-100,32,-113,51,-11,-94,26,105,-4,-108,-127,97,0,-110,12,44,12,65,108,84,63,30,99,13,51,47,-119,-4,1,-80,-16,-79,105,116,-86,13,113,-68,-44,20,-88,-58,-95, 
  /* [16][0][][] */ -90,-10,111,-75,41,122,-65,39,52,48,-126,110,-19,-38,-69,-76,123,83,81,68,120,88,-48,58,-39,58,-87,69,-111,7,57,6,-127,82,65,67,-46,55,-57,-85,32,-60,74,105,66,117,118,-18, 
  /* [17][0][][] */ 60,-69,44,94,-11,-87,-28,-63,62,-58,93,67,118,72,-77,58,44,63,110,127,-62,7,36,-24,35,77,-50,50,123,-25,-8,84,1,0,49,23,-22,112,-51,-3,-70,-8,8,9,28,36,101,-68, 
  /* [18][0][][] */ -108,97,107,-79,-16,-121,-114,-2,-13,70,-121,-44,-45,38,56,-67,19,-30,53,-31,100,-56,14,-91,27,-108,-26,110,27,28,-7,38,40,-36,-121,-120,-40,27,-40,60,-48,-8,-59,-19,-127,13,19,-11, 
  /* [19][0][][] */ 31,32,83,44,69,-83,114,103,111,-62,44,17,-88,53,-57,69,83,-96,127,65,-19,98,-42,30,90,-74,39,-61,-79,-118,-52,49,94,-77,50,13,13,-59,-44,-94,62,-114,-87,26,-78,39,97,-80, 
  /* [20][0][][] */ -19,70,73,101,-102,97,13,59,10,9,-104,23,-13,98,39,-88,-56,-44,-79,-41,21,-57,-93,-86,87,-88,-124,50,26,7,-54,121,107,44,-24,55,42,-44,-19,-127,-97,-45,-105,-123,-37,-71,-82,114, 
  /* [21][0][][] */ 116,95,86,-97,115,-69,95,29,13,-57,-61,25,16,21,-40,-84,-107,-23,39,-2,124,-39,89,-75,61,-76,-19,83,21,18,10,-10,20,33,-84,-105,127,119,-122,-21,-6,19,43,0,-92,-87,-74,107, 
  /* [22][0][][] */ 46,-37,-59,-82,96,-45,113,66,-82,95,-61,-117,118,-127,-95,-73,36,87,-106,-47,94,-67,40,38,90,-1,-94,102,-53,-60,-64,-91,57,68,21,12,13,-3,-54,-98,-5,-1,15,96,62,-113,90,-15, 
  /* [23][0][][] */ 82,-76,15,69,110,-109,23,-94,70,-72,100,52,28,-127,32,-32,91,-24,-105,115,106,-76,117,-28,-16,-4,99,27,76,62,80,-27,-28,53,26,41,109,8,-114,20,-117,12,24,-102,-62,-93,120,35, 
  /* [24][0][][] */ -55,-28,-89,-54,-70,-113,-49,-75,77,127,90,22,122,44,-21,-114,-92,53,26,-35,106,-74,-43,-30,43,-21,90,59,106,70,3,-44,11,19,51,29,-41,-66,59,-4,-83,-81,118,10,30,-41,45,77, 
  /* [25][0][][] */ -68,-41,-69,0,103,-64,-85,64,56,-100,-28,0,81,-18,-96,-14,-73,70,36,-96,78,90,-1,-51,13,-42,-88,43,80,-75,38,127,103,-100,48,77,107,-46,-22,-5,-90,108,-89,11,107,41,68,42, 
  /* [26][0][][] */ 53,-121,-18,-3,-98,0,-3,-9,-106,-120,107,97,-75,-43,12,-15,127,33,-71,-47,19,81,105,18,50,67,9,53,25,3,-91,-2,-27,-61,-95,-101,-56,87,-40,109,-86,109,61,35,-69,87,-36,114, 
  /* [27][0][][] */ 6,4,-69,-110,-127,-75,-74,-21,40,98,33,-102,-33,61,80,-33,66,-19,60,-89,-100,8,-35,-29,-110,45,-117,-6,62,25,-33,-14,59,67,-98,-93,-97,-72,-119,87,-99,14,25,13,98,23,67,102, 
  /* [28][0][][] */ 67,-4,81,42,-106,-60,-112,-71,-60,-100,46,39,-79,-87,5,85,86,92,-72,69,-26,22,-111,-87,-127,73,-80,-58,-91,-70,-6,-24,-98,10,50,62,16,-108,-40,28,68,40,-86,38,-101,-8,-11,43, 
  /* [29][0][][] */ 42,47,52,-63,-99,11,-127,0,102,-24,-98,-87,105,-94,-59,-51,-107,101,33,-77,-88,-35,52,5,-41,8,-54,-35,-113,-15,114,-12,48,-3,-81,-55,-19,102,-14,93,59,104,-57,87,-5,108,-55,-31, 
  /* [30][0][][] */ 18,-53,-47,29,-79,16,-29,-11,91,-14,49,-17,-75,42,44,6,4,27,79,-74,31,-75,-80,11,-88,48,-52,92,1,-88,-44,5,-66,-53,-87,-36,13,-11,-4,19,72,-60,16,127,84,-34,82,48, 
  /* [31][0][][] */ 85,-106,39,110,54,66,-67,-112,-35,-24,-91,-68,112,-127,-55,118,-63,-99,40,55,70,38,-35,115,53,-127,36,44,-70,-84,48,117,19,21,-101,-11,106,-37,-70,-123,67,-77,-35,33,4,-56,-40,28, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023115475196391344, 0.002387776505202055, 0.00226576067507267, 0.0021986628416925669, 0.0021357231307774782, 0.0021260334178805351, 0.0022797768469899893, 0.0024035854730755091, 0.0024057722184807062, 0.0022020447067916393, 0.0023452122695744038, 0.0023419922217726707, 0.0023383756633847952, 0.0023568077012896538, 0.0022903811186552048, 0.0021087827626615763, 0.0020185289904475212, 0.0025849500671029091, 0.0021923750173300505, 0.0021820282563567162, 0.0020473983604460955, 0.0021817637607455254, 0.0024305260740220547, 0.0022543971426784992, 0.0024082225281745195, 0.002330101327970624, 0.0022692692000418901, 0.0022231910843402147, 0.0024706230033189058, 0.0021822068374603987, 0.0029456836637109518, 0.002106544328853488, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { -201, 1293, 1972, 4470, 6844, -1179, -1147, 14624, 1212, 9919, 524, -791, 4093, -3821, 2385, -1995, -313, -3289, 902, 1639, 2810, 3612, 4876, 502, -2814, -1859, 434, 2043, 1548, 2278, -884, 2861, 4584, 4304, 4368, 1928, 11506, 1660, 1193, -977, 929, 14005, -1135, 1701, 8004, 74, 1501, 4334, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00032613918301649392, 0.00022761538275517523, 0.00013748942001257092, 0.00013792052050121129, 0.00013909795961808413, 0.00014838344941381365, 0.00028621300589293242, 6.8005952925886959e-05, 0.00024506685440428555, 8.1267236964777112e-05, 0.0001800374302547425, 0.00050840206677094102, 0.00016318265988957137, 0.00016991171287372708, 0.00030838491511531174, 0.00014154581003822386, 0.00014341017231345177, 5.1374168833717704e-05, 0.00024907130864448845, 0.0003388595359865576, 0.00023431719455402344, 0.0001431742130080238, 0.00013459716865327209, 0.00021976334392093122, 0.00017952492635231465, 0.00025692558847367764, 0.00031056383159011602, 0.00025799887953326106, 0.00022087212710175663, 0.00027231083367951214, 0.00014468499284703285, 0.00022422165784519166, 0.00014459529484156519, 0.0001699085405562073, 0.00010155468771699816, 0.00012672289449255913, 7.6353586337063462e-05, 0.00016286909522023052, 0.0001393754209857434, 0.0002637615252751857, 0.00016879108443390578, 6.9525929575320333e-05, 0.00015997399168554693, 0.00011312388232909143, 0.00010120128717971966, 0.00018644014198798686, 0.00018249642744194716, 0.00017661323363427073, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 17,-19,-61,14,-127,7,-58,-2, 
  /* [1][0][][] */ -112,29,127,12,-114,-14,4,-18, 
  /* [2][0][][] */ 9,71,-37,25,-49,-127,-12,86, 
  /* [3][0][][] */ -83,39,-2,127,-2,-53,-78,-53, 
  /* [4][0][][] */ 11,-13,39,-122,-29,17,-127,18, 
  /* [5][0][][] */ 73,123,-62,-50,-31,-8,44,-127, 
  /* [6][0][][] */ 52,-42,47,99,-50,-127,-5,-89, 
  /* [7][0][][] */ 31,118,-49,-63,-67,-36,15,-127, 
  /* [8][0][][] */ -3,-26,55,-2,6,5,-53,-127, 
  /* [9][0][][] */ -87,-5,-113,28,-127,-83,-91,-21, 
  /* [10][0][][] */ 79,6,96,-39,-127,7,81,90, 
  /* [11][0][][] */ 127,-31,-83,12,59,0,-77,-2, 
  /* [12][0][][] */ -27,-98,127,14,13,4,-76,63, 
  /* [13][0][][] */ 40,-67,75,-14,21,-127,60,-120, 
  /* [14][0][][] */ -106,42,127,-3,-40,-74,44,-44, 
  /* [15][0][][] */ 46,121,-35,-59,-55,13,49,-127, 
  /* [16][0][][] */ 26,94,-49,60,0,-37,-14,127, 
  /* [17][0][][] */ 26,80,-20,86,-51,76,-127,46, 
  /* [18][0][][] */ 72,-35,127,-39,80,-94,18,-30, 
  /* [19][0][][] */ 9,-9,21,127,22,-52,-44,-104, 
  /* [20][0][][] */ 8,20,-22,38,-14,51,-127,7, 
  /* [21][0][][] */ 9,-3,57,19,19,127,46,-61, 
  /* [22][0][][] */ 66,-127,-7,61,-95,67,17,14, 
  /* [23][0][][] */ -35,-112,-10,-108,4,-65,0,-127, 
  /* [24][0][][] */ 17,21,-19,-60,-36,-127,-46,52, 
  /* [25][0][][] */ 67,67,127,13,7,25,-44,-4, 
  /* [26][0][][] */ -115,41,127,-49,-98,-22,92,-8, 
  /* [27][0][][] */ -83,45,-35,-101,26,127,-23,91, 
  /* [28][0][][] */ 11,-103,68,53,41,3,-37,127, 
  /* [29][0][][] */ -118,60,68,-28,-127,0,88,-29, 
  /* [30][0][][] */ 90,-86,23,66,-127,-24,32,-82, 
  /* [31][0][][] */ 54,84,62,-40,-120,-19,7,127, 
  /* [32][0][][] */ -35,-24,99,-48,41,17,-126,-127, 
  /* [33][0][][] */ 57,35,107,-127,19,48,-34,62, 
  /* [34][0][][] */ -21,-120,98,-37,27,127,58,-98, 
  /* [35][0][][] */ 37,15,117,-1,1,127,18,-61, 
  /* [36][0][][] */ -22,35,-19,43,43,-127,1,19, 
  /* [37][0][][] */ 20,-18,59,24,-127,111,-35,-18, 
  /* [38][0][][] */ -127,-22,-94,-26,75,-38,-119,-33, 
  /* [39][0][][] */ 21,-1,38,-117,-32,52,-127,10, 
  /* [40][0][][] */ 98,-32,-72,-127,68,66,60,-23, 
  /* [41][0][][] */ 15,-19,-6,127,-110,3,-88,-61, 
  /* [42][0][][] */ -87,25,68,127,-58,-67,-60,7, 
  /* [43][0][][] */ 88,-111,103,46,-121,35,127,51, 
  /* [44][0][][] */ 11,-44,30,-66,-17,127,46,26, 
  /* [45][0][][] */ -32,33,-42,5,78,-47,-127,-38, 
  /* [46][0][][] */ -102,-96,-2,-20,18,127,-45,-120, 
  /* [47][0][][] */ -127,-99,-60,36,27,126,-28,-62, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0036970442160964012, 0.0025801993906497955, 0.0015585507499054074, 0.0015634375158697367, 0.0015767847653478384, 0.0016820430755615234, 0.0032444496173411608, 0.00077090092236176133, 0.0027780255768448114, 0.00092122802743688226, 0.0020408658310770988, 0.0057631372474133968, 0.0018498037243261933, 0.0019260828848928213, 0.00349578564055264, 0.0016045330557972193, 0.001625667093321681, 0.00058236659970134497, 0.0028234191704541445, 0.0038412392605096102, 0.0026561697013676167, 0.0016229922184720635, 0.0015257648192346096, 0.0024911903310567141, 0.0020350562408566475, 0.0029124536085873842, 0.0035204852465540171, 0.0029246201738715172, 0.0025037592276930809, 0.0030868572648614645, 0.0016401181928813457, 0.0025417287833988667, 0.0016391013050451875, 0.0019260469125583768, 0.0011512022465467453, 0.001436503604054451, 0.00086552795255556703, 0.0018462492153048515, 0.0015799299580976367, 0.0029899443034082651, 0.0019133796449750662, 0.00078813108848407865, 0.0018134310375899076, 0.0012823481811210513, 0.0011471961624920368, 0.0021134456619620323, 0.0020687405485659838, 0.0020020499359816313, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -2179, -418, -12547, 11062, 7443, -2805, 8855, 1653, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 8.7661886936984956e-05, 0.00012713114847429097, 7.7835145930293947e-05, 0.0001141086031566374, 0.00013177917571738362, 7.4213989137206227e-05, 0.00012501749733928591, 0.00014749294496141374, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 13,43,31,33,-6,-30,44,48,2,27,-9,-6,44,-35,47,-17,-57,-29,-127,-5,48,-37,15,42,8,-7,48,-4,-6,-54,9,28,-45,51,47,6,53,74,-56,-50,5,16,-96,-45,33,21,-21,-56, 
  /* [1][0][][] */ -15,-42,-1,74,-18,-6,-8,-8,18,3,-17,-53,-6,-1,20,11,48,27,51,-36,-2,30,29,-48,-4,-13,-34,-29,-40,13,-7,-9,-32,-25,-97,74,22,11,-127,-14,28,-18,73,30,99,-22,-33,49, 
  /* [2][0][][] */ -8,-1,33,-30,-34,-18,-4,117,-49,88,-42,-6,127,-14,41,-22,-58,-72,1,33,-11,-20,20,-3,12,51,6,38,20,7,70,37,-65,-22,23,59,3,71,58,-123,41,40,-49,-34,17,34,-13,-13, 
  /* [3][0][][] */ 22,-11,-127,-25,9,-7,61,-41,-32,-16,-9,17,-43,-62,41,13,10,47,14,28,-65,14,-70,-10,-36,-69,28,2,-74,-66,-66,25,79,36,-48,21,-64,8,21,-24,29,-60,-30,13,60,-48,36,-19, 
  /* [4][0][][] */ 5,50,-5,-10,30,-6,-81,-114,-33,17,-19,72,2,-24,4,64,45,56,-88,9,26,9,-28,-8,36,-3,2,2,-25,13,4,-40,22,-21,-127,30,-29,-4,49,46,-28,-39,82,48,10,-47,23,17, 
  /* [5][0][][] */ -53,-30,97,17,79,26,58,-5,-127,7,-104,-12,-85,-88,51,76,-18,32,23,0,49,18,21,12,-16,-3,6,-19,-39,-6,-25,-23,-23,40,68,27,-15,74,-24,-7,45,-38,-57,47,-8,16,33,21, 
  /* [6][0][][] */ 85,67,-17,25,28,-31,-106,-69,1,-2,-3,71,-24,-31,0,39,-40,38,18,-2,127,-16,63,111,5,-54,15,-24,-57,-17,-31,-64,48,-30,20,-10,-4,27,-42,39,-53,-51,-63,-38,-27,-52,51,-3, 
  /* [7][0][][] */ 7,49,35,-77,56,-49,-39,-12,13,7,33,26,-35,4,35,-4,-17,26,-20,51,-47,-5,-14,56,3,-32,6,38,-9,30,-33,-16,43,-5,-33,-37,-60,9,127,-5,14,-33,-20,-9,38,2,63,3, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0037256299983710051, 0.0054030735045671463, 0.0033079935237765312, 0.0048496155068278313, 0.0056006149388849735, 0.0031540945637971163, 0.0053132432512938976, 0.0062684500589966774, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -1300, -2668, 3341, -747, -182, -85, 2909, 12231, -6021, 14388, 10096, -1776, 5320, -1805, 5648, -744, 1103, -1532, 1579, -2074, -3284, -2435, -17487, -3050, 3956, 100, 1869, 1990, 9528, 8310, 7957, -2581, -7732, -105, -2598, -5321, 5077, 8663, -2919, 12194, 1500, -886, -4492, -2378, -8100, 12760, 97, 7174, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 7.4949668487533927e-05, 0.00029863414238207042, 0.00017255420971196145, 0.00021972622198518366, 0.00015202494978439063, 0.00046731415204703808, 0.00024799557286314666, 0.00052492064423859119, 0.00024808690068311989, 0.00010433152056066319, 0.00015108680236153305, 0.00014191596710588783, 0.00016717473044991493, 0.00027488722116686404, 0.00017447768186684698, 0.00023744575446471572, 0.00053289340576156974, 0.00025662276311777532, 8.3854516560677439e-05, 0.00024220434715971351, 0.00013598031364381313, 0.00019406811043154448, 8.5922976722940803e-05, 0.00029340467881411314, 0.00012474982941057533, 0.00035215137177146971, 8.0023477494250983e-05, 0.0002191686216974631, 0.00017360366473440081, 0.00012216391041874886, 0.00014522555284202099, 0.00017348377150483429, 0.00018822473066393286, 0.00033845816506072879, 0.0003510057576932013, 0.00013846479123458266, 0.00011107637692475691, 8.5016836237628013e-05, 0.00032825229573063552, 0.00014276208821684122, 0.00022342534794006497, 0.00018565953359939158, 0.00016387471987400204, 0.00020821357611566782, 0.00027325475821271539, 9.3605849542655051e-05, 0.00015287612040992826, 0.00010803338955156505, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 88,76,46,43,-16,-73,38,28,-57,-6,-25,50,57,13,-3,25,48,-41,102,48,60,-23,10,13,-5,-68,56,5,-31,-71,37,51,27,-90,7,26,-37,36,-10,-127,-7,-98,-53,-13,10,-127,72,-127, 127,11,65,-95,56,58,41,-42,-100,-92,20,127,11,-50,-127,22,-8,123,70,40,39,88,106,34,127,-58,-26,-127,-126,-54,-127,127,32,-77,-80,127,28,-96,-84,-113,11,127,-68,26,-45,-86,78,27, 79,6,21,-76,-20,-53,38,22,-44,-7,-4,25,33,27,44,7,-50,8,70,43,-23,-30,-64,-6,-12,-63,-65,-39,-44,-87,0,19,54,-54,32,36,-70,-63,1,-80,2,-28,112,-16,3,-111,17,-50, 
  /* [0][1][][] */ 102,4,20,69,66,78,-2,-127,100,-127,-108,-98,9,48,-55,127,-127,106,71,52,-2,99,77,-39,-7,123,88,22,28,-50,-90,45,63,88,-70,47,-82,-6,-3,-76,-19,-59,10,-95,44,-24,50,-33, 4,127,-127,97,127,60,-127,14,104,-36,-12,91,-127,127,-25,-7,42,-127,-127,-8,127,42,127,-127,-85,86,-55,1,-8,-43,38,-27,127,-9,124,-74,108,-127,127,97,127,71,-102,0,109,41,-127,-23, 48,-3,6,-127,66,54,11,-80,127,-52,-127,-39,16,40,-50,110,80,-3,18,62,39,-127,39,126,-66,127,-69,-24,37,-25,-50,40,-9,65,127,54,-71,-30,-55,-18,-22,-27,127,127,127,-36,65,-14, 
  /* [0][2][][] */ 30,42,29,50,0,1,28,28,8,-24,-9,-23,41,-62,45,-53,-12,24,86,-55,106,-20,18,-60,-73,-63,127,87,-4,-99,-52,62,26,37,-11,-2,-68,25,1,-15,-20,-76,19,-16,7,6,37,-75, 48,9,8,2,-7,-127,-9,-71,-10,-53,15,-34,-9,-57,-10,22,2,-38,30,123,93,69,81,28,43,-47,-77,46,-127,-43,-62,17,11,127,-50,-2,-115,-123,22,-28,-91,83,-9,5,-40,-80,84,-45, 18,3,28,-60,17,-2,38,39,-8,-1,8,-11,39,-53,54,-20,-6,-33,56,-127,22,-62,-62,68,-59,-66,-121,25,-9,-127,15,32,32,-37,-7,37,-127,-68,-28,-16,-23,-11,-1,11,-8,32,-30,-72, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0035513655748218298, 0.014150283299386501, 0.008176194503903389, 0.010411362163722515, 0.0072034494951367378, 0.022142905741930008, 0.011750858277082443, 0.024872492998838425, 0.011755185201764107, 0.0049435757100582123, 0.007158997468650341, 0.0067244525998830795, 0.0079212971031665802, 0.013025075197219849, 0.0082673355937004089, 0.011250972747802734, 0.02525026910007, 0.012159643694758415, 0.0039733070880174637, 0.011476450599730015, 0.0064432010985910892, 0.0091955950483679771, 0.0040713176131248474, 0.013902493752539158, 0.0059110634028911591, 0.016686107963323593, 0.0037917797453701496, 0.010384941473603249, 0.0082259215414524078, 0.0057885339483618736, 0.006881271954625845, 0.0082202404737472534, 0.0089187165722250938, 0.01603727787733078, 0.016631824895739555, 0.0065609244629740715, 0.0052631697617471218, 0.0040283817797899246, 0.015553689561784267, 0.0067645441740751266, 0.010586638934910297, 0.0087971687316894531, 0.0077649313025176525, 0.0098658548668026924, 0.012947722338140011, 0.0044353576377034187, 0.0072437813505530357, 0.0051189828664064407, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { -1459, -1760, 2306, -601, -2412, 2194, 2232, 20522, 2426, 2166, 6466, 2546, 1556, 9637, 5046, -1943, 14336, 1868, 773, -2985, -215, -582, 1900, 9288, 775, 6900, 2477, -280, 7798, 254, 1726, -1358, -1778, -2909, -6478, 1539, 2780, 1969, 1999, 2791, 2260, 758, 4107, 2641, 15139, 4108, -1676, 770, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00022024589998181909, 0.00027068579220212996, 0.00027462051366455853, 0.00018513294344302267, 0.000215031104744412, 0.00011821859516203403, 0.00025213556364178658, 6.0998449043836445e-05, 0.00013006367953494191, 0.00025586580159142613, 0.00012469469220377505, 0.00014868991274852306, 0.00024242038489319384, 9.051044617081061e-05, 0.00014835159527137876, 0.00020717413281090558, 7.1443668275605887e-05, 0.00012781834811903536, 0.00029877480119466782, 0.00020835078612435609, 0.00013281064457260072, 0.00028776779072359204, 0.00018371596524957567, 0.00010009470861405134, 0.00020849610154982656, 9.7507363534532487e-05, 0.00025146396365016699, 0.0002599152794573456, 6.7530061642173678e-05, 0.00038457932532764971, 0.00014333515719044954, 0.00026979882386513054, 0.00026531837647780776, 0.00011686597281368449, 8.6673353507649153e-05, 0.00027405616128817201, 0.00016219766985159367, 0.00018998632731381804, 0.00021724311227444559, 0.00017239489534404129, 0.00027321852394379675, 0.00027144461637362838, 0.00016064589726738632, 0.00019546608382370323, 6.386165478033945e-05, 0.00016853457782417536, 0.00011444393021520227, 0.00029593773069791496, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -16,-44,-46,103,14,-72,-82,-127, 
  /* [1][0][][] */ 127,-28,40,-28,22,-72,-3,26, 
  /* [2][0][][] */ -6,49,5,-127,19,93,-53,64, 
  /* [3][0][][] */ -26,127,-53,-81,-89,-3,25,-84, 
  /* [4][0][][] */ 3,-60,-91,-34,22,-80,-70,-127, 
  /* [5][0][][] */ -46,-88,88,56,18,127,38,-116, 
  /* [6][0][][] */ 1,6,-38,35,5,12,-127,-38, 
  /* [7][0][][] */ 25,-16,5,27,-38,54,127,66, 
  /* [8][0][][] */ -7,41,-80,-16,-38,-127,-64,60, 
  /* [9][0][][] */ 63,3,-46,-18,14,127,-42,102, 
  /* [10][0][][] */ -22,54,89,123,86,127,-14,-62, 
  /* [11][0][][] */ -18,-55,5,36,-127,74,-10,-29, 
  /* [12][0][][] */ -22,34,79,-54,57,-91,-127,-61, 
  /* [13][0][][] */ 47,34,-91,-127,-13,-66,-73,114, 
  /* [14][0][][] */ -38,-127,1,-71,6,-70,21,-117, 
  /* [15][0][][] */ 7,68,69,93,85,127,-12,-32, 
  /* [16][0][][] */ 43,16,-22,-127,63,106,-74,79, 
  /* [17][0][][] */ -100,99,-127,35,38,104,-79,39, 
  /* [18][0][][] */ -127,55,26,-18,-98,17,-27,7, 
  /* [19][0][][] */ 127,6,-35,-32,77,-63,69,-88, 
  /* [20][0][][] */ 127,-56,41,-32,-52,33,85,4, 
  /* [21][0][][] */ 13,-29,-40,47,-1,21,127,41, 
  /* [22][0][][] */ 96,41,-127,-95,21,120,72,121, 
  /* [23][0][][] */ -27,42,-50,-85,39,6,-127,4, 
  /* [24][0][][] */ 127,-68,-96,-27,103,-59,18,17, 
  /* [25][0][][] */ -39,-85,78,-46,72,127,-23,-100, 
  /* [26][0][][] */ 24,-59,44,41,127,-67,-47,-68, 
  /* [27][0][][] */ -23,-127,64,86,20,-7,-35,99, 
  /* [28][0][][] */ -19,63,-127,-48,121,-105,-27,126, 
  /* [29][0][][] */ -80,31,127,-92,13,-33,32,30, 
  /* [30][0][][] */ 116,-85,94,-30,-61,-127,71,-34, 
  /* [31][0][][] */ 20,26,49,-7,-33,-11,-127,12, 
  /* [32][0][][] */ 18,-17,22,127,-28,-88,-44,-89, 
  /* [33][0][][] */ 109,-92,-47,102,-127,92,-46,-36, 
  /* [34][0][][] */ 12,-89,11,-58,-115,127,38,-31, 
  /* [35][0][][] */ 22,127,82,20,18,20,-56,2, 
  /* [36][0][][] */ 23,107,-77,-127,-92,18,77,-86, 
  /* [37][0][][] */ 42,-5,42,16,45,127,62,22, 
  /* [38][0][][] */ -65,-92,96,53,22,-6,-58,127, 
  /* [39][0][][] */ 9,33,127,-54,-30,39,-31,27, 
  /* [40][0][][] */ 8,-1,19,-2,7,-28,127,6, 
  /* [41][0][][] */ -18,-8,-66,-127,-74,-83,-64,37, 
  /* [42][0][][] */ 34,-9,56,-38,-127,-58,-48,30, 
  /* [43][0][][] */ 80,-16,39,35,-79,-127,119,24, 
  /* [44][0][][] */ -73,-127,-17,-72,2,15,-1,-124, 
  /* [45][0][][] */ 19,112,68,69,50,127,-56,37, 
  /* [46][0][][] */ -116,-9,-3,72,109,54,-97,127, 
  /* [47][0][][] */ 14,75,-45,-41,-8,-40,24,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0031011023093014956, 0.0038113051559776068, 0.0038667067419737577, 0.002606705529615283, 0.0030276770703494549, 0.0016645393334329128, 0.0035501145757734776, 0.00085886922897771001, 0.0018313202308490872, 0.0036026372108608484, 0.0017557238461449742, 0.0020935810171067715, 0.0034133230801671743, 0.001274403533898294, 0.002088817534968257, 0.002917049452662468, 0.0010059397900477052, 0.0017997055547311902, 0.0042068036273121834, 0.0029336169827729464, 0.0018699980573728681, 0.0040518227033317089, 0.0025867542717605829, 0.0014093517092987895, 0.0029356630984693766, 0.0013729213969781995, 0.0035406583920121193, 0.0036596544086933136, 0.00095083552878350019, 0.005414946936070919, 0.0020181850995868444, 0.0037988165859133005, 0.0037357311230152845, 0.0016454941360279918, 0.0012203765800222754, 0.0038587606977671385, 0.002283772686496377, 0.0026750420220196247, 0.0030588225927203894, 0.0024273514281958342, 0.0038469666615128517, 0.0038219897542148829, 0.0022619233932346106, 0.0027521979063749313, 0.00089918368030339479, 0.0023729975800961256, 0.0016113913152366877, 0.004166856873780489, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { 15509, 3910, 14758, -5141, -15570, 8779, 4210, 13759, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 7.8275887062773108e-05, 0.00010050050332210958, 7.6372562034521252e-05, 7.5818657933268696e-05, 0.00010170914902118966, 0.00010216488590231165, 6.4565094362478703e-05, 8.8039923866745085e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-12,-12,-10,-23,-82,-31,-9,57,-38,-54,-26,-19,78,-54,5,14,-9,7,17,29,-30,3,11,37,5,4,32,11,59,-42,-84,17,-61,12,-26,34,-37,-10,29,-60,-22,-25,-43,-78,-82,4,-24, 
  /* [1][0][][] */ -72,2,92,-54,63,40,50,27,-16,15,-2,101,22,-34,-127,-58,-103,-80,39,-19,8,93,-46,7,21,-104,37,93,41,-23,30,48,47,36,5,35,-72,-22,20,10,0,-34,-94,20,-13,-45,-92,35, 
  /* [2][0][][] */ 88,35,-30,-66,-52,-8,-46,-90,31,28,-75,-52,-12,58,-53,45,-5,73,3,11,57,47,-2,-1,-127,21,25,-54,-2,31,36,-86,12,-37,16,18,-48,-53,16,33,-113,-106,-31,-52,-48,-95,32,3, 
  /* [3][0][][] */ 14,-2,19,23,-103,-26,-10,46,-33,-57,-7,72,15,-16,-75,-42,-26,31,1,-58,-40,127,14,-57,22,46,48,-47,19,13,9,24,30,20,10,-8,46,51,23,-1,39,-20,21,-49,-17,6,22,34, 
  /* [4][0][][] */ -46,22,-117,16,-8,96,23,43,-16,127,39,67,24,-75,-28,28,-19,-3,-5,34,-15,42,-74,26,11,-5,51,-10,44,-66,119,96,54,46,12,-47,-88,23,2,-24,43,18,38,39,50,39,24,71, 
  /* [5][0][][] */ -26,3,34,-7,58,-64,-36,-31,-30,-62,9,-29,40,5,-13,1,24,-5,5,29,15,64,22,17,15,-1,-36,-8,-33,-1,-127,-9,-41,-10,27,-19,-5,-30,3,-15,-12,-1,-30,-9,30,33,-3,42, 
  /* [6][0][][] */ 8,58,-2,74,-15,41,-58,55,-79,-34,53,20,47,9,37,17,-1,-48,-43,40,-2,68,33,-34,-87,-8,-42,25,-94,-11,-94,4,6,-32,-42,-59,127,-4,-56,-56,51,33,42,-51,-79,-17,-58,-41, 
  /* [7][0][][] */ -48,20,-78,31,-17,-1,-4,-1,-57,-45,34,72,42,11,-70,-73,-58,82,-1,-8,42,13,37,-34,-37,100,-55,-107,-45,-13,-109,-11,-16,-30,-56,-5,-32,-38,-49,-21,-25,42,55,-18,-54,-54,127,-53, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0033267252147197723, 0.0042712711729109287, 0.003245833795517683, 0.0032222927547991276, 0.0043226387351751328, 0.0043420074507594109, 0.002744016470387578, 0.003741696709766984, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 5798, 6549, 9502, 8965, 35098, -2118, -1260, -290, -1467, -10655, -2531, -1642, 14228, 7246, 4444, -1115, 7053, 5661, 731, -2989, 4372, -2120, 7279, -801, 4178, 8577, 541, -284, -297, 1915, 9122, 3510, 1222, -1553, 1988, -1019, 7621, 5162, -1603, -309, 5310, -6302, 4240, 900, -487, 1868, 5240, -2242, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00028085088706575334, 0.00014688268129248172, 8.2700767961796373e-05, 0.00015391396300401539, 5.6362798204645514e-05, 0.00041372093255631626, 0.00024752289755269885, 0.00030880534905008972, 0.00037367874756455421, 0.00026712584076449275, 0.00014042152906768024, 0.00033601466566324234, 8.0187652201857418e-05, 0.00015847911708988249, 0.00041123133269138634, 0.00012955001147929579, 0.00014426527195610106, 0.00017166575707960874, 0.00047845824155956507, 0.00029253042885102332, 0.00014165567699819803, 0.00017404089157935232, 0.00013522201334126294, 0.00016959666390903294, 0.0001783366606105119, 0.00019481300842016935, 0.00039669443503953516, 0.00026800099294632673, 0.00034357773256488144, 0.00027780543314293027, 0.00017947844753507525, 0.00033442079438827932, 0.00027851981576532125, 0.00090364471543580294, 0.00014014255430083722, 0.00018660203204490244, 0.00023316143779084086, 0.00017085293075069785, 0.00018000083218794316, 0.00029804121004417539, 0.00020024314289912581, 0.00018414031364955008, 0.00026075955247506499, 0.00051438418449833989, 0.00034742048592306674, 0.00039838839438743889, 0.00024901246069930494, 0.00022956599423196167, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -99,-19,45,-12,-127,16,-110,4,-5,127,55,13,-60,70,10,36,37,26,16,-21,-118,-22,26,57,-28,12,-8,-66,23,-124,85,37,-12,28,38,-34,17,-127,-18,127,-63,38,-9,-8,-11,6,9,-17, 16,-127,-7,22,-65,26,-114,-2,30,31,127,68,-65,-75,-92,-50,-10,-46,103,60,15,67,-63,29,-85,-4,-2,-127,7,-80,-29,-127,-10,19,-50,-127,-22,-2,21,92,127,-18,-12,127,10,-127,7,-29, -127,8,58,1,-99,24,-69,-1,-2,93,-12,-8,-72,72,24,61,-33,-2,10,-39,-92,-31,62,25,12,-11,6,-45,-39,-127,47,-10,2,13,-54,-30,16,-101,22,95,-58,28,-9,4,7,11,11,47, 
  /* [0][1][][] */ 59,-44,22,-3,-85,4,62,-12,-54,64,30,41,-68,-37,-80,127,-47,8,45,127,5,45,-120,-15,-31,-99,-18,-64,127,19,36,118,-127,0,96,8,-4,36,-99,-113,51,-22,12,10,-127,42,6,-52, 115,-61,-127,-127,50,127,-4,127,-127,-94,-29,127,-65,-127,-127,-120,-27,-127,-78,63,127,127,-86,94,-127,65,-127,97,-57,-58,-127,-97,8,127,-127,117,-127,-64,127,-43,-54,127,-127,-77,102,76,-127,-66, 47,-24,101,-2,-52,-32,16,-22,-31,18,3,-21,-42,-79,-67,121,-127,-43,23,109,-22,51,-10,-127,29,-74,125,0,-51,109,-50,95,103,-39,-56,24,-11,-12,1,-54,29,-22,-9,-9,1,30,-14,127, 
  /* [0][2][][] */ -107,-45,33,-25,-52,14,82,3,91,51,69,18,-55,74,35,-8,57,52,2,-14,-60,-29,44,34,-24,-8,-5,5,6,29,79,-3,-8,16,72,21,20,-44,-36,4,-37,16,5,-16,-11,-7,-8,-1, -69,-123,63,-57,-69,-13,127,2,91,36,93,-35,125,-107,-71,-23,-57,40,-127,19,-71,15,-127,-8,19,-127,-5,25,3,60,12,-85,-8,-40,-22,36,-11,55,53,-52,1,18,27,-46,27,-26,0,8, -76,-1,48,-5,-75,31,53,0,48,13,15,27,-127,50,44,6,-51,53,-3,-25,-45,-28,109,-62,-3,-16,9,27,-16,36,27,-46,-10,24,-31,20,21,-51,6,-34,-29,40,21,-2,-6,7,8,2, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.01193616259843111, 0.0062425136566162109, 0.0035147825255990028, 0.0065413434058427811, 0.0023954189382493496, 0.01758313924074173, 0.010519723407924175, 0.013124226592481136, 0.01588134653866291, 0.011352848261594772, 0.005967914592474699, 0.014280622825026512, 0.0034079751931130886, 0.0067353625781834126, 0.017477331683039665, 0.0055058752186596394, 0.0061312741599977016, 0.0072957943193614483, 0.020334474742412567, 0.012432542629539967, 0.0060203662142157555, 0.0073967375792562962, 0.0057469354942440987, 0.0072078579105436802, 0.0075793080031871796, 0.0082795526832342148, 0.016859512776136398, 0.011390041559934616, 0.014602053910493851, 0.01180673111230135, 0.0076278336346149445, 0.014212883077561855, 0.011837092228233814, 0.038404900580644608, 0.0059560583904385567, 0.007930586114525795, 0.0099093606695532799, 0.007261249702423811, 0.0076500349678099155, 0.012666751630604267, 0.0085103334859013557, 0.0078259631991386414, 0.011082280427217484, 0.021861327812075615, 0.014765370637178421, 0.016931505873799324, 0.010583029128611088, 0.0097565548494458199, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 11131, -344, 1454, 1340, 2887, 789, 6613, -465, 11337, 8803, -812, -205, 1508, 1249, 199, 2484, 2659, 2765, -1772, -1346, 2471, 2349, 2794, 1, 3820, 2329, 4939, -710, 5116, -299, 6216, 8107, 4598, 688, 1171, 1689, 3027, 1435, 1279, 1734, -234, 3442, 2012, 4371, 5134, 2271, 142, 2133, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 9.1571419034153223e-05, 0.00032569465111009777, 0.00030660972697660327, 0.00024618819588795304, 0.00024766373098827899, 0.00017234591359738261, 9.282468818128109e-05, 0.00027702254010364413, 8.4891522419638932e-05, 8.4270533989183605e-05, 0.00017557325190864503, 0.00018373318016529083, 0.00033563992474228144, 0.00025522633222863078, 0.00011256684956606477, 0.0002601097512524575, 0.00019528788106981665, 0.00025348199415020645, 0.00021630414994433522, 0.00010423072671983391, 0.00027786928694695234, 0.0001385675132041797, 0.00023140826669987291, 0.00045760811190120876, 0.00016857754962984473, 0.00029577067471109331, 0.00018245010869577527, 0.00040558856562711298, 0.00017840199870988727, 0.00014243280747905374, 0.00012415702803991735, 8.1055404734797776e-05, 0.0001944448595168069, 0.00012322160182520747, 0.00027739600045606494, 0.00038072559982538223, 0.00021324900444597006, 0.00027127296198159456, 0.00038219642010517418, 0.00013126613339409232, 0.00028479623142629862, 0.00020093645434826612, 0.00036654947325587273, 0.00015960496966727078, 0.00017947578453458846, 0.00012752598559018224, 0.00026875847834162414, 0.00030770903686061502, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 63,-84,37,2,54,-127,0,-78, 
  /* [1][0][][] */ -52,-51,-75,69,-127,54,-29,21, 
  /* [2][0][][] */ 60,-48,49,-19,127,-21,-5,76, 
  /* [3][0][][] */ -15,127,-8,111,5,9,-54,-51, 
  /* [4][0][][] */ -36,127,77,-42,40,15,-71,15, 
  /* [5][0][][] */ -84,23,-3,16,127,-26,85,-11, 
  /* [6][0][][] */ 112,-74,114,16,27,127,86,-18, 
  /* [7][0][][] */ -30,-56,57,59,84,16,-54,127, 
  /* [8][0][][] */ 20,-24,-38,-87,-21,127,-71,19, 
  /* [9][0][][] */ -127,23,-98,2,109,-38,-55,12, 
  /* [10][0][][] */ -14,-95,57,25,-25,-91,-127,-96, 
  /* [11][0][][] */ 42,85,-15,-5,-22,-79,27,127, 
  /* [12][0][][] */ 36,-40,-87,53,-92,127,40,74, 
  /* [13][0][][] */ -38,-32,-127,24,-79,82,18,45, 
  /* [14][0][][] */ -61,127,-77,82,85,42,-18,74, 
  /* [15][0][][] */ -90,-11,-13,-1,86,72,-64,-127, 
  /* [16][0][][] */ 92,-127,-111,-23,-48,88,-46,-5, 
  /* [17][0][][] */ 25,126,-110,-54,-81,42,70,-127, 
  /* [18][0][][] */ -75,-115,45,26,127,-70,-37,73, 
  /* [19][0][][] */ -61,113,-40,54,18,-125,-127,64, 
  /* [20][0][][] */ 77,-14,30,-59,2,-58,28,127, 
  /* [21][0][][] */ 66,-46,127,103,-43,112,84,-25, 
  /* [22][0][][] */ -21,91,12,4,127,-53,-108,-61, 
  /* [23][0][][] */ 29,-40,26,127,-2,-58,60,-31, 
  /* [24][0][][] */ -28,55,127,-74,-25,-21,11,-30, 
  /* [25][0][][] */ -48,-127,99,66,35,-1,-28,127, 
  /* [26][0][][] */ 64,-23,-127,-95,-95,56,27,104, 
  /* [27][0][][] */ 46,125,-104,-57,-48,24,32,-127, 
  /* [28][0][][] */ -23,50,-52,-91,-15,-43,-127,-41, 
  /* [29][0][][] */ -109,54,-127,-54,119,60,-40,-8, 
  /* [30][0][][] */ 86,-57,16,-26,-119,119,127,63, 
  /* [31][0][][] */ -73,94,-45,89,127,-95,-20,5, 
  /* [32][0][][] */ 8,87,58,-62,127,-46,-15,-90, 
  /* [33][0][][] */ -127,51,-121,11,50,31,-29,5, 
  /* [34][0][][] */ 57,-16,65,-89,-41,-127,61,101, 
  /* [35][0][][] */ -127,29,44,-24,-76,11,5,6, 
  /* [36][0][][] */ -2,-48,-41,42,-15,10,127,38, 
  /* [37][0][][] */ -27,-28,-76,-46,-26,-127,-68,-7, 
  /* [38][0][][] */ -102,24,26,19,-127,16,32,9, 
  /* [39][0][][] */ -28,-60,26,-23,-30,92,-127,-109, 
  /* [40][0][][] */ 74,-127,25,64,-60,-51,114,56, 
  /* [41][0][][] */ 26,127,87,43,38,35,-93,-34, 
  /* [42][0][][] */ 35,127,-32,-13,-32,21,-14,-51, 
  /* [43][0][][] */ -71,64,-83,-127,23,18,-59,64, 
  /* [44][0][][] */ -52,24,-26,16,40,127,-6,-5, 
  /* [45][0][][] */ -7,84,-96,-31,-79,-100,-14,127, 
  /* [46][0][][] */ 32,105,-98,-32,-64,31,6,-127, 
  /* [47][0][][] */ 19,10,-5,-59,-70,-127,-31,38, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0012476281262934208, 0.0044374740682542324, 0.0041774488054215908, 0.0033542269375175238, 0.0033743304666131735, 0.0023481519892811775, 0.0012647034600377083, 0.0037743339780718088, 0.0011566168395802379, 0.0011481561232358217, 0.0023921232204884291, 0.0025032993871718645, 0.0045729749836027622, 0.0034773682709783316, 0.0015336833894252777, 0.0035439031198620796, 0.0026607280597090721, 0.0034536023158580065, 0.0029470673762261868, 0.001420106622390449, 0.0037858705036342144, 0.0018879331182688475, 0.0031528554391115904, 0.0062347482889890671, 0.0022968093398958445, 0.0040297703817486763, 0.0024858179967850447, 0.0055260001681745052, 0.0024306639097630978, 0.0019405964994803071, 0.0016915955347940326, 0.001104351133108139, 0.0026492422912269831, 0.0016788506181910634, 0.0037794222589582205, 0.0051872511394321918, 0.0029054419137537479, 0.0036959978751838207, 0.0052072904072701931, 0.0017884544795379043, 0.0038802477065473795, 0.0027376879006624222, 0.0049941064789891243, 0.0021745611447840929, 0.0024452938232570887, 0.0017374963499605656, 0.003661738708615303, 0.0041924263350665569, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 5602, -2173, -2207, 3694, 1453, -17551, -3326, -10592, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.0002140063006663695, 0.00012752988550346345, 0.00025031084078364074, 0.00014394770551007241, 0.00023836168111301959, 8.0226025602314621e-05, 0.00012118682207074016, 0.0001304661127505824, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -24,20,3,29,-19,11,0,29,-48,-5,-34,-2,-15,13,36,4,-46,-19,29,-18,-25,127,-20,-18,-22,-37,5,31,-33,35,9,-25,-10,20,32,37,21,4,31,-21,3,-33,-17,-12,-17,25,23,13, 
  /* [1][0][][] */ 8,56,5,46,29,37,46,116,-47,-46,80,-29,-40,-33,29,-21,-19,0,36,4,30,-127,-5,-69,6,12,-16,15,-8,9,-33,-57,-40,4,24,-9,17,65,72,-17,22,19,40,-27,-33,45,7,49, 
  /* [2][0][][] */ -3,24,-1,30,27,16,-31,33,23,10,62,17,5,-15,30,-55,20,27,-6,8,-18,127,7,-13,21,-42,-4,0,-22,31,-22,-60,-15,7,16,-41,31,-14,-41,-27,27,-12,-6,-50,-36,31,11,19, 
  /* [3][0][][] */ -40,47,-8,6,-18,32,60,-2,4,5,3,13,-18,34,41,15,-13,0,8,0,39,-81,-9,18,-15,4,-127,27,-34,-28,-13,5,-41,-16,9,26,32,-14,-40,-29,4,-14,12,15,17,-12,41,19, 
  /* [4][0][][] */ 23,4,-42,7,18,-5,21,-9,-57,13,1,27,9,-9,-15,19,-29,36,-20,-7,2,-127,-7,-1,35,28,36,-44,42,-4,4,12,-10,53,33,-6,-22,18,-5,8,-14,-66,-88,24,36,39,1,-12, 
  /* [5][0][][] */ -6,54,82,3,0,30,21,-104,70,-36,-15,-4,97,-64,1,17,19,-37,38,4,-26,127,20,9,88,7,84,46,95,60,-1,-34,-73,-45,103,39,-51,-50,1,-106,11,-19,61,68,-47,-41,-25,-32, 
  /* [6][0][][] */ 63,-5,-25,17,44,-21,46,-47,45,39,0,-32,-15,44,24,-76,22,-127,-27,-18,33,-16,-8,28,-45,-36,48,-17,62,-36,126,51,49,48,33,-51,-65,21,64,-30,-32,23,-78,67,40,8,42,-52, 
  /* [7][0][][] */ -12,50,51,58,-1,16,67,102,54,31,3,75,-60,-8,35,-15,91,-17,-36,-14,-3,-127,0,-100,-76,80,59,18,7,31,21,-22,22,-23,19,25,-21,106,-98,-33,12,-5,28,-12,-52,4,44,14, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0090952673926949501, 0.0054200198501348495, 0.010638209991157055, 0.0061177774332463741, 0.01013037096709013, 0.003409606171771884, 0.0051504396833479404, 0.0055448096245527267, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 22627, 22256, 9377, 20114, 5544, 9503, 20501, 7858, 45269, -1661, -480, 19706, 14445, -4249, 8844, 197, 1287, 31169, 18050, -361, 3995, -8448, 451, 1597, 47011, 34677, 1971, 236, -1397, 12927, -1986, 1070, -15275, 18405, 30810, 27214, 21846, 22448, -275, -481, 7072, 37766, -889, -478, -383, -2256, 20270, 11348, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 5.0072289013769478e-05, 7.6008080213796347e-05, 9.9072538432665169e-05, 6.7999899329151958e-05, 0.00013318688434083015, 9.8514668934512883e-05, 0.00014959962572902441, 0.0001248889893759042, 4.3285795982228592e-05, 8.552065264666453e-05, 7.6513955718837678e-05, 5.6606811995152384e-05, 0.00018189629190601408, 5.7898945669876412e-05, 8.7673761299811304e-05, 8.4162034909240901e-05, 4.1202627471648157e-05, 7.0671063440386206e-05, 5.9605528804240748e-05, 0.00011913817434106022, 7.4003532063215971e-05, 0.00026857576449401677, 0.00014354176528286189, 9.8881653684657067e-05, 3.6129986256128177e-05, 6.936427962500602e-05, 7.5581199780572206e-05, 0.00010904046212090179, 5.9608013543765992e-05, 0.00010929611744359136, 0.00018311699386686087, 0.00021170044783502817, 6.9669578806497157e-05, 5.903647979721427e-05, 7.6848897151648998e-05, 0.00012388330651447177, 0.00010202376870438457, 0.0001442552893422544, 0.00014699107850901783, 8.6252621258608997e-05, 0.00016474146104883403, 4.0802380681270733e-05, 8.8896129454951733e-05, 5.4922995332162827e-05, 0.00041018860065378249, 0.00012287110439501703, 7.5793112046085298e-05, 9.0648987679742277e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -52,-80,-43,-61,-39,33,-62,-56,-61,61,42,-88,-29,20,-93,70,88,-79,-52,109,36,58,-48,85,-81,-63,59,67,59,-50,92,62,51,-64,-82,-33,-127,-68,120,60,-35,-22,37,90,76,102,-45,-63, -82,-120,-79,-107,-127,28,-81,-100,-66,101,78,-109,-62,66,-127,99,98,-112,-99,-8,78,75,87,111,-81,-91,106,102,100,-79,95,74,80,-89,-100,-57,-112,-78,127,78,-77,-63,55,107,75,113,-89,-98, -35,-42,-37,-63,-82,31,-69,-44,-44,57,49,-54,-26,77,-71,38,46,-47,-30,-49,60,-127,-67,39,-32,-38,40,28,44,-27,60,40,40,-53,-48,-29,-65,-46,27,28,-32,-33,43,63,37,67,-40,-34, 
  /* [0][1][][] */ -70,-96,-73,-87,-70,-8,-91,-74,-97,93,67,-94,-63,61,-121,82,109,-89,-71,127,80,76,-63,102,-115,-82,68,106,76,-80,102,83,71,-106,-104,-65,-102,-89,103,101,-85,-63,72,85,127,127,-66,-88, -127,-127,-127,-127,-119,-127,-127,-127,-127,127,127,-127,-127,127,-88,127,127,-127,-127,-55,127,80,127,127,-127,-127,127,127,127,-127,127,127,127,-127,-127,-127,-95,-127,117,127,-127,-127,127,127,127,108,-127,-127, -54,-34,-77,-90,-99,-111,-107,-70,-65,81,67,-79,-59,110,-63,54,92,-59,-51,-116,85,-125,-80,54,-42,-66,36,38,70,-55,78,61,64,-88,-63,-72,-55,-75,44,50,-69,-60,73,81,50,33,-55,-51, 
  /* [0][2][][] */ -26,-19,-33,-35,-49,-15,-55,-37,-49,61,28,-24,-19,3,-78,38,35,-25,-26,38,42,32,-17,31,-49,-31,13,34,32,-21,44,38,52,-58,-59,-48,-17,-39,-2,57,-91,-49,41,35,64,23,-37,-33, -57,-14,-71,-61,-78,-121,-69,-56,-63,87,43,-55,-41,58,-69,36,49,-30,-39,-57,76,13,35,23,-57,-62,33,52,57,-57,57,64,80,-90,-87,-80,-20,-49,5,68,-97,-72,71,66,67,-3,-71,-46, -27,23,-50,-46,-42,-109,-73,-40,-26,64,25,-46,-11,50,4,16,51,-12,-29,-70,42,-52,-32,20,-9,-40,2,19,35,-28,33,38,34,-62,-66,-56,4,-36,12,38,-66,-34,40,32,25,1,-21,-26, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0021280723158270121, 0.0032303433399647474, 0.004210582934319973, 0.0028899956960231066, 0.0056604421697556973, 0.0041868733242154121, 0.006357983686029911, 0.0053077819757163525, 0.0018396462546661496, 0.0036346276756376028, 0.0032518429215997458, 0.0024057894479483366, 0.0077305925078690052, 0.0024607051163911819, 0.0037261347752064466, 0.0035768863745033741, 0.0017511117039248347, 0.0030035201925784349, 0.0025332348886877298, 0.0050633721984922886, 0.0031451499089598656, 0.011414469219744205, 0.0061005246825516224, 0.0042024701833724976, 0.0015355243813246489, 0.0029479819349944592, 0.0032122009433805943, 0.0046342196874320507, 0.0025333405937999487, 0.0046450849622488022, 0.0077824718318879604, 0.0089972689747810364, 0.002960957121104002, 0.0025090503040701151, 0.0032660781871527433, 0.005265040323138237, 0.0043360101990401745, 0.0061308499425649643, 0.0062471209093928337, 0.00366573641076684, 0.0070015122182667255, 0.0017341012135148048, 0.0037780855782330036, 0.0023342273198068142, 0.017433015629649162, 0.0052220220677554607, 0.0032212072983384132, 0.0038525818381458521, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 680, 2149, 1467, -155, -742, 172, 6292, 2556, 1259, -2666, 1374, -56, 4617, 65, 806, -1631, -63, 3720, 763, 1043, -757, 25463, 1290, -1165, 859, 4103, 1863, -1350, 149, 139, -2003, -1320, 2853, 633, 5393, 11520, 3289, 4887, -2585, -1458, -735, 1372, 1022, 500, -1656, -1866, 2630, 996, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0003165316884405911, 0.00030408924794755876, 0.00030573975527659059, 0.00044364726636558771, 0.00030056806281208992, 0.00028465868672356009, 0.00013811902317684144, 0.00022753006487619132, 0.00036351568996906281, 0.00020681718888226897, 0.00029479971271939576, 0.00038036252954043448, 0.00015079163131304085, 0.00053972151363268495, 0.00049177778419107199, 0.00022561049263458699, 0.0006066401838324964, 0.00018238299526274204, 0.00030647753737866879, 0.00031222618417814374, 0.00031940147164277732, 6.3153827795758843e-05, 0.0003117535961791873, 0.00023473087640013546, 0.00030507755582220852, 0.00019949974375776947, 0.00030210803379304707, 0.0003293413610663265, 0.00040721890400163829, 0.00046691647730767727, 0.00023750540276523679, 0.00024979037698358297, 0.00025317701511085033, 0.00049064052291214466, 0.0001672722864896059, 8.9158420450985432e-05, 0.00025770417414605618, 0.0001743633474688977, 0.00022770275245420635, 0.00022798142163082957, 0.00037570876884274185, 0.00036074811941944063, 0.00030548253562301397, 0.00037822671583853662, 0.00026501377578824759, 0.00025329572963528335, 0.00023428004351444542, 0.00021741590171586722, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -21,57,-60,54,28,127,40,29, 
  /* [1][0][][] */ 44,-127,-92,-32,-35,51,54,-33, 
  /* [2][0][][] */ -57,49,-49,-117,-46,-127,-40,-74, 
  /* [3][0][][] */ -14,127,63,28,1,-83,-25,28, 
  /* [4][0][][] */ -102,45,-127,82,12,-26,-42,-67, 
  /* [5][0][][] */ 84,-100,-127,32,13,-24,80,-46, 
  /* [6][0][][] */ -8,-93,-55,24,-127,-54,-47,75, 
  /* [7][0][][] */ -23,-44,-12,-42,48,1,-31,127, 
  /* [8][0][][] */ 10,32,-91,-93,42,-29,-127,-85, 
  /* [9][0][][] */ -127,60,-11,106,-11,68,101,-5, 
  /* [10][0][][] */ -24,-12,88,-127,-31,65,15,36, 
  /* [11][0][][] */ 106,-16,110,38,-38,48,85,127, 
  /* [12][0][][] */ 51,39,32,-50,70,115,89,-127, 
  /* [13][0][][] */ 32,51,-36,59,-9,-127,-37,53, 
  /* [14][0][][] */ 10,-127,-28,-29,8,67,32,-31, 
  /* [15][0][][] */ -109,-7,2,-78,61,127,-78,-26, 
  /* [16][0][][] */ 16,-43,119,14,-25,24,127,77, 
  /* [17][0][][] */ 61,20,57,24,-6,-82,-38,-127, 
  /* [18][0][][] */ -124,14,-82,-14,-16,-127,24,-92, 
  /* [19][0][][] */ 69,14,114,-22,-62,36,98,127, 
  /* [20][0][][] */ 17,127,50,-6,25,43,46,10, 
  /* [21][0][][] */ -38,30,27,-107,-63,127,-9,-12, 
  /* [22][0][][] */ 36,3,86,-10,-50,14,127,90, 
  /* [23][0][][] */ -72,120,53,43,-104,-98,-119,127, 
  /* [24][0][][] */ -18,-6,100,22,-114,127,-7,-96, 
  /* [25][0][][] */ -40,17,69,21,-127,47,-73,22, 
  /* [26][0][][] */ -49,-127,38,-42,17,41,-13,-15, 
  /* [27][0][][] */ -22,60,27,53,-22,127,-26,-10, 
  /* [28][0][][] */ 10,-127,63,17,64,124,33,44, 
  /* [29][0][][] */ 15,127,-23,32,-65,-59,-14,14, 
  /* [30][0][][] */ -54,75,104,89,-127,-61,-44,-107, 
  /* [31][0][][] */ 12,72,26,58,-49,-13,18,-127, 
  /* [32][0][][] */ -24,-35,-59,66,-127,-41,-54,5, 
  /* [33][0][][] */ 86,21,72,54,-29,61,55,127, 
  /* [34][0][][] */ 124,10,-127,-38,-53,-10,76,35, 
  /* [35][0][][] */ 127,102,104,-119,-57,-94,31,106, 
  /* [36][0][][] */ -48,-103,127,30,54,58,1,-35, 
  /* [37][0][][] */ -3,10,-24,0,-13,-55,-44,127, 
  /* [38][0][][] */ 127,3,50,9,0,18,-61,32, 
  /* [39][0][][] */ 59,92,-112,-127,-107,86,47,-67, 
  /* [40][0][][] */ -53,127,-35,71,-53,-32,-59,-20, 
  /* [41][0][][] */ -127,38,-28,-51,59,43,0,-62, 
  /* [42][0][][] */ 46,-34,-5,-22,-24,127,16,84, 
  /* [43][0][][] */ -77,45,127,18,76,22,-40,6, 
  /* [44][0][][] */ 6,127,-3,32,-47,-60,-17,-4, 
  /* [45][0][][] */ -73,85,68,-127,-78,14,-65,-54, 
  /* [46][0][][] */ 39,-41,-15,24,29,7,-127,68, 
  /* [47][0][][] */ -99,-127,31,69,53,-86,14,87, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00302732246927917, 0.00290832226164639, 0.0029241079464554787, 0.0042430609464645386, 0.0028746456373482943, 0.0027224875520914793, 0.0013209761818870902, 0.0021761071402579546, 0.0034766793251037598, 0.00197800830937922, 0.0028194768819957972, 0.0036378032527863979, 0.0014421774540096521, 0.0051619191654026508, 0.0047033834271132946, 0.0021577482111752033, 0.0058019319549202919, 0.0017443186370655894, 0.0029311641119420528, 0.0029861442744731903, 0.0030547690112143755, 0.0006040058215148747, 0.0029816245660185814, 0.002244975883513689, 0.0029177744872868061, 0.001908023958094418, 0.0028893738053739071, 0.0031498346943408251, 0.0038946585264056921, 0.0044656088575720787, 0.0022715115919709206, 0.0023890056181699038, 0.0024213956203311682, 0.0046925065107643604, 0.0015997991431504488, 0.00085271487478166819, 0.0024646935053169727, 0.0016676184022799134, 0.0021777586080133915, 0.0021804238203912973, 0.0035932944156229496, 0.0034502102062106133, 0.0029216478578746319, 0.0036173760890960693, 0.0025346027687191963, 0.0024225309025496244, 0.002240664092823863, 0.0020793748553842306, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 7243, -11948, -860, 6110, 1955, -5665, 3280, 7892, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00022937776520848274, 0.00016142587992362678, 0.00010298995766788721, 0.00016430628602392972, 0.00025038560852408409, 0.00012346144649200141, 0.00020092719933018088, 9.5031740784179419e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -26,-8,-10,-32,-68,-16,-4,-21,64,7,10,-4,10,15,-20,2,-33,13,-18,-14,-3,10,-23,1,19,-9,83,9,-15,-86,-15,10,-2,35,127,-11,-27,-41,26,-39,24,4,-3,-19,-19,0,-19,-87, 
  /* [1][0][][] */ 16,-32,-12,59,1,-9,20,37,65,75,41,-48,-51,71,6,1,-5,-31,18,-20,-63,40,-46,30,88,11,-30,35,23,2,127,22,-14,-38,-34,-3,-17,7,-24,-14,-1,-20,2,27,-4,37,30,20, 
  /* [2][0][][] */ -65,3,-75,119,-63,-66,27,-60,-77,42,54,-97,-25,-5,-49,10,122,34,-70,-49,-67,-22,-40,21,80,-32,126,-11,84,-17,-70,21,-3,-24,57,-1,-47,29,-1,-103,62,-69,-56,-127,-20,-70,-71,106, 
  /* [3][0][][] */ 24,-48,13,-40,37,-20,-10,-73,47,-62,1,-28,-85,-76,-19,11,10,-10,40,-41,-8,31,-81,4,73,-37,49,13,7,0,-3,-23,-39,35,21,-31,-51,24,1,-5,127,17,-50,38,-52,50,-10,-52, 
  /* [4][0][][] */ 24,8,16,16,10,35,-9,-7,45,23,6,-46,-2,6,-67,22,-2,19,24,-22,-23,28,5,42,35,6,-28,5,48,-11,-19,29,-7,-2,34,22,-127,2,54,13,14,-8,1,16,-36,49,-30,-95, 
  /* [5][0][][] */ -38,-96,31,114,-30,-3,-51,99,-94,80,50,28,-77,24,65,-39,-14,30,25,-1,-5,32,41,48,-50,11,-25,39,-44,-96,39,25,-103,-47,-28,2,127,1,-22,15,-36,-16,86,98,21,39,43,46, 
  /* [6][0][][] */ 84,-2,-15,-13,80,-25,-29,-63,41,24,33,-28,-7,8,6,2,-1,-2,-11,-25,-34,17,13,23,55,-55,46,0,-24,103,-18,10,43,25,-127,-16,-89,-34,24,-65,-11,-6,-8,-92,-1,4,-19,-11, 
  /* [7][0][][] */ -37,-81,55,-52,11,127,49,-57,1,-100,-51,-4,2,-25,-61,-5,15,-59,110,70,45,-41,5,-7,-21,8,107,-2,49,19,14,-5,-33,-32,-54,110,-125,98,-39,-38,-55,51,5,-70,23,-15,74,-34, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0097485547885298729, 0.0068605998530983925, 0.0043770731426775455, 0.0069830170832574368, 0.010641387663781643, 0.0052471114322543144, 0.0085394056513905525, 0.004038848914206028, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 9354, 4470, -717, 7110, -208, -1670, 5434, -1028, 1776, 4785, -43, -108, -1815, 12090, 4246, -1248, -6613, -357, -2488, -1235, 10361, 61, -16415, -842, -5422, 3160, 624, 257, -1594, -1349, -7304, -42, 15174, -1652, 1787, 1588, -1834, 603, -1000, 2000, 16689, -74, 1681, -223, 575, -297, -4005, 7135, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00026094206259585917, 0.00027889371267519891, 0.00017691566608846188, 0.00035407749237492681, 0.00040844228351488709, 0.00045481426059268415, 0.00011087416351074353, 0.00024262958322651684, 7.668640319025144e-05, 0.00022700063709635288, 0.0003268626460339874, 0.00047346143401227891, 0.00024010144989006221, 0.0001497789635322988, 0.00022744988382328302, 0.00034105955273844302, 5.7934794313041493e-05, 0.0018876763060688972, 0.00038711406523361802, 0.00016996626800391823, 0.00010996454511769116, 0.00052195962052792311, 0.00011488983000162989, 0.00016867824888322502, 0.00028823138563893735, 0.00022677080414723605, 0.00027159068849869072, 0.00024001997371669859, 0.00046789634507149458, 0.00022659637033939362, 0.00018043526506517082, 0.00051506230374798179, 6.9440262450370938e-05, 0.00035947616561315954, 0.00019450286345090717, 0.00072636402910575271, 0.00014718984311912209, 0.00019784187315963209, 0.00081731268437579274, 0.00035492767347022891, 5.5224503739736974e-05, 0.00034121036878786981, 0.0001875367306638509, 0.00014641933375969529, 0.00030628489912487566, 0.0002469897735863924, 0.00014109510811977088, 0.00039795032353140414, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -65,43,-44,-53,-7,-15,12,-11,-3,-16,5,41,-5,-102,-103,28,127,-1,61,46,-93,-59,105,-109,-6,-54,-7,99,-12,14,41,127,-13,-7,-19,7,-13,-41,-6,18,124,-82,-44,49,71,-105,-33,-5, -10,-127,34,-127,-2,-19,-80,127,64,-77,20,41,15,-127,-102,18,-31,11,-24,-78,-67,-1,75,127,12,-14,11,127,27,-4,12,-100,-87,28,-11,-19,127,-127,54,-9,1,-116,-51,31,95,71,30,-35, -22,-4,15,-24,-3,36,16,67,-5,15,-1,30,23,37,-85,30,81,12,-23,20,-119,47,70,19,-4,66,2,-50,-22,-1,14,-35,-42,6,-3,6,-27,126,-13,12,81,-56,20,-28,63,40,-44,-14, 
  /* [0][1][][] */ -34,-24,-127,-13,-29,25,2,5,32,-65,-5,-105,-29,-56,-127,127,106,4,127,92,-9,127,124,117,6,-64,-39,0,47,-35,43,-105,0,-23,-60,4,-3,-101,46,19,94,127,-15,-12,-69,127,62,-34, -127,44,123,120,127,-118,-127,-8,-19,-127,-127,-127,127,-23,-5,43,23,-127,-93,-127,127,-12,-78,-91,127,-48,127,-61,127,127,-34,75,-127,-127,127,-127,89,-83,-127,-127,25,109,-93,13,-127,-71,127,127, -18,2,5,24,40,127,-19,55,66,11,51,-51,-13,-17,-75,-13,82,49,-3,59,-56,-113,127,-23,10,127,16,-4,44,28,127,28,12,14,56,9,-20,90,52,-9,-1,71,127,-12,-49,-54,58,-9, 
  /* [0][2][][] */ -28,2,-63,-8,-4,-13,22,-11,43,20,3,45,-6,-15,76,7,20,0,60,16,-56,-4,73,35,-1,-63,-13,-81,0,-12,0,-34,-12,58,-12,-8,-67,4,-5,5,29,-9,-35,-61,-19,14,-59,-39, -11,-48,48,-4,-80,-20,-80,-91,127,69,46,53,-11,-47,24,15,87,100,-30,-13,-78,-1,28,-23,3,-60,-68,-91,-16,-32,91,28,-60,53,-73,-20,29,-111,33,41,-127,-13,-108,127,24,-1,48,-52, 17,-13,15,-5,-41,26,20,-91,11,-8,-19,24,4,22,101,-120,55,-23,-21,-10,-56,10,27,1,-1,24,-30,6,-7,-25,24,14,-23,52,-48,-5,-102,97,-19,25,4,-23,43,53,-16,-16,-70,-25, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011090037412941456, 0.011852982454001904, 0.0075189154595136642, 0.015048293396830559, 0.017358796671032906, 0.019329605624079704, 0.0047121518291532993, 0.01031175721436739, 0.0032591721974313259, 0.009647526778280735, 0.01389166247099638, 0.020122110843658447, 0.010204311460256577, 0.0063656060956418514, 0.0096666198223829269, 0.014495030976831913, 0.0024622287601232529, 0.080226242542266846, 0.016452347859740257, 0.0072235660627484322, 0.0046734930947422981, 0.022183282300829887, 0.0048828176222741604, 0.0071688257157802582, 0.012249833904206753, 0.0096377590671181679, 0.011542604304850101, 0.010200848802924156, 0.01988559402525425, 0.0096303457394242287, 0.0076684989035129547, 0.021890148520469666, 0.0029512110631912947, 0.015277736820280552, 0.0082663716748356819, 0.030870471149682999, 0.0062555684708058834, 0.0084082791581749916, 0.034735787659883499, 0.015084425918757915, 0.0023470413871109486, 0.014501440338790417, 0.0079703107476234436, 0.006222821306437254, 0.013017107732594013, 0.010497065261006355, 0.0059965420514345169, 0.016912888735532761, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3238, 994, 3032, 7768, 264, 4502, 1417, 1356, 1733, 4081, 2578, 4292, 2426, 1264, 2849, -66, 184, -2190, 6581, 1999, 1286, 4715, 7737, 412, 2715, 2639, 1579, -79, -1221, 1031, 5686, 2015, 1042, 802, 681, -363, 617, 1641, 33, 1393, 1203, 4430, 1679, 526, 2808, 1053, -131, 9299, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00028625564300455153, 0.00056215131189674139, 0.00024561415193602443, 0.00014400968211703002, 0.0015197148313745856, 0.00016341693117283285, 0.00044579859240911901, 0.00041894157766364515, 0.00031708777532912791, 0.00018690146680455655, 0.00027611473342403769, 0.0001409743563272059, 0.00031679344829171896, 0.00028161494992673397, 0.00020583209698088467, 0.00032870567520149052, 0.00043026008643209934, 0.00034769231569953263, 0.00015409602201543748, 0.00049515831051394343, 0.00054176588309928775, 0.00017456380010116845, 0.00011357799667166546, 0.00040506556979380548, 0.00022162898676469922, 0.00036076278774999082, 0.00042821248644031584, 0.00029282196192070842, 0.00034581206273287535, 0.00087815476581454277, 0.00016882011550478637, 0.00038865217356942594, 0.00059419823810458183, 0.00033841375261545181, 0.00093666644534096122, 0.00032081053359434009, 0.00025517705944366753, 0.00023927030269987881, 0.00026909075677394867, 0.00048355222679674625, 0.00034486860386095941, 0.0001871384447440505, 0.00023509129823651165, 0.0003922077885363251, 0.00020355131709948182, 0.00048802568926475942, 0.00045702650095336139, 0.00010883897630264983, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -127,-14,35,-115,-124,122,-3,-61, 
  /* [1][0][][] */ 87,3,23,-27,2,57,-127,40, 
  /* [2][0][][] */ -40,44,-107,82,-55,127,21,48, 
  /* [3][0][][] */ 97,-29,-34,72,0,-66,13,127, 
  /* [4][0][][] */ -79,-6,-4,14,-21,-35,127,4, 
  /* [5][0][][] */ 50,127,31,47,-122,-59,5,-26, 
  /* [6][0][][] */ -6,-63,34,127,16,-95,-18,34, 
  /* [7][0][][] */ 127,2,97,-3,-78,27,73,115, 
  /* [8][0][][] */ -32,-127,48,47,76,-34,-25,1, 
  /* [9][0][][] */ -83,-104,20,-25,-21,0,-52,127, 
  /* [10][0][][] */ -33,-127,26,109,72,127,11,-20, 
  /* [11][0][][] */ -127,-110,25,-58,59,59,-37,126, 
  /* [12][0][][] */ 78,-19,88,-78,28,-127,76,-1, 
  /* [13][0][][] */ 29,19,25,127,-7,13,32,-58, 
  /* [14][0][][] */ -46,-4,44,6,127,-22,-6,120, 
  /* [15][0][][] */ -76,127,37,84,53,106,-37,84, 
  /* [16][0][][] */ -2,-30,-57,-127,-55,55,15,56, 
  /* [17][0][][] */ 19,127,-2,63,-23,-42,-2,15, 
  /* [18][0][][] */ 15,37,-8,-127,-42,-93,21,-14, 
  /* [19][0][][] */ 31,-84,-127,-105,-84,115,18,-9, 
  /* [20][0][][] */ 29,5,15,-7,127,25,36,-35, 
  /* [21][0][][] */ -127,-64,-58,-93,51,31,46,-13, 
  /* [22][0][][] */ -65,-46,81,126,47,-45,-54,127, 
  /* [23][0][][] */ 22,42,-38,123,127,26,33,105, 
  /* [24][0][][] */ 127,-2,-119,-19,-3,-19,47,-43, 
  /* [25][0][][] */ 6,-10,-46,-21,71,-27,-127,-60, 
  /* [26][0][][] */ 127,9,111,-38,-90,43,57,119, 
  /* [27][0][][] */ 27,-63,-43,127,34,2,-21,-121, 
  /* [28][0][][] */ -62,127,80,69,62,-19,-25,8, 
  /* [29][0][][] */ 0,-1,54,4,-73,2,127,68, 
  /* [30][0][][] */ -52,-75,49,-71,-83,127,67,41, 
  /* [31][0][][] */ 113,17,90,-22,-99,77,83,127, 
  /* [32][0][][] */ -110,-15,-28,34,-21,22,127,22, 
  /* [33][0][][] */ -127,124,53,85,30,24,-84,4, 
  /* [34][0][][] */ 119,6,22,-16,4,49,-127,15, 
  /* [35][0][][] */ 3,-2,19,32,-44,29,12,-127, 
  /* [36][0][][] */ 22,-2,-71,-113,44,-23,27,127, 
  /* [37][0][][] */ 54,-43,-42,-57,-24,38,58,-127, 
  /* [38][0][][] */ 22,127,15,115,-73,-81,-18,-20, 
  /* [39][0][][] */ 107,-6,111,-14,-92,36,127,120, 
  /* [40][0][][] */ -72,-75,127,111,-15,-26,-92,28, 
  /* [41][0][][] */ 37,-11,16,17,20,-74,-18,127, 
  /* [42][0][][] */ 48,-89,-84,-84,-56,74,36,-127, 
  /* [43][0][][] */ 99,-2,121,-30,-89,-20,119,127, 
  /* [44][0][][] */ -111,-95,-78,127,98,-14,-82,33, 
  /* [45][0][][] */ 127,-12,81,-22,-37,29,-7,77, 
  /* [46][0][][] */ 58,-127,-4,94,126,9,68,7, 
  /* [47][0][][] */ 64,127,-17,112,-30,-76,26,-74, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0028954306617379189, 0.0056860717013478279, 0.0024843483697623014, 0.001456635189242661, 0.015371675603091717, 0.0016529364511370659, 0.0045091826468706131, 0.004237527959048748, 0.0032072928734123707, 0.0018904788885265589, 0.0027928568888455629, 0.0014259334420785308, 0.0032043159008026123, 0.0028484908398240805, 0.0020819592755287886, 0.0033248059917241335, 0.0043520131148397923, 0.0035168530885130167, 0.0015586569206789136, 0.0050084483809769154, 0.0054798764176666737, 0.0017656853888183832, 0.0011488235322758555, 0.0040971743874251842, 0.0022417423315346241, 0.0036490587517619133, 0.0043313018977642059, 0.0029618479311466217, 0.003497834550216794, 0.0088823968544602394, 0.0017075889045372605, 0.0039311554282903671, 0.0060102217830717564, 0.0034230018500238657, 0.0094742337241768837, 0.0032449481077492237, 0.0025810757651925087, 0.0024201814085245132, 0.0027218107134103775, 0.004891054704785347, 0.0034882915206253529, 0.0018928758800029755, 0.0023779114708304405, 0.0039671198464930058, 0.0020588894840329885, 0.00493630301207304, 0.0046227509155869484, 0.0011008890578523278, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 4502, 2743, 2878, 10632, 4576, 5388, 2424, -3060, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00012945604976266623, 0.00012093381519662216, 0.00015358594828285277, 0.00015117081056814641, 0.00013295742974150926, 0.00010269881749991328, 9.9441786005627364e-05, 0.00026056639035232365, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -28,36,-30,0,-46,-26,-80,24,8,21,37,38,36,4,-46,11,-45,43,12,-62,30,42,-127,3,-9,10,-31,45,-6,-10,23,21,15,-23,34,18,1,107,-67,-18,-12,20,-30,27,5,7,19,-4, 
  /* [1][0][][] */ -81,-100,-60,6,88,-24,-127,59,-22,-34,-13,-80,-19,76,8,-13,119,-124,-7,-22,-60,-1,-1,-21,27,-9,-33,-49,20,-18,-114,-27,25,-63,-82,-100,41,13,-97,-5,3,41,15,83,-12,3,1,44, 
  /* [2][0][][] */ 5,-73,12,55,114,19,97,-7,-36,-31,-7,-50,0,-28,22,33,-35,-95,42,-57,4,-67,-59,11,-72,62,72,-100,-39,-1,-60,-46,18,3,-71,-50,-3,127,76,-37,-14,9,-26,-74,43,34,49,-23, 
  /* [3][0][][] */ 11,1,24,-15,34,32,24,-95,25,18,-12,9,2,-117,-12,3,-25,7,-19,1,-7,51,-127,4,20,-101,36,30,47,-12,-29,56,1,12,-6,-36,-104,-49,12,-13,-6,-1,40,7,-15,4,1,-54, 
  /* [4][0][][] */ 31,-57,10,70,50,12,-31,-5,-38,-14,25,-31,73,38,-17,31,-42,-64,64,37,33,-48,127,25,-31,8,-51,-14,-11,16,-77,-40,81,-26,-46,-64,-46,-48,-24,0,-64,96,-2,-5,56,83,43,22, 
  /* [5][0][][] */ -63,-22,-37,54,-7,10,-4,-50,-62,-34,-6,-21,16,41,-77,15,127,-15,57,-81,30,-96,-8,0,88,-115,-105,-11,57,-50,35,-79,14,-59,-36,28,-78,-18,18,-34,-44,30,97,45,43,22,25,-39, 
  /* [6][0][][] */ -31,7,-36,34,-23,75,-72,8,-19,-1,-127,8,47,36,118,20,21,8,43,-14,39,-17,-49,-15,13,2,-72,17,2,-52,6,-24,35,-44,9,7,-2,-4,-54,-22,-33,44,-21,29,29,30,34,1, 
  /* [7][0][][] */ 32,-4,39,-17,3,6,13,-11,14,5,-9,-2,-10,-7,-3,-13,11,-3,-24,-20,-20,14,127,14,5,-13,-1,9,7,-10,-21,13,-1,21,1,-18,-9,14,8,28,5,-3,9,-3,-16,-2,-24,17, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0055018821731209755, 0.0051396870985627174, 0.0065274029038846493, 0.0064247595146298409, 0.0056506907567381859, 0.0043646995909512043, 0.0042262757197022438, 0.011074071750044823, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 4318, 67, 408, 98, 8271, 3296, -243, 3926, 4241, -322, -571, 1310, 443, -123, -778, 413, 12048, 290, 223, 34499, -530, 15116, 1149, 31, -29, -8484, 9050, -196, 353, -382, 1412, 8110, 591, -613, 706, 493, 8417, -1745, 3275, 764, 376, -820, 20012, -7336, 980, -325, 315, 795, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.0245467466302216e-05, 0.0001879179326351732, 0.00099443958606570959, 0.00087104807607829571, 0.00012392869393806905, 0.00015438070113305002, 8.3105493104085326e-05, 0.00033082027221098542, 0.00014962814748287201, 0.00044429523404687643, 5.6530170695623383e-05, 0.00067768205190077424, 0.00086951442062854767, 0.00014348917466122657, 0.00012723267718683928, 0.0086111556738615036, 0.00015312223695218563, 0.00021113775437697768, 0.00036631830153055489, 9.009513451019302e-05, 0.00062225438887253404, 9.6778050647117198e-05, 0.00028308405308052897, 0.00010928701522061601, 0.0001552617468405515, 0.00073029648046940565, 0.00012141825573053211, 0.00032376265153288841, 0.00093759578885510564, 0.00045757764019072056, 0.00014483428094536066, 9.6442694484721869e-05, 0.0010169597808271646, 0.00044013297883793712, 0.00019215873908251524, 0.00024430881603620946, 0.00014199000725056976, 6.9143381551839411e-05, 8.8064974988810718e-05, 0.00022043580247554928, 0.00034668800071813166, 0.00034479174064472318, 6.2356448324862868e-05, 0.00015563557099085301, 0.00087109487503767014, 0.00059272436192259192, 0.0051954863592982292, 0.00048328394768759608, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 106,-38,-72,-100,21,-100,66,-58,68,21,95,45,-98,63,55,-119,78,-96,-1,-47,-127,-54,34,111,-2,69,-11,62,-127,-20,89,-82,-49,-58,48,82,-127,50,110,77,-46,-127,-72,44,-70,-29,4,-82, 85,-57,77,127,84,35,122,-125,-80,98,59,66,-3,61,59,115,80,-95,-104,-58,93,-95,49,2,116,127,-38,79,9,51,83,-50,44,113,127,127,-97,45,87,-32,85,29,-48,104,127,112,-6,-12, 25,-27,-3,-44,35,53,23,-86,-16,44,-84,29,88,-7,-62,-3,32,-34,90,-19,39,5,-84,-91,26,10,-10,25,36,69,35,8,-7,-47,31,34,-19,12,14,-66,-56,114,6,84,-61,-71,-2,72, 
  /* [0][1][][] */ 118,70,-127,23,-80,-127,72,-71,99,-71,127,-96,91,94,127,121,-44,113,-9,-91,121,-78,46,127,-12,-5,-33,19,-57,87,69,-127,-127,-68,-22,34,-17,104,127,127,-54,-79,-127,49,-7,-22,-127,-127, 127,127,115,-15,-127,10,127,-127,-127,-127,87,-127,37,127,101,-127,-37,127,127,-127,-66,-127,71,-37,63,10,-127,70,13,127,127,-102,115,127,-30,11,-28,127,110,-49,127,-4,-52,127,-13,127,119,40, 25,51,-3,15,-32,75,26,-83,-7,-93,-86,-74,-127,0,-70,-1,36,33,-102,-56,-50,-10,-127,-105,-39,5,-70,21,42,88,29,7,6,-63,-10,2,-4,36,19,-86,-61,100,-12,104,6,-80,2,90, 
  /* [0][2][][] */ 40,-39,-28,-8,45,-25,8,-20,72,26,30,41,5,55,-10,-17,-127,-29,-9,-18,20,-39,9,45,84,-18,-17,-95,25,56,-7,-81,-25,-39,-69,-3,71,23,32,72,-102,-54,-121,34,-2,0,89,-65, 19,-62,6,-6,41,2,32,-49,-82,68,1,57,-22,66,-4,9,-95,-24,-16,-53,-28,-70,28,-9,127,-14,-50,-127,22,73,2,-57,29,81,-58,14,75,46,28,-29,-61,4,-54,93,-8,-4,-100,56, -3,-28,20,3,12,20,8,-20,-8,51,-34,25,15,-12,-19,-2,25,-5,15,-35,12,3,-41,-51,-10,-8,-18,-41,18,63,-6,11,-2,-39,-38,0,64,21,-1,-47,-101,59,-23,49,2,8,2,10, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0025604323018342257, 0.0079865120351314545, 0.042263679206371307, 0.037019543349742889, 0.0052669690921902657, 0.0065611796453595161, 0.0035319833550602198, 0.014059861190617085, 0.0063591962680220604, 0.018882546573877335, 0.002402532147243619, 0.028801487758755684, 0.036954361945390701, 0.0060982899740338326, 0.0054073887877166271, 0.36597409844398499, 0.0065076951868832111, 0.0089733544737100601, 0.015568527393043041, 0.0038290431257337332, 0.026445811614394188, 0.0041130669414997101, 0.012031071819365025, 0.0046446979977190495, 0.0065986239351332188, 0.031037600710988045, 0.0051602758467197418, 0.013759911991655827, 0.039847820997238159, 0.019447049126029015, 0.0061554568819701672, 0.0040988144464790821, 0.043220788240432739, 0.018705651164054871, 0.0081667462363839149, 0.010383124463260174, 0.0060345749370753765, 0.0029385935049504042, 0.0037427614443004131, 0.00936852116137743, 0.014734239317476749, 0.014653649181127548, 0.0026501489337533712, 0.0066145113669335842, 0.037021532654762268, 0.025190785527229309, 0.22080816328525543, 0.020539566874504089, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { -946, -8081, 9397, 3654, 10185, 3057, 3222, 360, -1591, -7230, 681, 4611, 19520, -11602, 137, 12733, -7134, -882, 1650, 6627, 8250, 3004, 1145, 526, 11632, 25044, 9800, -11068, 1940, -944, -19, -3316, 18471, 7967, 10993, -1537, -10628, 291, -3791, 251, -12187, -9366, -1522, 2474, 7340, -11293, 12529, -1462, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00030719806090928614, 0.0002947825996670872, 9.2087437224108726e-05, 0.00028955392190255225, 0.00029317490407265723, 0.00069619959685951471, 0.0010234719375148416, 0.00059348769718781114, 0.00067376514198258519, 0.00037703587440773845, 0.0015254808822646737, 0.00026470905868336558, 7.3195536970160902e-05, 0.00035683432361111045, 0.00061757059302181005, 2.9559958420577459e-05, 0.00026674504624679685, 0.00043006549822166562, 0.00042336329352110624, 0.00022734694357495755, 0.00015525174967478961, 0.0014738088939338923, 0.00040843331953510642, 0.00083012878894805908, 0.00021549256052821875, 7.9821780673228204e-05, 0.00041715250699780881, 0.00030840313411317766, 0.00094364467076957226, 0.0004546623385977, 0.0010688620386645198, 0.001462502172216773, 0.00012141801562393084, 0.00027998030418530107, 0.00031095586018636823, 0.00082090811338275671, 0.00043593556620180607, 0.00038927467539906502, 0.0010307710617780685, 0.00034462570329196751, 0.00032985288999043405, 0.00026774799334816635, 0.00033990279189310968, 0.00039066874887794256, 0.00013903665239922702, 0.00027633996796794236, 3.0004737709532492e-05, 0.00059999851509928703, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 16,48,7,-19,96,-25,127,-3, 
  /* [1][0][][] */ 127,81,71,18,-6,-42,3,118, 
  /* [2][0][][] */ -60,17,-3,127,13,-20,-30,54, 
  /* [3][0][][] */ 50,-36,-127,-6,-2,-43,22,123, 
  /* [4][0][][] */ -116,83,-127,-16,18,21,-37,-41, 
  /* [5][0][][] */ 127,-19,-5,-48,-2,-30,8,-126, 
  /* [6][0][][] */ 5,-9,-7,-3,-127,-26,56,3, 
  /* [7][0][][] */ -6,-62,-3,0,-25,1,-127,0, 
  /* [8][0][][] */ -13,25,35,-6,127,16,-62,-18, 
  /* [9][0][][] */ 127,-38,26,-2,1,-33,48,110, 
  /* [10][0][][] */ 127,7,-6,-39,-3,11,-1,-124, 
  /* [11][0][][] */ -53,0,-3,127,-3,-43,-37,32, 
  /* [12][0][][] */ -127,3,-76,-23,13,105,-61,-124, 
  /* [13][0][][] */ 123,9,127,17,-11,20,21,44, 
  /* [14][0][][] */ -127,-5,13,16,0,-15,7,124, 
  /* [15][0][][] */ -127,9,5,119,-3,-4,-24,123, 
  /* [16][0][][] */ 60,-72,127,64,-14,-106,31,71, 
  /* [17][0][][] */ 20,-51,-77,127,1,20,-9,116, 
  /* [18][0][][] */ 20,-31,-115,41,-18,-1,34,127, 
  /* [19][0][][] */ 25,18,-13,127,-6,2,-69,-48, 
  /* [20][0][][] */ 17,54,108,-117,11,-69,11,-127, 
  /* [21][0][][] */ 4,-1,-8,1,-127,-13,54,1, 
  /* [22][0][][] */ 1,56,-3,-11,2,127,-12,0, 
  /* [23][0][][] */ 118,24,-8,94,-4,0,-46,-127, 
  /* [24][0][][] */ -127,19,-92,-37,19,-44,-47,-66, 
  /* [25][0][][] */ -44,-8,-66,-45,3,-127,6,-49, 
  /* [26][0][][] */ -102,-25,-127,11,11,3,-18,-37, 
  /* [27][0][][] */ 103,8,127,20,-6,43,18,41, 
  /* [28][0][][] */ 6,-61,-20,39,29,-127,5,14, 
  /* [29][0][][] */ -4,-8,26,-127,-18,-5,20,-1, 
  /* [30][0][][] */ -42,5,127,-6,0,5,-6,-118, 
  /* [31][0][][] */ 1,13,3,2,127,25,-55,-2, 
  /* [32][0][][] */ -127,-20,-109,-9,-2,-33,-26,-63, 
  /* [33][0][][] */ 12,-51,4,-30,37,-127,15,-21, 
  /* [34][0][][] */ -56,-116,-127,59,1,-54,-13,-24, 
  /* [35][0][][] */ 54,8,-113,-3,4,-2,10,127, 
  /* [36][0][][] */ 66,37,84,33,6,127,12,30, 
  /* [37][0][][] */ -9,17,-4,127,9,-20,-14,10, 
  /* [38][0][][] */ 2,24,9,0,127,25,-36,0, 
  /* [39][0][][] */ -9,9,-12,23,-33,127,-109,-7, 
  /* [40][0][][] */ 127,-18,121,20,-24,30,15,61, 
  /* [41][0][][] */ 115,1,127,25,-7,2,36,47, 
  /* [42][0][][] */ 58,-59,-14,-38,28,127,20,-29, 
  /* [43][0][][] */ -8,-62,-6,3,-46,-19,-127,2, 
  /* [44][0][][] */ -23,-127,39,94,17,40,13,-119, 
  /* [45][0][][] */ 119,11,127,-4,-7,33,26,46, 
  /* [46][0][][] */ -87,15,6,127,2,6,-39,72, 
  /* [47][0][][] */ -4,49,-10,-4,-2,127,-18,2, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0031674806959927082, 0.0030394664499908686, 0.00094950204947963357, 0.0029855542816221714, 0.003022889606654644, 0.0071784267202019691, 0.010552890598773956, 0.0061193774454295635, 0.0069471080787479877, 0.0038875695317983627, 0.015729041770100594, 0.002729381900280714, 0.00075470999581739306, 0.0036792741157114506, 0.0063676927238702774, 0.00030478902044706047, 0.0027503748424351215, 0.0044343513436615467, 0.0043652458116412163, 0.002344145905226469, 0.0016007813392207026, 0.015196259133517742, 0.0042113047093153, 0.0085593536496162415, 0.0022219168022274971, 0.00082303234376013279, 0.0043012071400880814, 0.0031799059361219406, 0.0097298016771674156, 0.00468796631321311, 0.011020902544260025, 0.015079676173627377, 0.0012519259471446276, 0.0028868417721241713, 0.0032062269747257233, 0.0084642805159091949, 0.004494877066463232, 0.0040137623436748981, 0.010628150776028633, 0.0035533923655748367, 0.0034010717645287514, 0.0027607160154730082, 0.0035046951379626989, 0.0040281363762915134, 0.0014335894957184792, 0.0028493066783994436, 0.00030937508563511074, 0.0061865095049142838, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 1502, 598, -579, -9006, -30, -900, -221, 4166, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00021779697271995246, 0.00026160420384258032, 0.00034482029150240123, 0.00018547162471804768, 0.00024391665647272021, 0.00012651944416575134, 0.00033186163636855781, 0.00019153536413796246, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -12,-13,-21,13,-9,-127,10,38, 
  /* [1][0][][] */ -62,22,-127,121,9,63,-18,36, 
  /* [2][0][][] */ 6,-10,25,-1,-10,-127,10,25, 
  /* [3][0][][] */ 24,53,53,127,15,-41,-44,-13, 
  /* [4][0][][] */ 16,60,22,-17,-127,-12,22,-3, 
  /* [5][0][][] */ 64,-27,127,-103,20,-58,-5,-46, 
  /* [6][0][][] */ 26,127,44,-38,38,-10,-66,-22, 
  /* [7][0][][] */ -22,-25,-42,-16,-12,-127,20,43, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.009256371296942234, 0.011118178255856037, 0.014654862694442272, 0.0078825438395142555, 0.010366457514464855, 0.0053770765662193298, 0.014104119502007961, 0.0081402529031038284, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { 6335, 167, 63, 1551, 14001, 654, 637, 2226, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00010104110697284341, 0.00047137620276771486, 0.00017483820556662977, 0.00053345231572166085, 0.00018870063649956137, 0.00027593795675784349, 0.00058431085199117661, 9.5465824415441602e-05, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -19,-6,5,-1,-5,27,0,-4, 15,-1,5,-6,6,127,12,127, 7,0,6,-8,-4,16,2,3, 
  /* [0][1][][] */ 7,-127,-6,4,-18,-6,-107,-6, -127,99,-78,127,-127,-8,127,-39, 13,-2,-3,-64,-8,1,47,-27, 
  /* [0][2][][] */ 19,-4,2,-3,-5,-23,9,-8, 59,-2,127,-21,9,-114,5,7, 10,-1,-5,-8,-5,-21,-3,-5, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0042942469008266926, 0.020033488050103188, 0.007430623285472393, 0.022671723738312721, 0.0080197770148515701, 0.011727362871170044, 0.024833209812641144, 0.004057297483086586, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 49310, -379, 38184, 20267, 14659, 559187, 14941, 37619, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 6.4626496168784797e-05, 4.3548694520723075e-05, 9.4377857749350369e-05, 2.5970759452320635e-05, 0.00012289681762922555, 6.0672159634123091e-06, 8.0949193943524733e-06, 8.0924633948598057e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 9,-3,12, 8,-24,30, 12,-24,21, 
  /* [0][1][][] */ 39,29,26, 65,18,58, 23,-33,38, 
  /* [0][2][][] */ -21,-92,-13, -30,-127,-1, -8,-56,17, 
  /* [1][0][][] */ 31,75,24, 6,9,-2, -30,-69,-27, 
  /* [1][1][][] */ 54,122,39, 3,0,-3, -54,-127,-40, 
  /* [1][2][][] */ 30,45,11, 5,-2,0, -32,-53,-3, 
  /* [2][0][][] */ 44,92,11, 54,127,13, 17,43,-1, 
  /* [2][1][][] */ -46,-83,-28, -80,-93,-38, -30,-6,-20, 
  /* [2][2][][] */ 1,11,7, 5,16,0, 2,11,-6, 
  /* [3][0][][] */ 46,-29,-14, 79,-34,-37, 32,-15,-11, 
  /* [3][1][][] */ 81,-53,-34, 127,-52,-71, 60,-26,-27, 
  /* [3][2][][] */ 21,-19,-2, 43,-26,-14, 17,-10,0, 
  /* [4][0][][] */ -12,-23,-4, 27,45,9, -16,-29,-4, 
  /* [4][1][][] */ -28,-60,-9, 64,127,19, -34,-61,-8, 
  /* [4][2][][] */ -9,-13,3, 21,25,-3, -11,-13,-2, 
  /* [5][0][][] */ -34,-64,-39, -55,-91,-58, -43,-33,-30, 
  /* [5][1][][] */ -58,-105,-50, -82,-127,-66, -47,-36,-32, 
  /* [5][2][][] */ 4,11,-8, 3,5,-4, 3,16,5, 
  /* [6][0][][] */ -98,-2,38, 5,24,-12, 70,21,-18, 
  /* [6][1][][] */ -127,-32,47, 17,24,-25, 113,20,-30, 
  /* [6][2][][] */ -48,-10,21, 19,-4,1, 38,-9,34, 
  /* [7][0][][] */ -5,16,-2, -15,23,-7, -6,21,-8, 
  /* [7][1][][] */ 18,84,-6, 23,127,-22, -2,60,-27, 
  /* [7][2][][] */ -27,-49,-20, -42,-51,-32, -19,4,-19, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.016479754820466042, 0.011104916222393513, 0.024066353216767311, 0.0066225430928170681, 0.031338687986135483, 0.0015471399528905749, 0.0020642043091356754, 0.020635779947042465, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.097317501902580261, } };
const TfArray<1, int> quant46_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.096984982490539551, } };
const TfArray<1, int> quant47_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.098864614963531494, } };
const TfArray<1, int> quant51_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.081090740859508514, } };
const TfArray<1, int> quant54_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.1045583039522171, } };
const TfArray<1, int> quant55_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.073396407067775726, } };
const TfArray<1, int> quant59_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.031813237816095352, } };
const TfArray<1, int> quant62_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.071021810173988342, } };
const TfArray<1, int> quant63_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.021104464307427406, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.039592515677213669, } };
const TfArray<1, int> quant66_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.088216200470924377, } };
const TfArray<1, int> quant67_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.019676493480801582, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.047231439501047134, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.046583525836467743, } };
const TfArray<1, int> quant70_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 18432, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 14976, (TfLiteIntArray*)&tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8064, (TfLiteIntArray*)&tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_33_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;
  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 28; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 28; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_33_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  71, 
};
TfLiteStatus tflite_learn_33_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
