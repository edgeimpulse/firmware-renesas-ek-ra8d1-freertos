/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 07.12.2023 16:56:19

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238576;
#else
constexpr int kTensorArenaSize = 237552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[28];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[8*3*3*3] = { 
  /* [0][0][][] */ 10,-2,14, 9,-23,32, 13,-24,22, 
  /* [0][1][][] */ 41,31,29, 67,19,61, 25,-33,40, 
  /* [0][2][][] */ -20,-92,-11, -29,-127,1, -7,-55,19, 
  /* [1][0][][] */ 30,76,25, 5,9,-1, -32,-69,-26, 
  /* [1][1][][] */ 53,123,40, 2,0,-2, -55,-127,-39, 
  /* [1][2][][] */ 29,46,13, 4,-1,1, -32,-52,-2, 
  /* [2][0][][] */ 43,92,11, 54,127,13, 17,43,-1, 
  /* [2][1][][] */ -47,-83,-28, -80,-93,-38, -30,-6,-20, 
  /* [2][2][][] */ 1,11,7, 5,17,0, 2,12,-6, 
  /* [3][0][][] */ 45,-32,-17, 78,-38,-41, 30,-18,-14, 
  /* [3][1][][] */ 80,-57,-38, 127,-57,-76, 58,-30,-30, 
  /* [3][2][][] */ 18,-22,-5, 41,-30,-17, 14,-13,-3, 
  /* [4][0][][] */ -12,-23,-4, 27,45,9, -16,-29,-4, 
  /* [4][1][][] */ -28,-60,-9, 64,127,19, -34,-61,-8, 
  /* [4][2][][] */ -9,-13,3, 21,25,-3, -12,-13,-2, 
  /* [5][0][][] */ -26,-58,-34, -48,-84,-50, -38,-28,-21, 
  /* [5][1][][] */ -51,-102,-47, -76,-127,-62, -44,-38,-28, 
  /* [5][2][][] */ 4,5,-12, 4,0,-6, 3,11,3, 
  /* [6][0][][] */ -98,-2,38, 6,24,-12, 71,21,-17, 
  /* [6][1][][] */ -127,-32,47, 17,24,-25, 114,20,-30, 
  /* [6][2][][] */ -49,-11,20, 19,-5,1, 39,-10,34, 
  /* [7][0][][] */ -5,16,-2, -15,22,-7, -6,22,-8, 
  /* [7][1][][] */ 17,84,-6, 23,127,-23, -2,60,-27, 
  /* [7][2][][] */ -28,-50,-20, -42,-52,-33, -20,4,-19, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant2_scale = { 8, { 0.017505666241049767, 0.011811906471848488, 0.022798700258135796, 0.007737000472843647, 0.034394167363643646, 0.0014615821419283748, 0.000766717828810215, 0.024565543979406357, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[8] = { 44132, -107, 40672, 27239, 13580, 553723, 69720, 31889, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 6.8649678723886609e-05, 4.6321205445565283e-05, 8.940667612478137e-05, 3.0341179808601737e-05, 0.00013487909745890647, 5.7316951824759599e-06, 3.0067367333685979e-06, 9.6335468697361648e-05, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*8] = { 
  /* [0][0][][] */ -22,-5,2,-1,-1,25,-1,3, 13,-1,2,-8,11,127,11,127, 4,2,2,-9,-4,17,1,7, 
  /* [0][1][][] */ 3,-127,-10,4,-15,-8,-110,3, -127,100,-75,127,-127,-8,127,-34, 8,0,-4,-65,-8,2,48,-24, 
  /* [0][2][][] */ 14,-3,0,-3,-2,-25,4,0, 52,-1,127,-21,14,-114,-1,5, 4,0,-5,-8,-3,-20,-3,-5, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant4_scale = { 8, { 0.0054711988195776939, 0.018839357420802116, 0.0074753197841346264, 0.022067565470933914, 0.0093369800597429276, 0.010612375102937222, 0.037470921874046326, 0.0030986680649220943, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[8] = { 10013, 126, 2107, 1749, 12081, 1052, 151, -530, };
const TfArray<1, int> tensor_dimension5 = { 1, { 8 } };
const TfArray<8, float> quant5_scale = { 8, { 0.00012873408559244126, 0.00044327901559881866, 0.00017588988703209907, 0.00051923684077337384, 0.00021969365479890257, 0.00024970294907689095, 0.0008816687623038888, 7.2909839218482375e-05, } };
const TfArray<8, int> quant5_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*8] = { 
  /* [0][0][][] */ -12,-13,-23,11,-10,-127,9,37, 
  /* [1][0][][] */ -64,21,-127,114,9,61,-17,36, 
  /* [2][0][][] */ 7,-11,23,-3,-7,-127,12,25, 
  /* [3][0][][] */ 24,51,51,127,17,-38,-42,-14, 
  /* [4][0][][] */ 14,57,19,-19,-127,-8,23,-7, 
  /* [5][0][][] */ 63,-28,127,-105,20,-61,-5,-46, 
  /* [6][0][][] */ 27,127,46,-41,40,-13,-66,-19, 
  /* [7][0][][] */ -22,-25,-41,-15,-13,-127,20,40, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0092322183772921562, 0.011088559404015541, 0.014528751373291016, 0.0089654745534062386, 0.010352167300879955, 0.0051141753792762756, 0.014861520379781723, 0.0081594819203019142, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 1834, 1097, -406, -8911, 476, -940, -177, 4324, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00021722867677453905, 0.00026090728351846337, 0.00034185298136435449, 0.00021095234842505306, 0.00024358040536753833, 0.00012033354141749442, 0.00034968284307979047, 0.00019198781228624284, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ 9,48,7,-23,93,-21,127,-1, 
  /* [1][0][][] */ 125,80,69,12,-14,-39,-2,127, 
  /* [2][0][][] */ -60,14,0,127,10,-18,-32,58, 
  /* [3][0][][] */ 50,-35,-127,-2,-2,-40,22,119, 
  /* [4][0][][] */ -117,84,-127,-13,13,23,-35,-43, 
  /* [5][0][][] */ 125,-17,-6,-48,-2,-32,9,-127, 
  /* [6][0][][] */ 7,-10,-3,-1,-127,-24,57,6, 
  /* [7][0][][] */ -4,-60,-4,2,-25,2,-127,-1, 
  /* [8][0][][] */ -11,23,32,-8,127,15,-63,-20, 
  /* [9][0][][] */ 127,-42,21,-7,-2,-30,45,126, 
  /* [10][0][][] */ 127,7,-7,-39,-3,13,-2,-126, 
  /* [11][0][][] */ -49,1,-1,127,-1,-43,-37,35, 
  /* [12][0][][] */ -122,5,-74,-15,14,105,-63,-127, 
  /* [13][0][][] */ 118,7,127,13,-7,19,22,46, 
  /* [14][0][][] */ -126,-4,16,17,-1,-13,6,127, 
  /* [15][0][][] */ -127,10,3,116,-4,-4,-24,120, 
  /* [16][0][][] */ 60,-73,127,69,-15,-110,35,68, 
  /* [17][0][][] */ 19,-46,-78,127,-1,14,-10,116, 
  /* [18][0][][] */ 20,-34,-116,44,-14,2,33,127, 
  /* [19][0][][] */ 20,16,-15,127,-8,5,-70,-50, 
  /* [20][0][][] */ 17,53,106,-117,14,-70,11,-127, 
  /* [21][0][][] */ 6,-4,-5,0,-127,-13,59,3, 
  /* [22][0][][] */ 2,54,-3,-11,2,127,-12,-1, 
  /* [23][0][][] */ 119,26,-9,95,0,-2,-42,-127, 
  /* [24][0][][] */ -127,20,-92,-35,22,-44,-47,-60, 
  /* [25][0][][] */ -47,-9,-64,-47,3,-127,11,-48, 
  /* [26][0][][] */ -112,-29,-127,8,11,6,-19,-32, 
  /* [27][0][][] */ 93,2,127,13,-8,49,16,48, 
  /* [28][0][][] */ 5,-59,-18,39,24,-127,3,16, 
  /* [29][0][][] */ -4,-8,23,-127,-16,-5,20,-5, 
  /* [30][0][][] */ -46,4,127,-6,-3,7,-9,-118, 
  /* [31][0][][] */ 2,9,7,0,127,26,-52,0, 
  /* [32][0][][] */ -127,-19,-112,-6,1,-33,-24,-67, 
  /* [33][0][][] */ 13,-53,6,-32,36,-127,14,-18, 
  /* [34][0][][] */ -51,-123,-127,69,7,-53,-11,-25, 
  /* [35][0][][] */ 54,4,-115,-2,1,0,7,127, 
  /* [36][0][][] */ 68,39,87,33,7,127,9,32, 
  /* [37][0][][] */ -11,18,-6,127,6,-18,-13,8, 
  /* [38][0][][] */ 2,22,8,-2,127,26,-36,1, 
  /* [39][0][][] */ -8,3,-11,16,-30,127,-100,-7, 
  /* [40][0][][] */ 127,-14,113,20,-21,25,17,60, 
  /* [41][0][][] */ 117,-3,127,21,-11,10,32,47, 
  /* [42][0][][] */ 54,-56,-11,-36,21,127,20,-25, 
  /* [43][0][][] */ -10,-60,-9,2,-42,-19,-127,1, 
  /* [44][0][][] */ -25,-127,38,90,15,44,8,-116, 
  /* [45][0][][] */ 120,9,127,-5,-10,33,25,46, 
  /* [46][0][][] */ -90,20,3,127,3,2,-41,73, 
  /* [47][0][][] */ -3,51,-10,-2,-2,127,-18,1, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0035824310034513474, 0.0025640255771577358, 0.00084271078230813146, 0.0035857153125107288, 0.0028182512614876032, 0.0074270749464631081, 0.009923737496137619, 0.0065410975366830826, 0.0067308284342288971, 0.0030175196006894112, 0.016765594482421875, 0.0028484959620982409, 0.00064389623003080487, 0.0034038217272609472, 0.0072788456454873085, 0.00052593834698200226, 0.0025851423852145672, 0.003984588198363781, 0.0042523182928562164, 0.0023421500809490681, 0.0013885466614738107, 0.014264739118516445, 0.0044258702546358109, 0.0088930604979395866, 0.0020298401359468699, 0.00093943095998838544, 0.0038836118765175343, 0.003018347779288888, 0.010833116248250008, 0.0048840604722499847, 0.013443952426314354, 0.014251977205276489, 0.0011027685832232237, 0.0028272171039134264, 0.0030867750756442547, 0.0098583679646253586, 0.0042551150545477867, 0.0042768060229718685, 0.011005638167262077, 0.003650688799098134, 0.0032616583630442619, 0.0024831818882375956, 0.0035940762609243393, 0.0042512617073953152, 0.0015914461109787226, 0.0025861132889986038, 0.00026578558026812971, 0.0065267505124211311, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { -1194, -7777, 11043, 3190, 10500, 3176, 2821, 413, -1325, -7452, 615, 4227, 21852, -11837, -115, 6998, -7118, -435, 1609, 6913, 9583, 2766, 904, 297, 11596, 23213, 10230, -11190, 2072, -695, 169, -3548, 19974, 8024, 10882, -1490, -11086, 349, -3809, 135, -12055, -9551, -1712, 2715, 6618, -11564, 15135, -1673, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00034027808578684926, 0.00024354460765607655, 8.0045094364322722e-05, 0.00034059004974551499, 0.00026769228861667216, 0.00070546253118664026, 0.00094260863261297345, 0.00062130775768309832, 0.00063932937337085605, 0.0002866198483388871, 0.0015924840699881315, 0.00027056509861722589, 6.1160644690971822e-05, 0.00032331285183317959, 0.0006913829711265862, 4.9956383008975536e-05, 0.00024555038544349372, 0.0003784770960919559, 0.00040390749927610159, 0.00022246970911510289, 0.00013189144374337047, 0.0013549397699534893, 0.00042039237450808287, 0.0008447095169685781, 0.00019280487322248518, 8.9232082245871425e-05, 0.00036888584145344794, 0.00028669851599261165, 0.001028986182063818, 0.00046391368960030377, 0.001276977127417922, 0.0013537275372073054, 0.00010474674490978941, 0.0002685439249034971, 0.00029319809982553124, 0.00093639950500801206, 0.00040417315904051065, 0.00040623347740620375, 0.0010453732684254646, 0.00034676157520152628, 0.00030980943120084703, 0.00023586564930155873, 0.00034138420596718788, 0.00040380714926868677, 0.00015116389840841293, 0.00024564261548221111, 2.5245708457077853e-05, 0.00061994499992579222, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ 109,-43,-72,-97,23,-101,64,-48,63,24,93,47,-97,47,59,-119,76,-96,0,-47,-127,-59,35,112,-4,73,-14,54,-127,-15,84,-81,-45,-62,44,80,-127,56,113,78,-45,-127,-70,47,-70,-33,6,-82, 83,-62,72,127,90,26,127,-127,-80,102,57,68,-3,46,62,114,77,-95,-111,-61,93,-97,50,2,120,127,-42,74,6,74,75,-48,44,113,127,127,-95,47,76,-34,82,28,-46,108,127,110,-4,-12, 24,-29,-1,-38,39,42,20,-85,-17,47,-79,31,85,-17,-58,-3,31,-35,98,-12,36,0,-84,-93,27,8,-13,20,33,78,29,6,-3,-47,28,35,-22,8,16,-64,-58,111,7,88,-59,-75,0,72, 
  /* [0][1][][] */ 123,69,-127,20,-81,-127,72,-62,90,-71,127,-96,84,91,127,121,-43,111,-13,-89,119,-83,47,127,-10,-7,-32,14,-56,89,67,-127,-127,-72,-23,34,-10,115,127,127,-54,-82,-127,54,-5,-25,-127,-127, 127,127,109,-19,-127,4,127,-122,-127,-127,84,-127,32,127,102,-127,-37,127,127,-127,-65,-127,72,-39,68,7,-127,65,11,127,127,-101,109,127,-31,10,-19,127,101,-50,127,-6,-60,127,-13,127,124,40, 23,52,-2,13,-28,65,31,-82,-14,-97,-78,-73,-127,1,-66,-2,36,33,-116,-47,-54,-16,-127,-110,-37,1,-68,15,45,74,27,6,4,-64,-12,2,0,37,16,-83,-64,100,-18,105,7,-80,5,90, 
  /* [0][2][][] */ 39,-43,-26,-5,48,-28,2,-16,65,26,37,42,4,49,-9,-17,-127,-32,-11,-20,15,-37,11,49,83,-15,-22,-96,25,46,-10,-82,-24,-39,-73,-7,78,30,31,72,-105,-59,-110,31,-2,-4,90,-65, 15,-67,7,-3,42,-2,28,-49,-86,69,3,59,-21,60,-2,10,-96,-27,-18,-52,-30,-77,30,-6,127,-12,-53,-127,19,62,-1,-53,28,82,-64,13,79,51,18,-29,-58,1,-56,76,-8,-8,-101,56, -5,-30,21,6,14,13,5,-14,-14,54,-30,28,13,-14,-15,-2,23,-9,15,-29,8,0,-40,-54,-9,-7,-21,-46,16,48,-5,10,0,-38,-44,1,64,24,-1,-47,-105,57,-28,48,3,7,2,10, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0024146994110196829, 0.0081508690491318703, 0.047294106334447861, 0.033305224031209946, 0.0051040365360677242, 0.0059353131800889969, 0.0030733451712876558, 0.021261198446154594, 0.0073743313550949097, 0.01684899814426899, 0.0027552032843232155, 0.025832965970039368, 0.04586450383067131, 0.0066512101329863071, 0.0049456167034804821, 0.25674644112586975, 0.0064364471472799778, 0.0087541826069355011, 0.014526004903018475, 0.0041057574562728405, 0.032316464930772781, 0.0034687540028244257, 0.011886304244399071, 0.0043741064146161079, 0.0065086265094578266, 0.030397986993193626, 0.0050272503867745399, 0.013759388588368893, 0.025920581072568893, 0.018594946712255478, 0.0038276833947747946, 0.0047729774378240108, 0.052873197942972183, 0.021836984902620316, 0.0071219364181160927, 0.0083606494590640068, 0.0062824427150189877, 0.002797767287120223, 0.0041946624405682087, 0.010411463677883148, 0.014037176966667175, 0.017259122803807259, 0.003052304033190012, 0.0071652033366262913, 0.038680989295244217, 0.030792867764830589, 0.2085052877664566, 0.02078840509057045, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 5995, 411, 662, -226, 8305, 5292, 1471, 2168, 5785, -419, -1167, 751, 1100, 327, -851, 393, 12450, 835, 982, 32869, 169, 15642, 370, 56, 107, -8268, 9074, 277, 613, -410, 4221, 7841, 589, 36, 1642, 640, 7746, -1747, 2617, 349, -26, -368, 20143, -7603, 672, -98, 65, 679, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 5.6816457799868658e-05, 0.00019178516231477261, 0.001112802536226809, 0.00078365235822275281, 0.00012009497731924057, 0.00013965442485641688, 7.231400377349928e-05, 0.00050026352982968092, 0.00017351367569062859, 0.00039644702337682247, 6.4828316681087017e-05, 0.00060783448861911893, 0.0010791647946462035, 0.00015649906708858907, 0.0001163674533017911, 0.0060410927981138229, 0.00015144581266213208, 0.0002059807738987729, 0.00034178837086074054, 9.660606156103313e-05, 0.00076038739643990993, 8.161774167092517e-05, 0.00027967774076387286, 0.00010292015213053674, 0.00015314415213651955, 0.00071524677332490683, 0.00011828824790427461, 0.00032375031150877476, 0.0006098960293456912, 0.00043752815690822899, 9.0063142124563456e-05, 0.00011230535164941102, 0.0012440752470865846, 0.00051381142111495137, 0.00016757498087827116, 0.00019672117196023464, 0.00014782218204345554, 6.5829823142848909e-05, 9.869794303085655e-05, 0.00024497561389580369, 0.00033028653706423938, 0.00040609700954519212, 7.1818918513599783e-05, 0.00016859301831573248, 0.00091014092322438955, 0.00072453805478289723, 0.0049060070887207985, 0.00048913893988355994, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -28,39,-33,-1,-45,-29,-82,26,8,22,38,41,37,1,-48,9,-49,45,11,-64,31,44,-127,3,-8,14,-34,46,-6,-10,24,25,13,-23,36,18,2,111,-70,-16,-9,17,-28,30,4,5,18,-4, 
  /* [1][0][][] */ -73,-100,-53,5,88,-27,-124,60,-19,-37,-12,-80,-20,76,3,-7,114,-127,-7,-20,-58,3,0,-15,24,-5,-32,-50,27,-18,-116,-26,27,-61,-81,-103,44,12,-88,-3,-1,44,13,78,-15,7,6,46, 
  /* [2][0][][] */ 10,-67,8,55,110,10,100,-10,-31,-31,-4,-46,1,-27,12,32,-32,-90,41,-57,4,-69,-57,17,-70,59,70,-96,-38,1,-55,-45,16,6,-68,-49,-5,127,77,-35,-12,9,-24,-72,43,35,45,-22, 
  /* [3][0][][] */ 7,-2,24,-17,29,29,20,-89,25,18,-7,6,0,-112,-14,3,-24,6,-20,-2,-8,52,-127,5,22,-97,35,29,47,-15,-33,56,1,10,-6,-35,-100,-44,8,-18,-11,0,40,3,-17,0,-1,-53, 
  /* [4][0][][] */ 32,-61,13,74,52,13,-33,-3,-39,-12,24,-31,78,37,-19,34,-43,-68,69,38,37,-50,127,24,-34,7,-55,-13,-10,16,-81,-45,87,-29,-51,-66,-50,-53,-25,-3,-63,101,-6,-8,58,85,47,24, 
  /* [5][0][][] */ -64,-19,-40,54,-5,5,-6,-49,-62,-32,-8,-22,17,36,-77,14,127,-15,56,-82,30,-95,-11,-5,86,-114,-107,-11,51,-48,33,-79,13,-62,-34,27,-79,-18,16,-35,-40,26,98,42,42,20,27,-38, 
  /* [6][0][][] */ -31,8,-37,35,-24,73,-69,9,-20,-3,-127,6,46,39,119,19,20,9,42,-12,38,-18,-47,-14,9,0,-68,15,3,-53,10,-24,33,-43,10,7,0,-4,-52,-21,-35,45,-20,29,31,31,34,-1, 
  /* [7][0][][] */ 32,-3,38,-17,3,7,14,-11,15,4,-10,-3,-10,-8,-3,-14,12,-3,-25,-20,-20,13,127,14,4,-15,0,8,6,-9,-20,14,-1,21,0,-18,-9,14,8,28,6,-3,9,-2,-16,-1,-23,16, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0056135430932044983, 0.0052320021204650402, 0.0056598968803882599, 0.0061607570387423038, 0.0053086942061781883, 0.0044743893668055534, 0.004571069497615099, 0.012197345495223999, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 4763, 1746, 2119, 10104, 5174, 5758, 2434, -2858, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.0001320833689533174, 0.00012310592865105718, 0.00013317404955159873, 0.00014495899085886776, 0.00012491045345086604, 0.00010527975246077403, 0.00010755458060884848, 0.00028699636459350586, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ -127,-17,25,-113,-122,123,2,-60, 
  /* [1][0][][] */ 88,5,22,-26,3,59,-127,41, 
  /* [2][0][][] */ -39,53,-105,87,-61,127,26,50, 
  /* [3][0][][] */ 91,-22,-26,77,2,-64,7,127, 
  /* [4][0][][] */ -79,-4,-2,10,-20,-32,127,2, 
  /* [5][0][][] */ 62,120,26,36,-127,-50,22,-30, 
  /* [6][0][][] */ -4,-65,35,127,13,-100,-17,40, 
  /* [7][0][][] */ 127,3,99,-8,-79,25,74,125, 
  /* [8][0][][] */ -35,-127,50,48,81,-32,-30,3, 
  /* [9][0][][] */ -84,-103,16,-21,-27,8,-52,127, 
  /* [10][0][][] */ -26,-119,26,111,68,127,16,-30, 
  /* [11][0][][] */ -122,-114,33,-71,61,57,-46,127, 
  /* [12][0][][] */ 72,-22,81,-79,30,-127,76,5, 
  /* [13][0][][] */ 31,20,20,127,-9,15,30,-59, 
  /* [14][0][][] */ -44,-6,44,7,117,-22,-7,127, 
  /* [15][0][][] */ -76,127,73,91,70,122,-52,90, 
  /* [16][0][][] */ 6,-28,-74,-127,-71,70,23,54, 
  /* [17][0][][] */ 21,127,3,58,-24,-42,-3,17, 
  /* [18][0][][] */ 13,41,-12,-127,-43,-96,20,-18, 
  /* [19][0][][] */ 38,-88,-127,-126,-93,120,14,-5, 
  /* [20][0][][] */ 32,7,18,-1,127,25,34,-42, 
  /* [21][0][][] */ -127,-54,-58,-83,53,30,42,-8, 
  /* [22][0][][] */ -71,-50,74,115,46,-46,-41,127, 
  /* [23][0][][] */ 31,33,-50,127,124,33,49,102, 
  /* [24][0][][] */ 127,1,-110,-23,-2,-17,42,-42, 
  /* [25][0][][] */ 2,-8,-44,-23,73,-32,-127,-57, 
  /* [26][0][][] */ 127,7,103,-38,-97,44,54,125, 
  /* [27][0][][] */ 23,-47,-38,127,27,-8,-24,-103, 
  /* [28][0][][] */ -62,127,91,72,69,-18,-29,4, 
  /* [29][0][][] */ 1,0,53,4,-69,4,127,62, 
  /* [30][0][][] */ -53,-73,54,-63,-77,127,62,39, 
  /* [31][0][][] */ 100,22,94,-21,-93,77,73,127, 
  /* [32][0][][] */ -107,-14,-30,35,-22,21,127,21, 
  /* [33][0][][] */ -109,127,44,84,19,21,-71,4, 
  /* [34][0][][] */ 116,8,24,-16,6,48,-127,19, 
  /* [35][0][][] */ 6,-2,19,29,-47,29,12,-127, 
  /* [36][0][][] */ 38,-6,-92,-127,45,-20,47,127, 
  /* [37][0][][] */ 55,-32,-45,-46,-27,36,67,-127, 
  /* [38][0][][] */ 33,127,18,109,-75,-87,-11,-24, 
  /* [39][0][][] */ 107,-10,115,-16,-94,35,125,127, 
  /* [40][0][][] */ -61,-67,127,103,-8,-21,-93,29, 
  /* [41][0][][] */ 32,-23,4,12,19,-68,-5,127, 
  /* [42][0][][] */ 51,-112,-83,-112,-53,76,22,-127, 
  /* [43][0][][] */ 102,-5,125,-31,-96,-22,115,127, 
  /* [44][0][][] */ -106,-100,-82,127,95,-9,-72,30, 
  /* [45][0][][] */ 127,-9,75,-23,-34,27,-1,79, 
  /* [46][0][][] */ 51,-125,8,86,127,-2,63,13, 
  /* [47][0][][] */ 62,127,-24,106,-39,-80,26,-67, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0030946140177547932, 0.0055300863459706306, 0.0020912706386297941, 0.0017046991270035505, 0.014448536559939384, 0.001755369477905333, 0.0048137078993022442, 0.0042553669773042202, 0.0031493885908275843, 0.0022029569372534752, 0.0026904267724603415, 0.0012964262859895825, 0.003149096155539155, 0.0027656645979732275, 0.0020113443024456501, 0.0026672040112316608, 0.0043958527967333794, 0.0036023033317178488, 0.0015723664546385407, 0.0044821589253842831, 0.0050776456482708454, 0.0018559752497822046, 0.0012106039794161916, 0.0038993305061012506, 0.002279332373291254, 0.0034537885803729296, 0.0043139932677149773, 0.0031227637082338333, 0.0030125018674880266, 0.0090416092425584793, 0.0017689579399302602, 0.0037981418427079916, 0.0059150592423975468, 0.0032264930196106434, 0.0090010110288858414, 0.0031245246063917875, 0.0023804819211363792, 0.0021463173907250166, 0.0027364594861865044, 0.004510228056460619, 0.0037713292986154556, 0.0016539619537070394, 0.0022792394738644361, 0.0040429984219372272, 0.002661251462996006, 0.0052969856187701225, 0.0044451183639466763, 0.0012689840514212847, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 2903, 962, 3652, 6260, 257, 4063, 1243, 1270, 1724, 3117, 2680, 5309, 2349, 1357, 2882, -25, 189, -2083, 6295, 2197, 1447, 4491, 6999, 475, 2632, 2665, 1622, -52, -1468, 991, 5308, 2031, 1037, 901, 681, -421, 893, 1991, 151, 1580, 1004, 5376, 1547, 515, 2014, 935, -209, 7519, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00031361935543827713, 0.00056043890072032809, 0.00021193691645748913, 0.00017276036669500172, 0.0014642667956650257, 0.00017789547564461827, 0.00048783852253109217, 0.00043125424417667091, 0.00031917041633278131, 0.0002232556144008413, 0.00027265754761174321, 0.00013138451322447509, 0.0003191407595295459, 0.00028028243104927242, 0.00020383689843583852, 0.0002703040954656899, 0.00044549157610163093, 0.00036507041659206152, 0.00015934929251670837, 0.00045423815026879311, 0.0005145869217813015, 0.00018809123139362782, 0.0001226869790116325, 0.00039517221739515662, 0.0002309957635588944, 0.00035001939977519214, 0.00043719564564526081, 0.00031647214200347662, 0.00030529781361110508, 0.00091630930546671152, 0.00017927258159033954, 0.00038491739542223513, 0.00059945345856249332, 0.00032698444556444883, 0.00091219495516270399, 0.00031665060669183731, 0.00024124662741087377, 0.00021751555323135108, 0.00027732268790714443, 0.00045708278776146472, 0.00038220011629164219, 0.00016761847655288875, 0.00023098634846974164, 0.00040973204886540771, 0.00026970083126798272, 0.00053681561257690191, 0.00045048433821648359, 0.00012860342394560575, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ -54,45,-45,-48,-3,-22,24,-14,-2,-15,8,38,-4,-90,-96,29,127,-3,57,43,-75,-64,91,-123,-5,-48,-7,95,-14,12,37,127,-35,-9,-15,-7,-4,-55,-11,17,115,-94,-40,48,88,-108,-22,-4, -4,-127,33,-127,1,-24,-70,127,70,-71,25,38,17,-127,-89,14,-29,10,-24,-76,-66,-1,50,127,13,-10,9,127,19,-4,12,-101,-110,26,-7,-32,127,-127,51,-10,1,-122,-57,32,116,71,41,-35, -16,-6,19,-29,0,31,24,66,-8,11,4,33,22,35,-64,36,63,10,-31,18,-127,49,68,20,-5,68,0,-47,-25,1,18,-36,-57,0,0,-6,-30,111,-19,11,75,-46,15,-33,71,42,-32,-11, 
  /* [0][1][][] */ -28,-23,-123,-12,-24,22,5,3,29,-64,-1,-106,-28,-55,-127,127,106,4,127,81,-14,127,116,121,9,-59,-39,0,49,-37,39,-105,-2,-25,-53,-3,-9,-111,43,18,80,127,-16,-13,-64,127,59,-34, -127,43,127,119,127,-123,-127,-9,-18,-127,-127,-127,127,-30,0,37,13,-127,-95,-127,103,-13,-93,-112,127,-40,127,-61,127,127,-44,76,-127,-127,127,-127,71,-95,-127,-127,23,105,-106,19,-127,-71,127,127, -19,-1,8,21,42,127,-15,54,64,7,56,-46,-14,-21,-64,-7,66,47,-8,53,-78,-118,127,-16,10,127,15,-2,42,29,127,27,15,7,58,9,-35,71,46,-10,-2,91,127,-14,-47,-53,62,-5, 
  /* [0][2][][] */ -34,2,-54,-6,0,-15,22,-11,39,24,9,43,-5,-13,84,7,10,1,62,9,-44,-9,69,29,-1,-48,-12,-77,4,-13,-5,-33,-9,55,-8,-7,-86,-10,-7,5,19,-11,-32,-64,-10,13,-47,-38, -20,-49,56,-4,-75,-20,-82,-91,127,75,54,49,-9,-54,40,5,59,100,-29,-16,-71,-2,13,-41,0,-50,-66,-90,-14,-33,102,29,-49,51,-67,-15,4,-116,32,40,-127,-16,-113,127,36,-1,63,-51, 13,-16,24,-8,-37,27,21,-92,7,-10,-16,28,7,17,112,-110,32,-22,-27,-12,-74,6,37,6,-1,30,-29,10,-1,-26,22,15,-17,47,-43,-3,-122,80,-20,24,-3,-8,44,52,-15,-16,-58,-20, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.01010405644774437, 0.011763253249228001, 0.0082641113549470901, 0.013875903561711311, 0.015016981400549412, 0.018382348120212555, 0.0042988876812160015, 0.0093674873933196068, 0.0032263332977890968, 0.0097933104261755943, 0.015083876438438892, 0.020904028788208961, 0.01012392807751894, 0.0062003764323890209, 0.011473885737359524, 0.016280012205243111, 0.0027283465024083853, 0.083380088210105896, 0.016965538263320923, 0.0085650933906435966, 0.0047393869608640671, 0.021847741678357124, 0.0047810138203203678, 0.0072648264467716217, 0.011567565612494946, 0.010218280367553234, 0.012072822079062462, 0.011983205564320087, 0.029583662748336792, 0.010782348923385143, 0.0067109488882124424, 0.020353334024548531, 0.0027554901316761971, 0.015621147118508816, 0.008147289976477623, 0.026534503325819969, 0.0067778271622955799, 0.0088761039078235626, 0.038842014968395233, 0.014890948310494423, 0.0022840008605271578, 0.01500145997852087, 0.0069318879395723343, 0.0054000685922801495, 0.01030304841697216, 0.010756839998066425, 0.0054227719083428383, 0.015302416868507862, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { 8993, 4537, -1992, 7224, -625, -838, 3103, -1008, 1520, 4167, -1049, 45, -1898, 12548, 2697, -1167, -6199, -338, -1642, 214, 13061, 714, -13757, 29, -5548, 887, 526, 320, -1056, -1438, -6496, -169, 16458, -942, 379, 1923, -231, 4083, -423, 2449, 18494, -1068, 1647, -9, -1227, -218, -5278, 6845, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0002377425116719678, 0.00027678243350237608, 0.00019444967620074749, 0.00032649186323396862, 0.00035334075801074505, 0.00043252584873698652, 0.00010115029726875946, 0.00022041147167328745, 7.5913725595455617e-05, 0.00023043084365781397, 0.00035491475136950612, 0.0004918595077469945, 0.00023821007926017046, 0.0001458912156522274, 0.00026997379609383643, 0.00038305911584757268, 6.4196392486337572e-05, 0.0019618845544755459, 0.00039918915717862546, 0.0002015316131291911, 0.00011151498620165512, 0.00051406450802460313, 0.00011249444651184604, 0.00017093709902837873, 0.00027217803290113807, 0.00024043013399932534, 0.00028406639466993511, 0.00028195779304951429, 0.00069608620833605528, 0.00025370233925059438, 0.00015790468023624271, 0.00047890198766253889, 6.4835061493795365e-05, 0.0003675564075820148, 0.00019170095038134605, 0.00062434124993160367, 0.00015947829524520785, 0.00020884950936306268, 0.00091392977628856897, 0.00035037525231018662, 5.3741197916679084e-05, 0.0003529755340423435, 0.00016310325008817017, 0.00012706044071819633, 0.00024242467770818621, 0.00025310213095508516, 0.00012759464152622968, 0.00036005687434226274, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -27,-8,-9,-31,-66,-17,-8,-23,67,4,10,-9,12,17,-23,2,-31,10,-18,-13,0,10,-20,0,15,-8,81,9,-19,-84,-12,10,-2,30,127,-12,-20,-42,24,-41,25,5,-4,-16,-20,1,-16,-81, 
  /* [1][0][][] */ 21,-31,-14,62,1,-8,14,42,71,78,45,-47,-52,73,3,3,-11,-32,21,-22,-64,41,-47,34,85,13,-24,35,27,1,127,26,-15,-40,-30,0,-17,10,-25,-12,2,-21,3,25,-4,40,29,24, 
  /* [2][0][][] */ -71,-8,-80,112,-75,-76,28,-73,-78,34,56,-106,-27,-6,-50,1,118,34,-78,-41,-77,-18,-50,13,82,-45,119,-1,77,-21,-66,15,11,-25,50,-8,-54,29,-5,-107,62,-78,-58,-127,-15,-67,-64,107, 
  /* [3][0][][] */ 27,-48,13,-40,34,-19,-5,-68,42,-61,-1,-21,-87,-78,-12,13,10,-9,41,-44,-9,32,-83,6,80,-36,55,16,11,0,-4,-25,-38,39,24,-30,-58,32,3,-3,127,20,-45,34,-49,49,-15,-51, 
  /* [4][0][][] */ 24,6,13,16,8,35,-8,-8,42,24,6,-44,-4,4,-64,20,2,17,23,-23,-23,27,5,39,36,4,-28,3,48,-12,-19,27,-5,-4,29,19,-127,-1,53,14,13,-8,1,14,-36,46,-29,-99, 
  /* [5][0][][] */ -41,-96,30,115,-31,-9,-48,93,-95,85,49,26,-79,20,64,-44,-13,29,19,-1,-2,30,41,44,-53,10,-32,39,-47,-103,41,20,-104,-51,-28,-4,127,-11,-27,14,-38,-14,79,98,14,34,48,51, 
  /* [6][0][][] */ 84,-2,-15,-11,86,-31,-27,-64,41,26,34,-33,-7,7,6,1,-1,-3,-11,-23,-32,18,14,23,55,-55,46,0,-26,107,-18,8,43,26,-127,-20,-84,-39,24,-70,-14,-5,-9,-92,-7,3,-16,-9, 
  /* [7][0][][] */ -36,-78,59,-48,15,127,43,-57,3,-98,-53,-13,0,-24,-66,1,11,-59,106,69,50,-43,15,-6,-32,10,107,-9,48,22,14,-7,-36,-33,-52,108,-120,100,-41,-41,-47,54,10,-71,16,-19,74,-29, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0096297329291701317, 0.0072948150336742401, 0.003571509150788188, 0.0066564115695655346, 0.010650254786014557, 0.0052153943106532097, 0.0079991193488240242, 0.003838592441752553, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 6993, -12971, 977, 5576, 3280, -4880, 2884, 7129, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.0002265819493914023, 0.00017164270684588701, 8.4035513282287866e-05, 0.00015662144869565964, 0.00025059422478079796, 0.00012271516607142985, 0.00018821457342710346, 9.0319823357276618e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ -30,74,-61,56,39,127,50,25, 
  /* [1][0][][] */ 48,-127,-91,-26,-35,50,54,-35, 
  /* [2][0][][] */ -46,38,-45,-122,-37,-127,-39,-63, 
  /* [3][0][][] */ -13,127,66,24,5,-85,-29,31, 
  /* [4][0][][] */ -113,56,-127,87,9,-28,-44,-81, 
  /* [5][0][][] */ 82,-97,-127,27,4,-17,68,-40, 
  /* [6][0][][] */ -13,-88,-51,24,-127,-59,-48,83, 
  /* [7][0][][] */ -19,-41,-15,-39,44,5,-28,127, 
  /* [8][0][][] */ 15,31,-103,-107,43,-38,-127,-95, 
  /* [9][0][][] */ -127,71,0,115,-5,73,101,1, 
  /* [10][0][][] */ -25,-12,86,-127,-27,67,14,37, 
  /* [11][0][][] */ 120,-24,108,41,-46,52,79,127, 
  /* [12][0][][] */ 60,27,16,-47,53,114,91,-127, 
  /* [13][0][][] */ 32,58,-41,67,-6,-127,-44,60, 
  /* [14][0][][] */ 13,-127,-26,-34,12,66,34,-30, 
  /* [15][0][][] */ -102,-5,1,-76,61,127,-75,-30, 
  /* [16][0][][] */ 9,-38,110,10,-18,24,127,70, 
  /* [17][0][][] */ 61,18,49,28,-13,-84,-38,-127, 
  /* [18][0][][] */ -120,15,-78,-19,-6,-127,21,-86, 
  /* [19][0][][] */ 79,13,127,-18,-63,38,113,120, 
  /* [20][0][][] */ 26,127,51,-13,24,45,43,12, 
  /* [21][0][][] */ -37,27,20,-107,-66,127,3,-16, 
  /* [22][0][][] */ 24,-3,84,-18,-61,23,127,111, 
  /* [23][0][][] */ -66,124,64,55,-89,-93,-114,127, 
  /* [24][0][][] */ -15,-5,89,22,-120,127,-2,-96, 
  /* [25][0][][] */ -43,18,66,28,-127,42,-71,12, 
  /* [26][0][][] */ -46,-127,31,-42,11,40,-13,-12, 
  /* [27][0][][] */ -23,72,36,52,-25,127,-26,-21, 
  /* [28][0][][] */ 13,-127,56,23,60,126,33,42, 
  /* [29][0][][] */ 20,127,-17,25,-61,-61,-19,17, 
  /* [30][0][][] */ -41,70,100,80,-127,-57,-40,-95, 
  /* [31][0][][] */ 19,68,26,56,-49,-9,16,-127, 
  /* [32][0][][] */ -15,-31,-64,70,-127,-32,-47,3, 
  /* [33][0][][] */ 85,23,70,49,-38,63,51,127, 
  /* [34][0][][] */ 121,8,-127,-43,-59,-2,68,45, 
  /* [35][0][][] */ 120,92,101,-127,-55,-106,29,119, 
  /* [36][0][][] */ -44,-111,127,41,59,64,2,-36, 
  /* [37][0][][] */ -6,11,-22,2,-15,-59,-47,127, 
  /* [38][0][][] */ 127,0,55,5,-4,16,-64,37, 
  /* [39][0][][] */ 60,85,-109,-127,-102,87,38,-53, 
  /* [40][0][][] */ -36,127,-33,69,-47,-25,-55,-18, 
  /* [41][0][][] */ -127,45,-25,-52,71,46,3,-73, 
  /* [42][0][][] */ 46,-36,-2,-29,-26,127,15,86, 
  /* [43][0][][] */ -64,45,127,21,73,15,-36,3, 
  /* [44][0][][] */ 10,127,1,30,-47,-64,-16,2, 
  /* [45][0][][] */ -67,80,64,-127,-76,12,-59,-52, 
  /* [46][0][][] */ 50,-46,-8,22,30,5,-127,69, 
  /* [47][0][][] */ -106,-127,32,74,52,-89,9,99, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0029789786785840988, 0.0026403230149298906, 0.0030101824086159468, 0.00405539246276021, 0.0033234232105314732, 0.0029397103935480118, 0.0012976051075384021, 0.0021436777897179127, 0.0029862120281904936, 0.0019857096485793591, 0.0031346268951892853, 0.0036634535063058138, 0.0015074847033247352, 0.0054305815137922764, 0.0046704239211976528, 0.002725246362388134, 0.0063264146447181702, 0.0016568456776440144, 0.0029183761216700077, 0.0029949313029646873, 0.0035147690214216709, 0.0007218426326289773, 0.0027960711158812046, 0.0022788052447140217, 0.0026243464089930058, 0.0022562369704246521, 0.0033328556455671787, 0.002859894884750247, 0.0041079502552747726, 0.0052753104828298092, 0.0024649270344525576, 0.0023142206482589245, 0.0025454338174313307, 0.0041366247460246086, 0.001793853472918272, 0.00092912465333938599, 0.0023918370716273785, 0.0015236883191391826, 0.0019663905259221792, 0.0023093158379197121, 0.0039031470660120249, 0.0031241783872246742, 0.0026194825768470764, 0.0036968376953154802, 0.0026017236523330212, 0.0027638832107186317, 0.002093916991725564, 0.0020153182558715343, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 750, 2248, 1252, -164, -483, 26, 6531, 2613, 1456, -2266, 1229, 13, 4296, 11, 729, -1193, -49, 4042, 680, 1055, -649, 20976, 1460, -875, 955, 3191, 1687, -1446, 248, 54, -1783, -1385, 2804, 709, 4665, 10427, 3594, 5279, -2878, -1239, -624, 1645, 1155, 343, -1760, -1782, 2947, 887, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00031439590384252369, 0.00027865479933097959, 0.00031768908957019448, 0.00042799863149411976, 0.00035074795596301556, 0.00031025160569697618, 0.00013694685185328126, 0.00022623979020863771, 0.00031515929731540382, 0.00020956812659278512, 0.00033082271693274379, 0.00038663411396555603, 0.00015909715148154646, 0.00057313352590426803, 0.00049290788592770696, 0.00028761746943928301, 0.00066767813405022025, 0.00017486042634118348, 0.00030800001695752144, 0.00031607950222678483, 0.00037094223080202937, 7.618193922098726e-05, 0.00029509217711165547, 0.00024050089996308088, 0.00027696866891346872, 0.00023811908613424748, 0.00035174342337995768, 0.00030182802584022284, 0.00043354547233320773, 0.00055674649775028229, 0.00026014383183792233, 0.00024423855938948691, 0.00026864037499763072, 0.00043657171772792935, 0.00018931998056359589, 9.8058102594222873e-05, 0.00025243006530217826, 0.00016080724890343845, 0.00020752922864630818, 0.00024372093321289867, 0.00041193093056790531, 0.0003297200019005686, 0.00027645536465570331, 0.00039015742368064821, 0.00027458110707812011, 0.0002916951198130846, 0.00022098813496995717, 0.00021269296121317893, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -31,-77,-54,-51,-57,29,-43,-71,-74,57,36,-98,-34,25,-101,60,98,-70,-54,98,25,59,-64,102,-79,-75,57,72,67,-47,75,37,49,-49,-67,-28,-114,-71,118,43,-18,-21,37,82,7,114,-66,-67, -53,-124,-89,-89,-126,20,-84,-111,-81,97,77,-112,-67,86,-127,96,105,-98,-104,-20,68,78,87,98,-77,-84,102,98,102,-80,110,67,68,-99,-108,-57,-103,-82,119,78,-99,-76,59,96,49,123,-85,-102, -25,-69,-45,-41,-90,13,-68,-56,-69,43,43,-40,-24,93,-86,39,64,-43,-37,-62,51,-127,-65,48,-20,-57,42,35,44,-26,58,27,44,-40,-44,-17,-62,-39,16,20,-19,-44,40,40,-16,61,-42,-25, 
  /* [0][1][][] */ -89,-83,-77,-91,-105,-6,-81,-78,-94,88,66,-118,-72,69,-111,86,108,-100,-75,127,71,84,-70,127,-127,-98,71,112,80,-73,98,64,90,-80,-75,-70,-113,-96,109,77,-90,-71,65,78,102,127,-85,-75, -127,-127,-127,-127,-127,-124,-127,-127,-127,127,127,-127,-127,127,-81,127,127,-127,-127,-70,127,86,127,115,-120,-127,127,127,127,-127,127,127,127,-127,-127,-127,-127,-127,127,127,-127,-127,127,127,127,120,-127,-127, -66,-51,-88,-82,-125,-127,-103,-79,-87,62,63,-73,-44,108,-73,59,109,-58,-61,-127,90,-126,-78,61,-31,-77,38,50,74,-68,81,58,80,-72,-50,-55,-72,-71,51,55,-68,-65,61,63,44,33,-64,-49, 
  /* [0][2][][] */ -43,-11,-51,-37,-90,-14,-39,-48,-53,60,34,-43,-22,18,-54,26,42,-31,-29,42,54,25,-30,46,-43,-32,15,42,27,-20,31,17,58,-52,-56,-51,-21,-32,8,46,-74,-48,46,32,30,23,-50,-26, -64,-13,-87,-51,-108,-122,-62,-54,-74,88,52,-64,-36,67,-62,43,69,-30,-42,-66,81,4,53,9,-49,-54,31,52,50,-56,59,55,67,-92,-90,-76,-27,-36,13,67,-105,-74,84,60,59,0,-66,-46, -34,21,-53,-42,-57,-121,-67,-42,-40,61,26,-53,0,58,8,20,70,-24,-38,-81,49,-52,-34,23,0,-39,2,24,38,-28,28,33,52,-49,-58,-48,-3,-32,18,33,-53,-37,42,29,36,10,-28,-17, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0021663040388375521, 0.0029506490100175142, 0.0031597928609699011, 0.003306868951767683, 0.0042383852414786816, 0.0031758253462612629, 0.0065603391267359257, 0.0048026354052126408, 0.0014135903911665082, 0.0028420768212527037, 0.0031227082945406437, 0.0021029054187238216, 0.0068010631948709488, 0.0022054191213101149, 0.0032610499765723944, 0.0034929492976516485, 0.0011006646091118455, 0.002985574072226882, 0.0017864668043330312, 0.0047989087179303169, 0.0027667789254337549, 0.011039429344236851, 0.0042177485302090645, 0.0048726508393883705, 0.0019864239729940891, 0.0030836013611406088, 0.0030793601181358099, 0.0054317940957844257, 0.0024327177088707685, 0.0048648747615516186, 0.008859545923769474, 0.0088312514126300812, 0.0031058706808835268, 0.0031684788409620523, 0.004347371868789196, 0.0065642413683235645, 0.0040093939751386642, 0.0056061414070427418, 0.0054397378116846085, 0.0039387834258377552, 0.006780209019780159, 0.0016344171017408371, 0.0036377208307385445, 0.0026397861074656248, 0.020993666723370552, 0.0060390578582882881, 0.0033646782394498587, 0.0035314259584993124, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 23765, 23077, 9236, 17420, 8177, 10421, 19448, 8830, 56880, -2019, -424, 22569, 14494, -4470, 7615, 143, 8890, 32357, 20188, 1450, 5101, -8646, -1100, -158, 39774, 34920, 2015, -317, -430, 12050, -1710, 1701, -16453, 16340, 26840, 25241, 24900, 21874, -63, -497, 6592, 42386, -835, -843, 210, -1581, 22004, 10670, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 5.097185930935666e-05, 6.9427034759428352e-05, 7.4348070484120399e-05, 7.7808683272451162e-05, 9.9726712505798787e-05, 7.4725307058542967e-05, 0.00015436092508025467, 0.00011300318874418736, 3.3260952477576211e-05, 6.6872395109385252e-05, 7.3475493991281837e-05, 4.9480127927381545e-05, 0.00016002502525225282, 5.1892217015847564e-05, 7.6730590080842376e-05, 8.2187041698489338e-05, 2.5897990781231783e-05, 7.0248803240247071e-05, 4.2034513171529397e-05, 0.00011291549890302122, 6.5100684878416359e-05, 0.00025975127937272191, 9.9241144198458642e-05, 0.00011465061106719077, 4.6739387471461669e-05, 7.2555325459688902e-05, 7.2455535701010376e-05, 0.0001278069248655811, 5.7240416936110705e-05, 0.0001144676425610669, 0.00020845991093665361, 0.00020779416081495583, 7.3079310823231936e-05, 7.4552444857545197e-05, 0.00010229110193904489, 0.00015445274766534567, 9.4338683993555605e-05, 0.00013190921163186431, 0.00012799382966477424, 9.2677255452144891e-05, 0.00015953433467075229, 3.8456873880932108e-05, 8.5593434050679207e-05, 6.2112616433296353e-05, 0.00049396866234019399, 0.00014209547953214496, 7.9168901720549911e-05, 8.3092374552506953e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[8*1*1*48] = { 
  /* [0][0][][] */ -26,20,5,30,-22,11,1,34,-49,-5,-39,0,-14,17,38,2,-47,-21,29,-17,-26,127,-20,-21,-26,-38,3,35,-37,34,10,-22,-5,24,35,41,24,7,32,-20,1,-35,-21,-11,-19,23,25,13, 
  /* [1][0][][] */ 9,52,0,52,34,33,41,113,-46,-49,84,-35,-44,-37,24,-20,-23,-1,40,1,26,-127,-8,-69,11,14,-12,11,-3,12,-36,-63,-42,-1,16,-14,14,62,68,-24,28,23,43,-35,-38,46,4,49, 
  /* [2][0][][] */ -1,22,0,29,24,16,-30,35,21,10,62,20,6,-13,29,-50,18,25,-7,8,-18,127,7,-11,18,-43,-3,-1,-22,31,-18,-56,-13,8,14,-34,27,-12,-40,-28,24,-13,-7,-49,-34,33,11,19, 
  /* [3][0][][] */ -41,48,-7,3,-18,33,67,0,-1,8,7,14,-18,34,43,16,-13,0,7,0,46,-81,-11,18,-16,4,-127,30,-33,-28,-11,7,-43,-15,11,28,31,-13,-36,-27,3,-16,13,18,22,-10,40,17, 
  /* [4][0][][] */ 21,2,-45,4,20,-5,22,-13,-54,10,2,22,9,-8,-17,15,-27,37,-17,-6,4,-127,-7,-2,36,30,34,-44,44,-6,-2,7,-14,47,33,-11,-18,15,-5,10,-10,-62,-84,24,33,37,0,-12, 
  /* [5][0][][] */ 0,56,81,2,1,32,18,-99,70,-36,-14,-2,94,-64,3,18,17,-35,38,-3,-28,127,17,11,84,-1,86,44,92,55,0,-31,-65,-39,107,40,-47,-49,-5,-108,11,-17,58,67,-45,-40,-25,-28, 
  /* [6][0][][] */ 65,-10,-24,14,44,-21,44,-43,43,32,-3,-29,-14,52,16,-78,19,-127,-25,-11,25,-19,-9,24,-45,-37,43,-18,58,-41,121,50,52,49,32,-49,-61,19,60,-29,-32,24,-75,64,36,4,41,-43, 
  /* [7][0][][] */ -18,52,50,55,-6,19,70,105,56,35,3,77,-60,-7,37,-12,91,-15,-35,-14,1,-127,1,-101,-81,78,56,24,5,24,21,-20,23,-23,22,30,-14,111,-95,-25,7,-6,29,-10,-49,5,47,17, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant24_scale = { 8, { 0.010775609873235226, 0.0073831826448440552, 0.0084865465760231018, 0.0062029389664530754, 0.0072573120705783367, 0.0039117648266255856, 0.0058254455216228962, 0.0051733478903770447, } };
const TfArray<8, int> quant24_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[8] = { 6199, -1067, -2139, 3819, 1301, -17644, -2599, -11280, };
const TfArray<1, int> tensor_dimension25 = { 1, { 8 } };
const TfArray<8, float> quant25_scale = { 8, { 0.00025354375247843564, 0.00017372194270137697, 0.00019968344713561237, 0.00014595150423701853, 0.00017076029325835407, 9.2041525931563228e-05, 0.00013706930621992797, 0.00012172583228675649, } };
const TfArray<8, int> quant25_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[48*1*1*8] = { 
  /* [0][0][][] */ 71,-90,43,0,44,-127,-12,-78, 
  /* [1][0][][] */ -55,-46,-70,65,-127,61,-34,13, 
  /* [2][0][][] */ 57,-46,56,-23,127,-17,-9,75, 
  /* [3][0][][] */ -17,127,-14,100,10,14,-56,-39, 
  /* [4][0][][] */ -33,127,71,-43,46,20,-69,22, 
  /* [5][0][][] */ -94,31,3,12,127,-20,81,-22, 
  /* [6][0][][] */ 101,-55,109,5,50,127,85,-26, 
  /* [7][0][][] */ -33,-44,55,62,90,19,-56,127, 
  /* [8][0][][] */ 0,2,-32,-78,-3,127,-72,11, 
  /* [9][0][][] */ -127,27,-82,-5,94,-33,-62,9, 
  /* [10][0][][] */ -22,-81,47,33,-31,-97,-127,-84, 
  /* [11][0][][] */ 40,89,-23,-9,-26,-76,26,127, 
  /* [12][0][][] */ 41,-46,-89,42,-85,127,44,91, 
  /* [13][0][][] */ -47,-26,-127,18,-87,90,16,38, 
  /* [14][0][][] */ -61,127,-80,79,81,40,-16,74, 
  /* [15][0][][] */ -78,-12,-10,-7,77,69,-59,-127, 
  /* [16][0][][] */ 77,-127,-94,-43,-50,113,-61,-14, 
  /* [17][0][][] */ 19,127,-107,-54,-78,37,63,-121, 
  /* [18][0][][] */ -92,-123,46,10,127,-69,-44,92, 
  /* [19][0][][] */ -64,105,-31,50,6,-117,-127,57, 
  /* [20][0][][] */ 77,-16,33,-61,1,-60,22,127, 
  /* [21][0][][] */ 70,-48,127,101,-46,103,85,-22, 
  /* [22][0][][] */ -40,120,15,-2,126,-64,-127,-76, 
  /* [23][0][][] */ 23,-38,22,127,2,-49,58,-30, 
  /* [24][0][][] */ -26,48,127,-71,-24,-21,10,-32, 
  /* [25][0][][] */ -59,-115,103,70,36,2,-37,127, 
  /* [26][0][][] */ 72,-33,-127,-91,-102,57,28,101, 
  /* [27][0][][] */ 36,127,-100,-59,-46,29,26,-118, 
  /* [28][0][][] */ -25,52,-51,-94,-16,-35,-127,-42, 
  /* [29][0][][] */ -125,50,-127,-46,117,65,-47,-18, 
  /* [30][0][][] */ 87,-58,20,-26,-127,115,116,61, 
  /* [31][0][][] */ -48,79,-22,81,127,-74,-22,-5, 
  /* [32][0][][] */ 5,74,46,-45,127,-37,-12,-81, 
  /* [33][0][][] */ -127,56,-110,5,45,32,-34,6, 
  /* [34][0][][] */ 42,-5,51,-77,-24,-127,58,104, 
  /* [35][0][][] */ -127,31,46,-20,-71,12,6,-3, 
  /* [36][0][][] */ -7,-40,-39,36,-16,8,127,37, 
  /* [37][0][][] */ -29,-26,-73,-42,-32,-127,-74,-8, 
  /* [38][0][][] */ -102,30,27,14,-127,16,37,8, 
  /* [39][0][][] */ -31,-64,41,-38,-43,91,-127,-114, 
  /* [40][0][][] */ 67,-127,19,71,-50,-50,115,61, 
  /* [41][0][][] */ 24,127,87,46,28,33,-94,-35, 
  /* [42][0][][] */ 33,127,-35,-14,-31,17,-13,-44, 
  /* [43][0][][] */ -59,61,-81,-127,13,21,-59,74, 
  /* [44][0][][] */ -46,18,-18,12,32,127,-4,-7, 
  /* [45][0][][] */ -6,96,-83,-38,-64,-84,-21,127, 
  /* [46][0][][] */ 23,126,-106,-39,-62,33,5,-127, 
  /* [47][0][][] */ 22,9,-5,-60,-64,-127,-28,37, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant26_scale = { 48, { 0.00095139176119118929, 0.0053185010328888893, 0.0050458614714443684, 0.0037911816034466028, 0.0033326717093586922, 0.0022424319759011269, 0.0015536741120740771, 0.0038509161677211523, 0.0015368640888482332, 0.0014038000954315066, 0.0028335780370980501, 0.0021779653616249561, 0.0044314428232610226, 0.0035328103695064783, 0.0015796251827850938, 0.0025259011890739202, 0.0019844735506922007, 0.0033953522797673941, 0.0030123062897473574, 0.0019035238074138761, 0.0029593100771307945, 0.002097179414704442, 0.0028317819815129042, 0.0053774625994265079, 0.0022447190713137388, 0.0035705612972378731, 0.002173662418499589, 0.0062016998417675495, 0.0024880499113351107, 0.0019506090320646763, 0.0017951293848454952, 0.0016763153253123164, 0.0031010040547698736, 0.001923592179082334, 0.0031300303526222706, 0.0055391816422343254, 0.002553408732637763, 0.0044796345755457878, 0.0061491904780268669, 0.0014628287171944976, 0.0035537378862500191, 0.0026067066937685013, 0.0052677923813462257, 0.0025321312714368105, 0.0024726884439587593, 0.0018682526424527168, 0.0037353909574449062, 0.0032778873573988676, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[48] = { 15580, -393, 1155, 1102, 2778, 969, 5443, -412, 7919, 7089, -454, -258, 1526, 1388, 86, 3206, 3879, 2932, -1748, -836, 3288, 2130, 3096, 110, 3981, 2863, 5698, -547, 4982, -57, 6110, 4469, 3795, 551, 1460, 1542, 3547, 1231, 1130, 2148, -278, 3685, 1887, 3753, 4807, 1973, 285, 2861, };
const TfArray<1, int> tensor_dimension27 = { 1, { 48 } };
const TfArray<48, float> quant27_scale = { 48, { 6.9322377385105938e-05, 0.00038752818363718688, 0.00036766252014786005, 0.00027624130598269403, 0.00024283237871713936, 0.0001633929496165365, 0.00011320718476781622, 0.00028059384203515947, 0.00011198233551112935, 0.00010228673636447638, 0.00020646632765419781, 0.00015869564958848059, 0.0003228934365324676, 0.00025741531862877309, 0.00011509808246046305, 0.00018404770526103675, 0.00014459702651947737, 0.00024739955551922321, 0.00021948921494185925, 0.00013869869871996343, 0.00021562768961302936, 0.00015280925435945392, 0.00020633546228054911, 0.00039182437467388809, 0.00016355959814973176, 0.00026016600895673037, 0.0001583821140229702, 0.00045188172953203321, 0.00018128970987163484, 0.00014212951646186411, 0.00013080061762593687, 0.00012214333401061594, 0.0002259520988445729, 0.0001401609624736011, 0.00022806707420386374, 0.00040360790444537997, 0.00018605201330501586, 0.00032640487188473344, 0.00044805568177253008, 0.0001065878095687367, 0.0002589401847217232, 0.00018993552657775581, 0.00038383333594538271, 0.00018450165225658566, 0.00018017040565609932, 0.00013612868497148156, 0.00027217617025598884, 0.00023884055553935468, } };
const TfArray<48, int> quant27_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*48] = { 
  /* [0][0][][] */ -117,-13,46,-8,-127,9,-121,-7,-4,127,70,16,-48,53,19,31,26,13,22,-16,-104,-20,-1,39,-21,-5,-4,-69,27,-120,82,49,-4,27,49,-34,23,-127,-23,127,-65,42,-11,-4,-2,4,12,-16, 9,-127,-13,32,-66,29,-127,-14,32,21,127,75,-82,-76,-77,-47,-2,-56,111,81,25,74,-44,15,-85,-20,6,-127,11,-69,-29,-82,-9,13,-48,-127,-18,-6,16,85,127,-13,-16,127,18,-127,16,-35, -127,33,52,11,-98,21,-78,-6,2,89,-7,-9,-62,53,22,59,-47,-21,21,-34,-87,-30,47,11,13,-32,13,-48,-34,-127,47,14,3,14,-51,-31,22,-90,15,109,-68,32,-10,9,9,17,13,51, 
  /* [0][1][][] */ 56,-14,21,-4,-91,3,65,-14,-54,63,45,42,-55,-39,-67,106,-35,0,50,126,4,45,-108,-18,-27,-116,-15,-68,127,20,35,127,-127,3,102,8,0,39,-107,-123,35,-18,10,12,-127,38,-6,-59, 120,-36,-127,-127,52,127,-16,127,-127,-100,-36,127,-57,-127,-127,-127,-19,-127,-79,63,127,127,-66,90,-127,79,-123,89,-54,-48,-127,-75,17,127,-127,119,-127,-63,127,-57,-74,127,-127,-78,123,72,-127,-84, 62,-1,75,7,-47,-31,10,-22,-27,12,5,-25,-49,-81,-67,99,-127,-56,32,127,-25,50,-17,-127,29,-88,127,-6,-48,99,-50,97,115,-34,-55,22,-7,-11,-4,-46,12,-15,-10,-4,6,33,-20,127, 
  /* [0][2][][] */ -118,-45,39,-34,-57,14,80,-4,93,73,106,10,-33,54,25,-18,53,45,14,-17,-59,-19,5,33,-20,-24,-6,8,10,29,74,7,-3,20,77,22,25,-34,-41,2,-40,16,1,-11,-2,-3,-23,-3, -77,-119,59,-67,-75,-17,119,-4,101,52,102,-40,127,-106,-76,-31,-33,35,-127,24,-71,14,-127,-7,20,-127,-4,29,6,64,9,-54,0,-35,-20,37,-8,58,52,-67,-5,9,18,-40,36,-25,-14,2, -64,9,34,-8,-76,38,49,-7,54,28,12,21,-106,30,24,-8,-47,42,13,-25,-47,-28,60,-60,-2,-32,11,29,-14,29,24,-18,-2,28,-28,19,28,-41,1,-28,-44,39,16,3,-2,13,-2,-14, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.012809942476451397, 0.007638649083673954, 0.003899045754224062, 0.0062541752122342587, 0.0018567310180515051, 0.017969332635402679, 0.0083760730922222137, 0.013129483908414841, 0.016689484938979149, 0.0095629366114735603, 0.0050409482792019844, 0.012133697047829628, 0.0041410042904317379, 0.0059202453121542931, 0.015376207418739796, 0.0058376356028020382, 0.0059776925481855869, 0.0066304886713624001, 0.017242850735783577, 0.0079778190702199936, 0.0074844337068498135, 0.0073533086106181145, 0.004862325731664896, 0.010134326294064522, 0.0075057405047118664, 0.0052899522706866264, 0.01929054968059063, 0.0094576263800263405, 0.01545192115008831, 0.0098882997408509254, 0.0077093369327485561, 0.021849207580089569, 0.011090314015746117, 0.026586029678583145, 0.0059256074018776417, 0.0073324311524629593, 0.01308743841946125, 0.0067978505976498127, 0.0076231751590967178, 0.010034906677901745, 0.0081358850002288818, 0.0072444649413228035, 0.011405986733734608, 0.01663985475897789, 0.014644998125731945, 0.014825836755335331, 0.010430049151182175, 0.011361125856637955, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[48] = { 7136, 3881, 9487, 8934, 40717, -2322, 154, 164, -2236, -11310, -1808, -1806, 11597, 9583, 4610, 1090, 6174, 8125, 413, -4474, 4689, -2731, 9677, 107, 3866, 11947, -465, 184, -739, 2604, 9530, -1902, -297, -1534, 604, -652, 5579, 3931, -784, -240, 7389, -6481, 5300, -334, -3067, 1842, 5609, -783, };
const TfArray<1, int> tensor_dimension29 = { 1, { 48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.00030141041497699916, 0.0001797329168766737, 9.1742251242976636e-05, 0.00014715707220602781, 4.3687789002433419e-05, 0.00042280784691683948, 0.00019708408217411488, 0.00030892904032953084, 0.00039269376429729164, 0.00022501028433907777, 0.0001186105509987101, 0.00028549876878969371, 9.7435397037770599e-05, 0.00013929989654570818, 0.00036179312155582011, 0.00013735613902099431, 0.00014065159484744072, 0.00015601150516886264, 0.00040571414865553379, 0.00018771339091472328, 0.00017610432405490428, 0.00017301902698818594, 0.00011440766684245318, 0.00023845474061090499, 0.00017660566663835198, 0.00012446947221178561, 0.00045389530714601278, 0.00022253238421399146, 0.00036357462522573769, 0.00023266588686965406, 0.00018139617168344557, 0.00051409902516752481, 0.00026094858185388148, 0.00062555365730077028, 0.00013942606165073812, 0.00017252779798582196, 0.00030793974292464554, 0.00015994942805264145, 0.00017936882795765996, 0.00023611546203028411, 0.00019143259851261973, 0.0001704580063233152, 0.00026837617042474449, 0.00039152600220404565, 0.00034458818845450878, 0.00034884322667494416, 0.00024541292805224657, 0.00026732060359790921, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[8*1*1*48] = { 
  /* [0][0][][] */ 127,-14,-12,-6,-20,-84,-29,-8,59,-40,-52,-21,-25,77,-47,4,8,-4,3,11,28,-31,9,10,42,6,2,25,3,62,-41,-85,18,-64,13,-25,30,-37,-11,31,-63,-27,-23,-42,-74,-79,11,-24, 
  /* [1][0][][] */ -80,-8,82,-65,51,35,33,16,-25,23,-3,91,22,-31,-127,-46,-97,-78,38,-17,10,83,-52,-5,13,-97,27,102,40,-25,36,34,42,45,-12,32,-65,-28,19,6,9,-22,-101,15,-24,-62,-100,21, 
  /* [2][0][][] */ 96,39,-26,-66,-52,-9,-50,-93,28,30,-83,-54,-18,55,-63,45,-15,79,14,11,61,52,1,0,-127,18,26,-56,9,35,32,-90,16,-37,15,27,-52,-53,11,23,-119,-112,-28,-58,-50,-102,33,0, 
  /* [3][0][][] */ 16,2,21,23,-103,-23,-6,50,-24,-58,-10,76,14,-19,-81,-46,-33,26,8,-56,-42,127,15,-56,24,44,51,-46,16,13,9,25,32,26,19,-2,46,53,25,-2,38,-22,23,-51,-14,9,23,36, 
  /* [4][0][][] */ -48,17,-127,15,-8,103,23,43,-24,127,40,67,25,-73,-16,29,-18,-3,-18,36,-14,41,-74,25,2,0,52,-19,39,-66,124,97,50,48,16,-56,-86,18,2,-14,43,16,32,37,53,46,31,64, 
  /* [5][0][][] */ -33,1,36,-10,59,-66,-35,-29,-35,-63,9,-32,41,5,-13,2,28,-5,2,30,15,64,22,18,17,-4,-33,-11,-36,-4,-127,-13,-43,-13,29,-23,-6,-30,2,-16,-14,-2,-32,-8,31,37,-4,46, 
  /* [6][0][][] */ 11,54,-5,75,-14,33,-57,53,-85,-36,55,20,43,17,48,17,3,-46,-48,33,0,68,36,-33,-86,-8,-40,19,-96,-9,-94,7,8,-43,-38,-65,127,-4,-53,-51,47,29,42,-48,-75,-15,-54,-37, 
  /* [7][0][][] */ -46,15,-80,29,-19,-5,-7,-4,-55,-47,39,70,40,16,-61,-69,-64,84,-6,-7,41,18,36,-33,-39,96,-51,-108,-47,-7,-100,-7,-15,-40,-51,-4,-29,-38,-51,-18,-25,42,51,-16,-54,-56,127,-56, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant30_scale = { 8, { 0.0023338648024946451, 0.0032120300456881523, 0.0039562568999826908, 0.0036402547266334295, 0.0029601871501654387, 0.0037843408063054085, 0.0028173620812594891, 0.0030546940397471189, } };
const TfArray<8, int> quant30_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[8] = { 15075, 7029, 15857, -5474, -15130, 9490, 4356, 14228, };
const TfArray<1, int> tensor_dimension31 = { 1, { 8 } };
const TfArray<8, float> quant31_scale = { 8, { 5.4914467909839004e-05, 7.5577176176011562e-05, 9.3088397989049554e-05, 8.5653053247369826e-05, 6.965146167203784e-05, 8.904331480152905e-05, 6.6290871473029256e-05, 7.1875154389999807e-05, } };
const TfArray<8, int> quant31_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[48*1*1*8] = { 
  /* [0][0][][] */ -6,-58,-53,108,18,-75,-80,-127, 
  /* [1][0][][] */ 127,-24,38,-23,29,-79,-2,31, 
  /* [2][0][][] */ -7,44,12,-127,11,91,-55,57, 
  /* [3][0][][] */ -19,127,-48,-100,-107,7,25,-90, 
  /* [4][0][][] */ -8,-51,-97,-26,29,-72,-77,-127, 
  /* [5][0][][] */ -52,-80,95,45,18,119,42,-127, 
  /* [6][0][][] */ -1,11,-51,38,11,11,-127,-39, 
  /* [7][0][][] */ 29,-25,2,29,-41,54,127,73, 
  /* [8][0][][] */ 9,34,-85,-21,-56,-127,-55,66, 
  /* [9][0][][] */ 52,12,-61,-24,17,127,-48,106, 
  /* [10][0][][] */ -22,53,77,127,94,114,1,-50, 
  /* [11][0][][] */ -30,-58,-11,45,-127,73,-12,-27, 
  /* [12][0][][] */ -26,34,64,-48,82,-91,-127,-58, 
  /* [13][0][][] */ 51,15,-72,-127,-32,-53,-47,111, 
  /* [14][0][][] */ -46,-127,12,-82,-11,-86,13,-114, 
  /* [15][0][][] */ 3,75,65,111,112,127,-10,-22, 
  /* [16][0][][] */ 38,12,-20,-127,42,82,-62,85, 
  /* [17][0][][] */ -95,76,-127,44,31,100,-73,55, 
  /* [18][0][][] */ -127,57,19,-12,-81,18,-25,6, 
  /* [19][0][][] */ 127,14,-44,-26,106,-67,67,-99, 
  /* [20][0][][] */ 127,-56,38,-31,-70,21,84,9, 
  /* [21][0][][] */ 22,-41,-33,38,-8,33,127,30, 
  /* [22][0][][] */ 100,33,-127,-93,15,116,72,124, 
  /* [23][0][][] */ -31,42,-49,-87,45,0,-127,19, 
  /* [24][0][][] */ 127,-72,-108,-17,115,-52,6,16, 
  /* [25][0][][] */ -38,-79,75,-55,56,127,-13,-105, 
  /* [26][0][][] */ 19,-60,34,23,127,-61,-39,-53, 
  /* [27][0][][] */ -15,-127,54,83,6,-15,-35,102, 
  /* [28][0][][] */ -39,74,-110,-51,127,-102,-48,114, 
  /* [29][0][][] */ -77,27,127,-87,23,-39,44,28, 
  /* [30][0][][] */ 93,-74,70,-28,-48,-127,57,-17, 
  /* [31][0][][] */ 20,31,46,-3,-23,-11,-127,15, 
  /* [32][0][][] */ 12,-17,13,127,-22,-87,-48,-80, 
  /* [33][0][][] */ 108,-103,-54,111,-127,106,-71,-42, 
  /* [34][0][][] */ 9,-90,14,-73,-105,127,44,-35, 
  /* [35][0][][] */ 20,127,91,20,8,19,-67,0, 
  /* [36][0][][] */ 19,118,-89,-127,-89,4,86,-90, 
  /* [37][0][][] */ 35,-2,49,8,35,127,57,12, 
  /* [38][0][][] */ -75,-80,85,67,29,-7,-69,127, 
  /* [39][0][][] */ 10,38,127,-46,-33,45,-32,38, 
  /* [40][0][][] */ 15,5,27,-5,-1,-32,127,6, 
  /* [41][0][][] */ -26,2,-68,-127,-73,-105,-72,36, 
  /* [42][0][][] */ 49,-17,68,-33,-127,-42,-49,18, 
  /* [43][0][][] */ 72,-14,36,32,-66,-118,127,26, 
  /* [44][0][][] */ -89,-127,-2,-86,-12,20,-10,-125, 
  /* [45][0][][] */ 13,119,83,75,47,127,-75,26, 
  /* [46][0][][] */ -100,-17,-6,76,118,56,-75,127, 
  /* [47][0][][] */ 26,76,-52,-31,6,-51,43,-127, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant32_scale = { 48, { 0.0035981172695755959, 0.0030736103653907776, 0.0039485343731939793, 0.002482931362465024, 0.0031028564553707838, 0.0016344721661880612, 0.0040112868882715702, 0.00068137265043333173, 0.0020924708805978298, 0.0042556049302220345, 0.0020431810989975929, 0.002235358115285635, 0.0027931239455938339, 0.0016822242178022861, 0.0020934089552611113, 0.0027566766366362572, 0.00164653523825109, 0.0017029670998454094, 0.0045181754976511002, 0.0035156963858753443, 0.0016949851997196674, 0.0039473897777497768, 0.0030257571488618851, 0.0011953517096117139, 0.0031007949728518724, 0.0013269615592435002, 0.0035274308174848557, 0.0035535308998078108, 0.00098441180307418108, 0.0049715698696672916, 0.0022194827906787395, 0.0045346585102379322, 0.0060870833694934845, 0.0014382391236722469, 0.001315727480687201, 0.0035943544935435057, 0.0023694350384175777, 0.0028866480570286512, 0.0033494455274194479, 0.0023250922095030546, 0.0039807022549211979, 0.0033323538955301046, 0.0016830384265631437, 0.0022578362841159105, 0.00098059268202632666, 0.0022053313441574574, 0.0017418524948880076, 0.0036501591093838215, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[48] = { -1247, -2282, 2269, -615, -1999, 2303, 1750, 26774, 1980, 1917, 5063, 2783, 1756, 7271, 5325, -2184, 8541, 2366, 817, -2373, 273, -729, 1578, 11351, 752, 6899, 2511, -60, 7838, 200, 1890, -1131, -1025, -3537, -5559, 1513, 3122, 1847, 2040, 2958, 2436, 1058, 5690, 3215, 12907, 4512, -2044, 836, };
const TfArray<1, int> tensor_dimension33 = { 1, { 48 } };
const TfArray<48, float> quant33_scale = { 48, { 0.00025112918228842318, 0.00021452143846545368, 0.00027558641158975661, 0.00017329522233922035, 0.00021656265016645193, 0.00011407734564272687, 0.00027996621793136001, 4.7556139179505408e-05, 0.00014604319585487247, 0.00029701829771511257, 0.00014260302123147994, 0.00015601594350300729, 0.00019494499429129064, 0.00011741018533939496, 0.00014610866492148489, 0.00019240117399021983, 0.0001149192830780521, 0.00011885792628163472, 0.00031534431036561728, 0.00024537666467949748, 0.00011830082803498954, 0.00027550652157515287, 0.00021118154108989984, 8.3429105870891362e-05, 0.00021641877538058907, 9.261476225219667e-05, 0.00024619564646854997, 0.00024801731342449784, 6.8706634920090437e-05, 0.000346988788805902, 0.00015490793157368898, 0.00031649472657591105, 0.0004248456098139286, 0.00010038133768830448, 9.1830683231819421e-05, 0.00025086657842621207, 0.00016537379997316748, 0.00020147247414570302, 0.00023377324396278709, 0.00016227889864239842, 0.00027783156838268042, 0.00023258033616002649, 0.00011746701056836173, 0.00015758480003569275, 6.8440087488852441e-05, 0.00015392023487947881, 0.00012157191667938605, 0.00025476142764091492, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*48] = { 
  /* [0][0][][] */ 66,116,45,17,-6,-74,35,24,-65,-26,-26,50,45,13,-7,27,55,-50,102,76,68,-15,6,7,-7,-63,74,-5,-38,-88,14,48,14,-91,15,31,-55,51,-18,-127,-10,-99,-38,-17,20,-122,75,-127, 127,23,63,-87,55,51,37,-39,-96,-97,14,127,6,-43,-127,53,-2,127,72,47,28,72,87,21,127,-61,-7,-127,-127,-54,-127,127,20,-83,-84,127,13,-71,-89,-122,10,127,-85,29,-49,-61,127,17, 59,21,23,-82,-22,-56,32,17,-52,-25,10,38,22,28,51,-1,-44,9,71,34,-17,-39,-62,-13,-8,-61,-69,-35,-43,-79,-5,2,48,-47,32,20,-56,-46,-5,-83,0,-35,113,-26,0,-127,16,-65, 
  /* [0][1][][] */ 87,-5,20,57,45,74,-3,-127,87,-127,-127,-77,6,43,-65,127,-127,115,82,70,12,103,82,-42,-9,125,107,11,27,-37,-103,31,67,85,-75,48,-79,4,-3,-78,-23,-61,30,-98,64,-30,86,-9, 18,127,-127,88,127,52,-127,18,108,-11,-35,79,-127,127,-22,22,48,-127,-127,-14,113,42,127,-127,-93,81,-29,-6,5,-33,64,-8,127,-13,118,-60,112,-127,127,91,127,64,-127,-5,127,40,-125,4, 34,-2,8,-127,40,46,9,-85,127,-46,-104,-17,9,37,-55,92,78,-2,18,38,47,-127,50,101,-64,127,-77,-26,52,-21,-57,34,-2,70,127,34,-60,-25,-57,-18,-26,-36,124,127,123,-42,91,-20, 
  /* [0][2][][] */ 10,41,27,50,9,-1,32,24,-10,-25,-18,-12,46,-57,51,-49,-7,22,85,-23,127,0,2,-60,-79,-55,119,74,-11,-109,-87,50,12,35,-11,9,-80,37,-2,6,-24,-86,20,-17,20,-18,15,-41, 52,0,3,14,9,-127,0,-66,-21,-31,-14,-26,-6,-48,-7,42,6,-49,28,127,89,74,57,13,42,-52,-67,37,-114,-47,-82,26,-7,127,-58,15,-116,-102,23,-28,-100,66,-21,13,-40,-72,115,-10, 9,-3,26,-68,13,-10,39,32,-13,-8,17,4,41,-52,64,-39,-1,-34,61,-110,29,-61,-67,49,-66,-58,-127,27,-2,-127,13,28,40,-33,-6,44,-127,-62,-26,-15,-30,-25,-7,6,-13,8,-48,-54, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.0038048499263823032, 0.015211467631161213, 0.0092346044257283211, 0.010073333978652954, 0.0063320472836494446, 0.019188191741704941, 0.011515563353896141, 0.0225174929946661, 0.0089953728020191193, 0.0049968892708420753, 0.0053698830306529999, 0.0068442891351878643, 0.010124223306775093, 0.010908740572631359, 0.0081128533929586411, 0.0090464288368821144, 0.024105140939354897, 0.013407167978584766, 0.0033500383142381907, 0.0081640072166919708, 0.0076298885978758335, 0.012381371110677719, 0.0042359656654298306, 0.018667034804821014, 0.0064985873177647591, 0.01377128716558218, 0.0037235342897474766, 0.0095347808673977852, 0.0087042078375816345, 0.0043048607185482979, 0.0068847420625388622, 0.0082900635898113251, 0.010134492069482803, 0.018569186329841614, 0.014630550518631935, 0.006035397294908762, 0.0051827537827193737, 0.0043660406954586506, 0.015162295661866665, 0.0069483467377722263, 0.0095284935086965561, 0.009993269108235836, 0.0059533370658755302, 0.011360783129930496, 0.010301965288817883, 0.0038993027992546558, 0.0046609891578555107, 0.0059074973687529564, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[48] = { -838, -2402, 2393, -118, -460, 581, 2835, 11734, -5289, 12604, 11131, -2430, 3986, -1920, 4933, -757, -510, -1024, 3070, -2557, -4384, -1814, -14357, 813, 4277, 187, -579, 2942, 7949, 8291, 9148, -1916, -6122, -84, -2506, -5224, 6580, 5724, -2207, 10484, 2786, 862, -4226, -1595, -7670, 13596, 294, 5304, };
const TfArray<1, int> tensor_dimension35 = { 1, { 48 } };
const TfArray<48, float> quant35_scale = { 48, { 8.9525885414332151e-05, 0.00035791689879260957, 0.00021728481806349009, 0.00023701963073108345, 0.00014898934750817716, 0.0004514868778642267, 0.00027095444966107607, 0.00052982335910201073, 0.000211655831662938, 0.00011757386528188363, 0.0001263501908397302, 0.00016104210226330906, 0.00023821702052373439, 0.0002566762559581548, 0.00019089067063760012, 0.0002128571504727006, 0.00056717981351539493, 0.00031546279205940664, 7.8824436059221625e-05, 0.0001920942886499688, 0.00017952678899746388, 0.00029132637428119779, 9.9669785413425416e-05, 0.00043922435725107789, 0.0001529079454485327, 0.00032403029035776854, 8.7612570496276021e-05, 0.00022434779384639114, 0.00020480489183682948, 0.00010129083966603503, 0.00016199392848648131, 0.00019506031821947545, 0.00023845864052418619, 0.00043692204053513706, 0.00034424825571477413, 0.00014200934674590826, 0.00012194715236546472, 0.00010273037332808599, 0.00035675990511663258, 0.0001634905202081427, 0.00022419984452426434, 0.00023513575433753431, 0.0001400785258738324, 0.0002673125418368727, 0.00024239918275270611, 9.1748304839711636e-05, 0.00010967033449560404, 0.00013899993791710585, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[8*1*1*48] = { 
  /* [0][0][][] */ 12,41,30,26,-1,-28,42,45,8,22,-6,-7,42,-29,50,-17,-55,-29,-127,-1,46,-36,14,44,5,-10,48,-2,-4,-48,2,31,-42,53,51,0,53,72,-54,-48,7,16,-91,-44,30,27,-26,-53, 
  /* [1][0][][] */ -22,-38,-4,79,-32,2,3,-12,9,12,-17,-42,3,-12,9,1,42,20,60,-47,8,27,29,-45,4,-9,-26,-36,-31,12,-8,4,-36,-24,-104,80,22,21,-127,-25,23,-8,64,20,105,-22,-38,50, 
  /* [2][0][][] */ -14,1,28,-28,-35,-22,-4,119,-39,82,-40,-5,127,-14,43,-25,-55,-70,-2,31,-10,-14,30,3,8,56,6,39,19,18,81,35,-72,-21,24,67,6,70,64,-116,49,39,-47,-30,15,34,-3,-7, 
  /* [3][0][][] */ 22,-2,-127,-25,11,-9,58,-30,-29,-18,-11,17,-45,-62,41,18,12,47,11,28,-54,15,-70,-11,-37,-69,33,4,-77,-62,-56,22,76,40,-47,24,-54,5,24,-21,30,-60,-28,15,57,-51,46,-18, 
  /* [4][0][][] */ 12,45,1,-15,27,-3,-82,-115,-41,20,-22,79,3,-22,1,64,41,54,-84,10,27,4,-35,-13,45,-8,4,2,-22,7,-7,-36,26,-22,-127,28,-32,-3,42,41,-28,-40,81,41,13,-51,13,12, 
  /* [5][0][][] */ -52,-29,97,10,84,25,51,-10,-127,4,-104,-15,-90,-83,57,84,-17,31,16,9,47,25,27,8,-25,0,7,-11,-39,-2,-22,-32,-20,44,73,23,-15,66,-20,0,45,-46,-50,54,-13,19,33,27, 
  /* [6][0][][] */ 93,61,-17,22,32,-31,-112,-78,3,-3,1,71,-24,-28,3,42,-37,42,17,4,127,-14,66,118,3,-61,10,-20,-59,-17,-43,-67,56,-36,22,-16,-10,26,-43,43,-57,-56,-63,-35,-29,-49,45,-3, 
  /* [7][0][][] */ 7,53,39,-87,60,-49,-42,-20,10,6,36,27,-39,3,37,-3,-19,25,-20,58,-51,-6,-11,55,4,-33,6,40,-8,31,-43,-13,48,-7,-35,-44,-65,12,127,-7,13,-36,-23,-12,41,6,62,3, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant36_scale = { 8, { 0.0036413932684808969, 0.006444763857871294, 0.0031560889910906553, 0.0036602341569960117, 0.0066832788288593292, 0.0031387603376060724, 0.0067324768751859665, 0.0055921678431332111, } };
const TfArray<8, int> quant36_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[8] = { -2663, -729, -13837, 10462, 8068, -2423, 9009, 2746, };
const TfArray<1, int> tensor_dimension37 = { 1, { 8 } };
const TfArray<8, float> quant37_scale = { 8, { 8.5679843323305249e-05, 0.00015164150681812316, 7.426091906381771e-05, 8.6123160144779831e-05, 0.00015725362754892558, 7.3853188951034099e-05, 0.00015841121785342693, 0.00013158042565919459, } };
const TfArray<8, int> quant37_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[48*1*1*8] = { 
  /* [0][0][][] */ 22,-25,-72,20,-127,8,-62,1, 
  /* [1][0][][] */ -127,41,127,4,-122,-27,-3,-9, 
  /* [2][0][][] */ 13,65,-37,24,-48,-127,-8,84, 
  /* [3][0][][] */ -85,42,-5,127,2,-44,-75,-48, 
  /* [4][0][][] */ 14,-15,43,-121,-26,19,-127,13, 
  /* [5][0][][] */ 62,127,-48,-49,-48,-15,28,-115, 
  /* [6][0][][] */ 66,-58,47,96,-39,-127,7,-92, 
  /* [7][0][][] */ 32,121,-46,-63,-69,-32,15,-127, 
  /* [8][0][][] */ 0,-28,59,-6,3,6,-53,-127, 
  /* [9][0][][] */ -89,-7,-121,31,-127,-92,-90,-20, 
  /* [10][0][][] */ 91,-1,91,-37,-127,2,98,104, 
  /* [11][0][][] */ 127,-27,-85,15,64,0,-86,-2, 
  /* [12][0][][] */ -20,-118,127,18,29,11,-73,76, 
  /* [13][0][][] */ 40,-60,80,-10,12,-127,50,-123, 
  /* [14][0][][] */ -90,34,127,-2,-37,-68,45,-42, 
  /* [15][0][][] */ 43,127,-56,-57,-72,11,45,-127, 
  /* [16][0][][] */ 30,93,-51,61,0,-42,-9,127, 
  /* [17][0][][] */ 33,80,-7,73,-63,82,-127,33, 
  /* [18][0][][] */ 58,-19,127,-36,66,-93,2,-33, 
  /* [19][0][][] */ 6,-6,21,127,23,-43,-42,-99, 
  /* [20][0][][] */ 7,27,-22,35,-15,54,-127,6, 
  /* [21][0][][] */ 6,-1,54,18,21,127,46,-57, 
  /* [22][0][][] */ 60,-127,-18,62,-72,59,23,27, 
  /* [23][0][][] */ -39,-113,-7,-112,-4,-70,-5,-127, 
  /* [24][0][][] */ 18,18,-20,-59,-36,-127,-41,53, 
  /* [25][0][][] */ 65,67,127,16,4,25,-46,-2, 
  /* [26][0][][] */ -113,41,127,-49,-90,-21,91,-10, 
  /* [27][0][][] */ -81,44,-39,-97,30,127,-21,91, 
  /* [28][0][][] */ 14,-110,71,53,46,11,-36,127, 
  /* [29][0][][] */ -119,60,81,-39,-127,4,97,-35, 
  /* [30][0][][] */ 103,-93,17,68,-127,-13,43,-93, 
  /* [31][0][][] */ 55,75,48,-32,-98,-25,16,127, 
  /* [32][0][][] */ -43,-10,88,-49,16,1,-127,-101, 
  /* [33][0][][] */ 51,40,108,-127,15,48,-36,64, 
  /* [34][0][][] */ -13,-127,86,-28,45,126,71,-89, 
  /* [35][0][][] */ 48,0,87,9,24,127,34,-39, 
  /* [36][0][][] */ -22,36,-15,41,42,-127,1,12, 
  /* [37][0][][] */ 28,-27,60,26,-127,118,-34,-21, 
  /* [38][0][][] */ -127,-41,-127,-15,110,-32,-125,-25, 
  /* [39][0][][] */ 21,-2,39,-118,-38,51,-127,13, 
  /* [40][0][][] */ 84,-22,-77,-127,68,55,60,-21, 
  /* [41][0][][] */ 15,-18,-2,127,-109,6,-92,-66, 
  /* [42][0][][] */ -83,30,82,127,-71,-63,-67,-1, 
  /* [43][0][][] */ 83,-113,103,45,-127,19,126,67, 
  /* [44][0][][] */ 4,-36,43,-73,-31,127,34,14, 
  /* [45][0][][] */ -31,37,-33,-1,66,-44,-127,-42, 
  /* [46][0][][] */ -95,-99,-17,-15,33,127,-34,-111, 
  /* [47][0][][] */ -119,-81,-37,22,11,127,-32,-70, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant38_scale = { 48, { 0.0036634581629186869, 0.0030147708021104336, 0.0016255498630926013, 0.0016742802690714598, 0.0013141168747097254, 0.0020523699931800365, 0.0030204702634364367, 0.0006994190625846386, 0.0024723454844206572, 0.0010285340249538422, 0.0016005965881049633, 0.0058346912264823914, 0.0015770712634548545, 0.0021033878438174725, 0.0032745643984526396, 0.0017992237117141485, 0.0017046073917299509, 0.00090946059208363295, 0.0031931200064718723, 0.0038922899402678013, 0.0031530074775218964, 0.0017768439138308167, 0.0016131686279550195, 0.0027649174444377422, 0.0020864305552095175, 0.0024274853058159351, 0.003775077173486352, 0.0029613757506012917, 0.0023526304867118597, 0.0029736976139247417, 0.0014206311898306012, 0.0019836295396089554, 0.0017089009052142501, 0.0018899954156950116, 0.0013358204159885645, 0.0016966167604550719, 0.0010459085460752249, 0.0016518121119588614, 0.0013470657868310809, 0.0025180680677294731, 0.00299103744328022, 0.0010139242513105273, 0.0027293718885630369, 0.0012115457793697715, 0.0011073444038629532, 0.0023986389860510826, 0.0019952780567109585, 0.0015174396103248, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[48] = { -401, 1464, 2055, 4855, 9276, -866, -1656, 18384, 1454, 10312, 730, -719, 5125, -4095, 2745, -2056, -419, -1752, 994, 1823, 2772, 3708, 5134, 668, -3241, -2509, 451, 2224, 2004, 2656, -1500, 3951, 5401, 5209, 3988, 1457, 11054, 1761, 1165, -1304, 990, 12574, -566, 2252, 10159, 286, 1583, 6831, };
const TfArray<1, int> tensor_dimension39 = { 1, { 48 } };
const TfArray<48, float> quant39_scale = { 48, { 0.00028015830321237445, 0.00023055076599121094, 0.00012431186041794717, 0.00012803846038877964, 0.00010049541742773727, 0.00015695238835178316, 0.00023098662495613098, 5.348718332243152e-05, 0.00018906946934293956, 7.8655830293428153e-05, 0.00012240359501447529, 0.00044620057451538742, 0.00012060451990691945, 0.00016085390234366059, 0.00025041814660653472, 0.00013759334979113191, 0.00013035768643021584, 6.954983837204054e-05, 0.00024418978136964142, 0.0002976579125970602, 0.00024112223763950169, 0.00013588188448920846, 0.00012336502550169826, 0.00021144354832358658, 0.00015955712296999991, 0.00018563885532785207, 0.00028869422385469079, 0.00022646744037047029, 0.00017991442291531712, 0.00022740973508916795, 0.00010864096111617982, 0.00015169555263128132, 0.00013068602129351348, 0.00014453499170485884, 0.0001021551652229391, 0.00012974660785403103, 7.9984522017184645e-05, 0.000126320228446275, 0.0001030151397571899, 0.00019256604718975723, 0.00022873577836435288, 7.7538570621982217e-05, 0.00020872523600701243, 9.265142580261454e-05, 8.4682753367815167e-05, 0.0001834328577388078, 0.00015258634812198579, 0.00011604426254052669, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*48] = { 
  /* [0][0][][] */ 26,76,38,-66,-60,29,0,81,2,-24,-127,-118,-98,83,-38,80,37,106,23,15,-23,-86,-54,27,85,-79,21,113,43,-63,37,13,-60,101,22,-49,-18,32,-86,-1,-112,-32,124,-94,77,-4,-75,110, 
  /* [1][0][][] */ 71,15,80,48,35,-62,2,122,41,66,-90,22,-108,-127,34,-65,-57,-23,16,-22,107,90,-99,-68,30,6,-21,-61,72,54,-72,-57,-77,-77,-95,-70,41,-55,-44,26,-10,115,2,-6,44,10,-37,42, 
  /* [2][0][][] */ 1,-62,-54,-32,-33,1,64,1,22,23,-52,-38,48,71,-59,-103,-71,28,-33,22,-87,-43,27,27,-57,57,-35,11,-7,-30,-68,29,42,-55,46,3,2,19,5,58,53,-29,127,68,-51,44,44,24, 
  /* [3][0][][] */ -86,86,52,-94,94,95,65,65,93,13,38,-56,96,35,97,103,-127,61,-63,90,-80,67,-82,-3,106,66,-112,12,55,27,-50,101,-112,21,21,-100,-101,-49,-90,-65,-91,-51,-76,21,-81,-113,-35,-42, 
  /* [4][0][][] */ -56,30,79,5,63,18,-14,-23,28,66,-64,-30,-45,42,33,-72,77,42,-24,-50,-63,76,-59,-10,-13,-90,84,45,29,-80,127,37,-76,48,-27,-32,89,-2,-83,-72,104,90,-71,-47,1,84,-18,-19, 
  /* [5][0][][] */ -89,118,-37,-44,35,-15,-41,67,-7,-79,51,10,-73,28,114,113,-109,127,101,0,114,14,-55,107,-115,60,-23,-53,-40,44,61,7,-59,75,66,63,109,-48,-56,-29,73,4,-2,-60,106,120,10,-4, 
  /* [6][0][][] */ 113,-33,62,-33,-57,-42,46,-34,10,120,47,127,78,-59,-20,70,7,56,36,92,-64,102,106,39,4,12,-107,-10,19,-74,9,89,-73,29,69,67,-23,-42,78,30,-50,70,48,21,-51,75,-61,17, 
  /* [7][0][][] */ 74,33,-50,-107,89,-22,-22,-57,17,-74,-8,-3,-46,127,83,48,67,-6,-42,43,61,-89,-4,-54,97,-68,45,89,-79,-31,47,8,-112,-41,56,-36,98,-6,-6,-92,-95,27,-59,89,7,-61,-84,-54, 
  /* [8][0][][] */ -60,-59,-118,-6,60,-3,-25,-107,95,-122,127,-107,-30,-106,-126,-6,22,83,87,-76,104,64,102,-61,-77,-113,15,-107,-84,-91,-109,-6,-46,-5,-98,121,-123,-107,-54,-77,-23,24,45,-25,-11,-62,-25,99, 
  /* [9][0][][] */ -11,-35,54,103,43,67,96,52,15,72,82,93,127,65,-23,-26,25,-47,-62,-63,-82,93,34,-19,-27,-72,-46,68,95,-120,-31,73,-93,-63,125,-30,-7,-3,-57,-71,121,113,25,15,52,85,33,-13, 
  /* [10][0][][] */ -100,36,-88,-106,-53,82,-127,-109,72,-111,80,69,-16,27,64,-13,104,4,-89,27,-18,-69,-48,78,26,99,-40,-35,-112,-86,-19,-116,54,28,102,-122,108,-90,36,107,80,20,21,53,-23,19,-11,-12, 
  /* [11][0][][] */ 85,74,-56,-70,97,4,-36,-77,-72,53,38,-39,29,-73,62,-63,-108,86,-11,-38,-31,-29,57,-70,-101,109,80,90,-11,55,-2,48,64,90,-108,-60,20,127,-47,-57,47,-95,117,-109,90,38,-90,-13, 
  /* [12][0][][] */ -48,-47,-48,121,19,-44,-47,-55,-18,23,-2,83,-50,-59,-43,56,66,-48,43,120,-83,-16,92,60,41,67,-92,19,127,-81,101,89,31,-25,14,-63,30,-86,91,39,112,97,39,-39,48,-1,-44,98, 
  /* [13][0][][] */ 55,64,88,-68,113,40,30,-62,31,-116,8,-14,-20,70,51,95,67,72,-5,92,127,-21,-46,-93,61,-67,15,-84,-9,-96,-83,-7,-9,-108,7,-10,71,-106,72,62,-53,-70,89,64,55,-8,57,64, 
  /* [14][0][][] */ -41,-54,98,67,65,-75,24,-3,4,77,-28,-79,8,111,-17,47,-87,-18,-13,-90,2,48,-46,-34,-43,-13,80,33,77,-72,81,-34,-30,105,122,34,37,83,-84,-82,108,127,125,25,89,-62,2,-40, 
  /* [15][0][][] */ 23,50,5,-42,-66,82,12,51,-77,-26,78,-59,-5,-50,-26,-19,-24,83,-73,22,-11,-60,-52,-16,-7,6,89,90,-19,-51,-127,27,55,88,-31,-12,-16,90,-21,-61,-49,98,94,-68,71,51,-56,-65, 
  /* [16][0][][] */ 0,18,-77,93,69,-52,101,86,-30,36,73,-10,-40,96,-95,-24,31,62,-36,-19,-94,-16,-66,21,91,-55,-62,17,-30,78,127,28,-66,-38,28,12,-9,74,-90,49,45,27,62,-16,-75,-11,-75,-46, 
  /* [17][0][][] */ -15,104,-108,-28,-23,46,-43,114,39,-27,101,-45,-33,100,43,-55,29,94,-24,78,27,-10,-64,-14,-114,20,-26,-77,-56,55,65,-97,77,-33,-33,51,44,-47,-24,54,-47,127,-18,-89,117,31,-82,-94, 
  /* [18][0][][] */ 80,-118,-121,-20,59,21,-122,-105,-60,43,-88,-82,-12,102,22,38,22,95,-92,-47,-89,50,20,34,25,-22,41,-114,-26,-127,33,-120,-33,89,112,-63,28,-43,-67,-86,-110,23,120,-68,-29,44,96,-68, 
  /* [19][0][][] */ 73,76,-96,91,118,87,-56,16,107,-31,3,-73,75,77,127,-35,37,-84,-29,124,-81,-75,23,124,64,3,43,-21,66,52,111,-106,82,-14,-89,92,-100,-13,-64,31,64,48,63,43,-30,57,-104,109, 
  /* [20][0][][] */ 3,-107,-20,73,109,23,100,55,-64,-75,32,42,-24,-86,-2,-111,-6,-66,127,52,67,-127,127,-19,-105,118,-97,20,35,-88,-47,8,46,114,101,-68,123,19,-114,21,123,-122,-102,-11,56,22,-42,-44, 
  /* [21][0][][] */ 61,104,91,-89,-43,-52,-89,-58,-30,88,15,-102,-60,-76,-98,-101,-46,-27,-79,-107,-46,52,100,-57,78,29,75,-32,-72,-111,97,-12,-98,20,94,103,-127,-86,-120,19,-3,40,-44,5,-84,91,-125,64, 
  /* [22][0][][] */ 6,-45,121,9,-49,-80,100,95,54,24,-4,72,-22,36,-3,-93,-34,6,-59,109,73,126,14,90,-41,30,-68,89,15,-56,-58,-20,-64,127,47,55,74,-89,-25,-72,0,28,-54,18,90,-12,126,-38, 
  /* [23][0][][] */ -33,14,17,-26,-79,19,62,20,30,-88,50,-127,-103,77,74,-33,30,54,54,31,57,101,50,-2,36,-36,-55,-56,-114,85,-8,118,89,-53,99,-14,3,116,75,-65,106,51,107,-103,-88,7,-90,104, 
  /* [24][0][][] */ 0,101,120,111,74,-9,-98,114,9,-86,-82,60,29,-1,5,-48,-20,55,-52,94,127,-15,-27,38,-32,79,-52,-48,73,125,97,-15,126,-35,-10,-14,25,-30,-77,-73,4,118,-64,39,-37,85,55,-57, 
  /* [25][0][][] */ -9,-17,-15,65,-6,8,-93,39,-37,63,91,87,-102,87,79,-114,-45,-36,-101,-10,58,100,15,100,70,-99,-83,-64,118,62,-81,64,-112,-82,102,114,-124,49,-116,109,-90,103,50,42,-11,-106,-119,-127, 
  /* [26][0][][] */ 74,-89,-8,-14,79,-111,105,-46,40,-38,-90,27,-46,-65,30,-30,102,1,-81,-86,41,-59,72,91,-3,-42,40,41,31,-13,-50,-47,-35,44,42,111,-6,87,-127,101,99,1,-39,-98,-12,46,112,6, 
  /* [27][0][][] */ 56,35,-122,114,-38,-38,2,-10,-101,87,-33,-2,-122,76,75,-58,38,-125,-15,-117,-32,51,84,-97,-117,65,-50,47,97,-71,61,-127,105,-96,32,102,107,51,-83,-51,33,49,-33,62,62,-100,103,-77, 
  /* [28][0][][] */ -106,126,-37,85,21,103,-99,2,66,-57,-100,43,67,-77,32,-86,-68,88,43,100,106,80,2,-80,59,-50,89,117,-70,31,-23,47,-12,26,-35,-47,44,108,-34,127,-96,-17,8,54,111,115,-12,9, 
  /* [29][0][][] */ 13,-32,27,11,-41,-4,18,-127,-61,-43,-59,-98,62,-21,-94,-34,83,86,-82,93,20,-78,-96,-97,80,-74,-106,-62,-58,83,-65,17,-115,111,112,-3,-38,-100,13,-39,105,-64,-31,34,-95,52,-124,-7, 
  /* [30][0][][] */ -81,-92,-104,-63,50,83,25,-9,-85,22,3,31,77,35,-121,-127,69,106,44,-19,-17,-84,98,-100,0,48,-49,7,62,-55,-15,28,-5,-41,8,18,-101,-37,69,-20,-21,-105,-78,-112,64,105,-42,-38, 
  /* [31][0][][] */ 44,127,76,-56,-86,-18,112,-105,-104,-69,75,-51,-99,-93,99,14,-12,44,-40,25,-37,-56,119,4,87,91,-60,-77,-9,84,71,71,76,32,67,114,49,119,-24,-108,-1,112,-122,50,26,109,52,-14, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0023684080224484205, 0.0023451861925423145, 0.0026925657875835896, 0.0023271285463124514, 0.0027911658398807049, 0.0024204305373132229, 0.0028747341129928827, 0.0025716689415276051, 0.0021406267769634724, 0.0020766081288456917, 0.0022375797852873802, 0.002356366254389286, 0.002550206147134304, 0.0022014135029166937, 0.002272346056997776, 0.0030385474674403667, 0.0028716404922306538, 0.0022178159561008215, 0.0021626495290547609, 0.0021904278546571732, 0.0020454074256122112, 0.0022920619230717421, 0.0026611222419887781, 0.0023913879413157701, 0.0023544728755950928, 0.0021969659719616175, 0.0022585161495953798, 0.0022370233200490475, 0.0023878135252743959, 0.0022079981863498688, 0.0023881183005869389, 0.0019086475949734449, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { 401, 425, 16, -599, 726, 407, 2806, -327, -31, 747, -465, 448, 1154, -30, 529, 333, -33, 481, -247, 452, 75, -855, 2273, 393, 405, -321, -358, -304, 377, -506, -627, -567, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.8438923840876669e-05, 4.7963989345589653e-05, 5.5068630899768323e-05, 4.7594672651030123e-05, 5.7085209846263751e-05, 4.9502894398756325e-05, 5.8794357755687088e-05, 5.2596038585761562e-05, 4.378031735541299e-05, 4.2471001506783068e-05, 4.5763212256133556e-05, 4.8192643589572981e-05, 5.2157076424919069e-05, 4.5023534767096862e-05, 4.6474255213979632e-05, 6.2144681578502059e-05, 5.8731086028274149e-05, 4.5359000068856403e-05, 4.4230731873540208e-05, 4.4798856833949685e-05, 4.1832881834125146e-05, 4.687748514697887e-05, 5.4425545386038721e-05, 4.890891068498604e-05, 4.8153920943150297e-05, 4.4932574382983148e-05, 4.6191402361728251e-05, 4.5751829020446166e-05, 4.8835805500857532e-05, 4.5158205466577783e-05, 4.8842040996532887e-05, 3.9035858208080754e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -49,4,-36,-56,114,-7,127,21,34,-51,-75,-72,89,-23,111,-43,-55,-19,70,1,86,-24,121,-50,-31,91,17,-75,-70,-65,36,4, 
  /* [1][0][][] */ 98,127,-92,-69,7,106,-10,-49,70,-120,-85,65,-91,7,34,92,-94,104,100,81,-74,-1,-42,56,109,-1,-78,-87,68,82,103,-103, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.0044677364639937878, 0.0034628582652658224, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 38506, -48359, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00012261862866580486, 9.5039387815631926e-05, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.094656415283679962, } };
const TfArray<1, int> quant46_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.094985246658325195, } };
const TfArray<1, int> quant47_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.10134360939264297, } };
const TfArray<1, int> quant51_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.08110654354095459, } };
const TfArray<1, int> quant54_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.10553815215826035, } };
const TfArray<1, int> quant55_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.072864174842834473, } };
const TfArray<1, int> quant59_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.034273844212293625, } };
const TfArray<1, int> quant62_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.069794610142707825, } };
const TfArray<1, int> quant63_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.046644344925880432, } };
const TfArray<1, int> quant66_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.076473727822303772, } };
const TfArray<1, int> quant67_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.020452102646231651, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.027445359155535698, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.073104307055473328, } };
const TfArray<1, int> quant70_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,8,9 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,10,11 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,12,13 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,14,15 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,16,17 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,18,19 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,20,21 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,22,23 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,24,25 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,26,27 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,28,29 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,30,31 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,32,33 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,34,35 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,36,37 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,38,39 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,40,41 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,42,43 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 18432, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 14976, (TfLiteIntArray*)&tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8064, (TfLiteIntArray*)&tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_35_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;
  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 28; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 28; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_35_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  71, 
};
TfLiteStatus tflite_learn_35_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_35_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_35_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
